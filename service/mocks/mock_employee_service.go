// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../mocks/mock_employee_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	pagination "maicare_go/pagination"
	employees "maicare_go/service/employees"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeeService is a mock of EmployeeService interface.
type MockEmployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceMockRecorder
	isgomock struct{}
}

// MockEmployeeServiceMockRecorder is the mock recorder for MockEmployeeService.
type MockEmployeeServiceMockRecorder struct {
	mock *MockEmployeeService
}

// NewMockEmployeeService creates a new mock instance.
func NewMockEmployeeService(ctrl *gomock.Controller) *MockEmployeeService {
	mock := &MockEmployeeService{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeService) EXPECT() *MockEmployeeServiceMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockEmployeeService) CreateEmployee(req employees.CreateEmployeeProfileRequest, ctx context.Context) (*employees.CreateEmployeeProfileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", req, ctx)
	ret0, _ := ret[0].(*employees.CreateEmployeeProfileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockEmployeeServiceMockRecorder) CreateEmployee(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockEmployeeService)(nil).CreateEmployee), req, ctx)
}

// ListEmployees mocks base method.
func (m *MockEmployeeService) ListEmployees(req employees.ListEmployeeRequest, ctx *gin.Context) (*pagination.Response[employees.ListEmployeeResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", req, ctx)
	ret0, _ := ret[0].(*pagination.Response[employees.ListEmployeeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockEmployeeServiceMockRecorder) ListEmployees(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockEmployeeService)(nil).ListEmployees), req, ctx)
}

// UpdateEmployeeIsSubcontractor mocks base method.
func (m *MockEmployeeService) UpdateEmployeeIsSubcontractor(req employees.UpdateEmployeeIsSubcontractorRequest, employeeID int64, ctx context.Context) (*employees.UpdateEmployeeIsSubcontractorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeIsSubcontractor", req, employeeID, ctx)
	ret0, _ := ret[0].(*employees.UpdateEmployeeIsSubcontractorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeIsSubcontractor indicates an expected call of UpdateEmployeeIsSubcontractor.
func (mr *MockEmployeeServiceMockRecorder) UpdateEmployeeIsSubcontractor(req, employeeID, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeIsSubcontractor", reflect.TypeOf((*MockEmployeeService)(nil).UpdateEmployeeIsSubcontractor), req, employeeID, ctx)
}
