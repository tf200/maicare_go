// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../mocks/mock_employee_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "maicare_go/db/sqlc"
	employees "maicare_go/service/employees"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmployeeService is a mock of EmployeeService interface.
type MockEmployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceMockRecorder
	isgomock struct{}
}

// MockEmployeeServiceMockRecorder is the mock recorder for MockEmployeeService.
type MockEmployeeServiceMockRecorder struct {
	mock *MockEmployeeService
}

// NewMockEmployeeService creates a new mock instance.
func NewMockEmployeeService(ctrl *gomock.Controller) *MockEmployeeService {
	mock := &MockEmployeeService{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeService) EXPECT() *MockEmployeeServiceMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockEmployeeService) CreateEmployee(req employees.CreateEmployeeRequest, ctx context.Context) (*employees.CreateEmployeeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", req, ctx)
	ret0, _ := ret[0].(*employees.CreateEmployeeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockEmployeeServiceMockRecorder) CreateEmployee(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockEmployeeService)(nil).CreateEmployee), req, ctx)
}

// ListEmployees mocks base method.
func (m *MockEmployeeService) ListEmployees(req employees.ListEmployeesRequest, ctx context.Context) ([]db.ListEmployeeProfileRow, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployees", req, ctx)
	ret0, _ := ret[0].([]db.ListEmployeeProfileRow)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEmployees indicates an expected call of ListEmployees.
func (mr *MockEmployeeServiceMockRecorder) ListEmployees(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployees", reflect.TypeOf((*MockEmployeeService)(nil).ListEmployees), req, ctx)
}

// UpdateEmployeeIsSubcontractor mocks base method.
func (m *MockEmployeeService) UpdateEmployeeIsSubcontractor(req employees.UpdateEmployeeIsSubcontractorRequest, ctx context.Context) (*employees.UpdateEmployeeIsSubcontractorResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeIsSubcontractor", req, ctx)
	ret0, _ := ret[0].(*employees.UpdateEmployeeIsSubcontractorResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeIsSubcontractor indicates an expected call of UpdateEmployeeIsSubcontractor.
func (mr *MockEmployeeServiceMockRecorder) UpdateEmployeeIsSubcontractor(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeIsSubcontractor", reflect.TypeOf((*MockEmployeeService)(nil).UpdateEmployeeIsSubcontractor), req, ctx)
}
