// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../mocks/mock_auth_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	auth "maicare_go/service/auth"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ChangePassword mocks base method.
func (m *MockAuthService) ChangePassword(req auth.ChangePasswordRequest, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", req, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthServiceMockRecorder) ChangePassword(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthService)(nil).ChangePassword), req, ctx)
}

// EnableTwoFA mocks base method.
func (m *MockAuthService) EnableTwoFA(req auth.EnableTwoFARequest, ctx context.Context) (*auth.EnableTwoFAResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTwoFA", req, ctx)
	ret0, _ := ret[0].(*auth.EnableTwoFAResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableTwoFA indicates an expected call of EnableTwoFA.
func (mr *MockAuthServiceMockRecorder) EnableTwoFA(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTwoFA", reflect.TypeOf((*MockAuthService)(nil).EnableTwoFA), req, ctx)
}

// Login mocks base method.
func (m *MockAuthService) Login(req auth.LoginRequest, ctx context.Context) (*auth.LoginResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", req, ctx)
	ret0, _ := ret[0].(*auth.LoginResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), req, ctx)
}

// Logout mocks base method.
func (m *MockAuthService) Logout(req auth.LogoutRequest, ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", req, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthServiceMockRecorder) Logout(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthService)(nil).Logout), req, ctx)
}

// RefreshToken mocks base method.
func (m *MockAuthService) RefreshToken(req auth.RefreshTokenRequest, ctx context.Context) (*auth.RefreshTokenResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", req, ctx)
	ret0, _ := ret[0].(*auth.RefreshTokenResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthServiceMockRecorder) RefreshToken(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthService)(nil).RefreshToken), req, ctx)
}

// SetupTwoFA mocks base method.
func (m *MockAuthService) SetupTwoFA(req auth.SetupTwoFARequest, ctx context.Context) (*auth.SetupTwoFAResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupTwoFA", req, ctx)
	ret0, _ := ret[0].(*auth.SetupTwoFAResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupTwoFA indicates an expected call of SetupTwoFA.
func (mr *MockAuthServiceMockRecorder) SetupTwoFA(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupTwoFA", reflect.TypeOf((*MockAuthService)(nil).SetupTwoFA), req, ctx)
}

// VerifyTwoFAToken mocks base method.
func (m *MockAuthService) VerifyTwoFAToken(req auth.VerifyTwoFATokenRequest, ctx context.Context) (*auth.LoginResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTwoFAToken", req, ctx)
	ret0, _ := ret[0].(*auth.LoginResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyTwoFAToken indicates an expected call of VerifyTwoFAToken.
func (mr *MockAuthServiceMockRecorder) VerifyTwoFAToken(req, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTwoFAToken", reflect.TypeOf((*MockAuthService)(nil).VerifyTwoFAToken), req, ctx)
}
