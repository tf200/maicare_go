// Code generated by MockGen. DO NOT EDIT.
// Source: querier.go
//
// Generated by this command:
//
//	mockgen -source=querier.go -destination=../../mocks/mock_db.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "maicare_go/db/sqlc"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddEducationToEmployeeProfile mocks base method.
func (m *MockQuerier) AddEducationToEmployeeProfile(ctx context.Context, arg db.AddEducationToEmployeeProfileParams) (db.EmployeeEducation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEducationToEmployeeProfile", ctx, arg)
	ret0, _ := ret[0].(db.EmployeeEducation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEducationToEmployeeProfile indicates an expected call of AddEducationToEmployeeProfile.
func (mr *MockQuerierMockRecorder) AddEducationToEmployeeProfile(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEducationToEmployeeProfile", reflect.TypeOf((*MockQuerier)(nil).AddEducationToEmployeeProfile), ctx, arg)
}

// AddEmployeeCertification mocks base method.
func (m *MockQuerier) AddEmployeeCertification(ctx context.Context, arg db.AddEmployeeCertificationParams) (db.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmployeeCertification", ctx, arg)
	ret0, _ := ret[0].(db.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmployeeCertification indicates an expected call of AddEmployeeCertification.
func (mr *MockQuerierMockRecorder) AddEmployeeCertification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmployeeCertification", reflect.TypeOf((*MockQuerier)(nil).AddEmployeeCertification), ctx, arg)
}

// AddEmployeeContractDetails mocks base method.
func (m *MockQuerier) AddEmployeeContractDetails(ctx context.Context, arg db.AddEmployeeContractDetailsParams) (db.EmployeeProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmployeeContractDetails", ctx, arg)
	ret0, _ := ret[0].(db.EmployeeProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmployeeContractDetails indicates an expected call of AddEmployeeContractDetails.
func (mr *MockQuerierMockRecorder) AddEmployeeContractDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmployeeContractDetails", reflect.TypeOf((*MockQuerier)(nil).AddEmployeeContractDetails), ctx, arg)
}

// AddEmployeeExperience mocks base method.
func (m *MockQuerier) AddEmployeeExperience(ctx context.Context, arg db.AddEmployeeExperienceParams) (db.EmployeeExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEmployeeExperience", ctx, arg)
	ret0, _ := ret[0].(db.EmployeeExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEmployeeExperience indicates an expected call of AddEmployeeExperience.
func (mr *MockQuerierMockRecorder) AddEmployeeExperience(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEmployeeExperience", reflect.TypeOf((*MockQuerier)(nil).AddEmployeeExperience), ctx, arg)
}

// AddPermissionsToRole mocks base method.
func (m *MockQuerier) AddPermissionsToRole(ctx context.Context, arg db.AddPermissionsToRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPermissionsToRole", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPermissionsToRole indicates an expected call of AddPermissionsToRole.
func (mr *MockQuerierMockRecorder) AddPermissionsToRole(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPermissionsToRole", reflect.TypeOf((*MockQuerier)(nil).AddPermissionsToRole), ctx, arg)
}

// AddUrgencyScore mocks base method.
func (m *MockQuerier) AddUrgencyScore(ctx context.Context, arg db.AddUrgencyScoreParams) (db.IntakeForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUrgencyScore", ctx, arg)
	ret0, _ := ret[0].(db.IntakeForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUrgencyScore indicates an expected call of AddUrgencyScore.
func (mr *MockQuerierMockRecorder) AddUrgencyScore(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUrgencyScore", reflect.TypeOf((*MockQuerier)(nil).AddUrgencyScore), ctx, arg)
}

// AssignEmployee mocks base method.
func (m *MockQuerier) AssignEmployee(ctx context.Context, arg db.AssignEmployeeParams) (db.AssignEmployeeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignEmployee", ctx, arg)
	ret0, _ := ret[0].(db.AssignEmployeeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignEmployee indicates an expected call of AssignEmployee.
func (mr *MockQuerierMockRecorder) AssignEmployee(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignEmployee", reflect.TypeOf((*MockQuerier)(nil).AssignEmployee), ctx, arg)
}

// AssignRoleToUser mocks base method.
func (m *MockQuerier) AssignRoleToUser(ctx context.Context, arg db.AssignRoleToUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRoleToUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRoleToUser indicates an expected call of AssignRoleToUser.
func (mr *MockQuerierMockRecorder) AssignRoleToUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRoleToUser", reflect.TypeOf((*MockQuerier)(nil).AssignRoleToUser), ctx, arg)
}

// AssignSender mocks base method.
func (m *MockQuerier) AssignSender(ctx context.Context, arg db.AssignSenderParams) (db.ClientDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignSender", ctx, arg)
	ret0, _ := ret[0].(db.ClientDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignSender indicates an expected call of AssignSender.
func (mr *MockQuerierMockRecorder) AssignSender(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSender", reflect.TypeOf((*MockQuerier)(nil).AssignSender), ctx, arg)
}

// BulkAddAppointmentClients mocks base method.
func (m *MockQuerier) BulkAddAppointmentClients(ctx context.Context, arg db.BulkAddAppointmentClientsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkAddAppointmentClients", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkAddAppointmentClients indicates an expected call of BulkAddAppointmentClients.
func (mr *MockQuerierMockRecorder) BulkAddAppointmentClients(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkAddAppointmentClients", reflect.TypeOf((*MockQuerier)(nil).BulkAddAppointmentClients), ctx, arg)
}

// BulkAddAppointmentParticipants mocks base method.
func (m *MockQuerier) BulkAddAppointmentParticipants(ctx context.Context, arg db.BulkAddAppointmentParticipantsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkAddAppointmentParticipants", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// BulkAddAppointmentParticipants indicates an expected call of BulkAddAppointmentParticipants.
func (mr *MockQuerierMockRecorder) BulkAddAppointmentParticipants(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkAddAppointmentParticipants", reflect.TypeOf((*MockQuerier)(nil).BulkAddAppointmentParticipants), ctx, arg)
}

// CheckUserPermission mocks base method.
func (m *MockQuerier) CheckUserPermission(ctx context.Context, arg db.CheckUserPermissionParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserPermission", ctx, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserPermission indicates an expected call of CheckUserPermission.
func (mr *MockQuerierMockRecorder) CheckUserPermission(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserPermission", reflect.TypeOf((*MockQuerier)(nil).CheckUserPermission), ctx, arg)
}

// ClientsOnWaitlist mocks base method.
func (m *MockQuerier) ClientsOnWaitlist(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientsOnWaitlist", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClientsOnWaitlist indicates an expected call of ClientsOnWaitlist.
func (mr *MockQuerierMockRecorder) ClientsOnWaitlist(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientsOnWaitlist", reflect.TypeOf((*MockQuerier)(nil).ClientsOnWaitlist), ctx)
}

// ConfirmAppointment mocks base method.
func (m *MockQuerier) ConfirmAppointment(ctx context.Context, arg db.ConfirmAppointmentParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmAppointment", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmAppointment indicates an expected call of ConfirmAppointment.
func (mr *MockQuerierMockRecorder) ConfirmAppointment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmAppointment", reflect.TypeOf((*MockQuerier)(nil).ConfirmAppointment), ctx, arg)
}

// ConfirmIncident mocks base method.
func (m *MockQuerier) ConfirmIncident(ctx context.Context, id int64) (db.ConfirmIncidentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmIncident", ctx, id)
	ret0, _ := ret[0].(db.ConfirmIncidentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmIncident indicates an expected call of ConfirmIncident.
func (mr *MockQuerierMockRecorder) ConfirmIncident(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmIncident", reflect.TypeOf((*MockQuerier)(nil).ConfirmIncident), ctx, id)
}

// ContractEndCount mocks base method.
func (m *MockQuerier) ContractEndCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContractEndCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContractEndCount indicates an expected call of ContractEndCount.
func (mr *MockQuerierMockRecorder) ContractEndCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContractEndCount", reflect.TypeOf((*MockQuerier)(nil).ContractEndCount), ctx)
}

// CountAllIncidents mocks base method.
func (m *MockQuerier) CountAllIncidents(ctx context.Context, isConfirmed bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllIncidents", ctx, isConfirmed)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAllIncidents indicates an expected call of CountAllIncidents.
func (mr *MockQuerierMockRecorder) CountAllIncidents(ctx, isConfirmed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllIncidents", reflect.TypeOf((*MockQuerier)(nil).CountAllIncidents), ctx, isConfirmed)
}

// CountEmployeeProfile mocks base method.
func (m *MockQuerier) CountEmployeeProfile(ctx context.Context, arg db.CountEmployeeProfileParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountEmployeeProfile", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountEmployeeProfile indicates an expected call of CountEmployeeProfile.
func (mr *MockQuerierMockRecorder) CountEmployeeProfile(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountEmployeeProfile", reflect.TypeOf((*MockQuerier)(nil).CountEmployeeProfile), ctx, arg)
}

// CountRegistrationForms mocks base method.
func (m *MockQuerier) CountRegistrationForms(ctx context.Context, arg db.CountRegistrationFormsParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountRegistrationForms", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountRegistrationForms indicates an expected call of CountRegistrationForms.
func (mr *MockQuerierMockRecorder) CountRegistrationForms(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountRegistrationForms", reflect.TypeOf((*MockQuerier)(nil).CountRegistrationForms), ctx, arg)
}

// CountSenders mocks base method.
func (m *MockQuerier) CountSenders(ctx context.Context, includeArchived *bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountSenders", ctx, includeArchived)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountSenders indicates an expected call of CountSenders.
func (mr *MockQuerierMockRecorder) CountSenders(ctx, includeArchived any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSenders", reflect.TypeOf((*MockQuerier)(nil).CountSenders), ctx, includeArchived)
}

// CreateAiGeneratedReport mocks base method.
func (m *MockQuerier) CreateAiGeneratedReport(ctx context.Context, arg db.CreateAiGeneratedReportParams) (db.AiGeneratedReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAiGeneratedReport", ctx, arg)
	ret0, _ := ret[0].(db.AiGeneratedReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAiGeneratedReport indicates an expected call of CreateAiGeneratedReport.
func (mr *MockQuerierMockRecorder) CreateAiGeneratedReport(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAiGeneratedReport", reflect.TypeOf((*MockQuerier)(nil).CreateAiGeneratedReport), ctx, arg)
}

// CreateAppointment mocks base method.
func (m *MockQuerier) CreateAppointment(ctx context.Context, arg db.CreateAppointmentParams) (db.ScheduledAppointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppointment", ctx, arg)
	ret0, _ := ret[0].(db.ScheduledAppointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppointment indicates an expected call of CreateAppointment.
func (mr *MockQuerierMockRecorder) CreateAppointment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppointment", reflect.TypeOf((*MockQuerier)(nil).CreateAppointment), ctx, arg)
}

// CreateAppointmentCard mocks base method.
func (m *MockQuerier) CreateAppointmentCard(ctx context.Context, arg db.CreateAppointmentCardParams) (db.AppointmentCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppointmentCard", ctx, arg)
	ret0, _ := ret[0].(db.AppointmentCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppointmentCard indicates an expected call of CreateAppointmentCard.
func (mr *MockQuerierMockRecorder) CreateAppointmentCard(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppointmentCard", reflect.TypeOf((*MockQuerier)(nil).CreateAppointmentCard), ctx, arg)
}

// CreateAppointmentTemplate mocks base method.
func (m *MockQuerier) CreateAppointmentTemplate(ctx context.Context, arg db.CreateAppointmentTemplateParams) (db.AppointmentTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAppointmentTemplate", ctx, arg)
	ret0, _ := ret[0].(db.AppointmentTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAppointmentTemplate indicates an expected call of CreateAppointmentTemplate.
func (mr *MockQuerierMockRecorder) CreateAppointmentTemplate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAppointmentTemplate", reflect.TypeOf((*MockQuerier)(nil).CreateAppointmentTemplate), ctx, arg)
}

// CreateAttachment mocks base method.
func (m *MockQuerier) CreateAttachment(ctx context.Context, arg db.CreateAttachmentParams) (db.AttachmentFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", ctx, arg)
	ret0, _ := ret[0].(db.AttachmentFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockQuerierMockRecorder) CreateAttachment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockQuerier)(nil).CreateAttachment), ctx, arg)
}

// CreateCarePlan mocks base method.
func (m *MockQuerier) CreateCarePlan(ctx context.Context, arg db.CreateCarePlanParams) (db.CarePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlan", ctx, arg)
	ret0, _ := ret[0].(db.CarePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlan indicates an expected call of CreateCarePlan.
func (mr *MockQuerierMockRecorder) CreateCarePlan(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlan", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlan), ctx, arg)
}

// CreateCarePlanAction mocks base method.
func (m *MockQuerier) CreateCarePlanAction(ctx context.Context, arg db.CreateCarePlanActionParams) (db.CarePlanAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanAction", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanAction indicates an expected call of CreateCarePlanAction.
func (mr *MockQuerierMockRecorder) CreateCarePlanAction(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanAction", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanAction), ctx, arg)
}

// CreateCarePlanIntervention mocks base method.
func (m *MockQuerier) CreateCarePlanIntervention(ctx context.Context, arg db.CreateCarePlanInterventionParams) (db.CarePlanIntervention, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanIntervention", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanIntervention)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanIntervention indicates an expected call of CreateCarePlanIntervention.
func (mr *MockQuerierMockRecorder) CreateCarePlanIntervention(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanIntervention", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanIntervention), ctx, arg)
}

// CreateCarePlanObjective mocks base method.
func (m *MockQuerier) CreateCarePlanObjective(ctx context.Context, arg db.CreateCarePlanObjectiveParams) (db.CarePlanObjective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanObjective", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanObjective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanObjective indicates an expected call of CreateCarePlanObjective.
func (mr *MockQuerierMockRecorder) CreateCarePlanObjective(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanObjective", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanObjective), ctx, arg)
}

// CreateCarePlanReport mocks base method.
func (m *MockQuerier) CreateCarePlanReport(ctx context.Context, arg db.CreateCarePlanReportParams) (db.CarePlanReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanReport", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanReport indicates an expected call of CreateCarePlanReport.
func (mr *MockQuerierMockRecorder) CreateCarePlanReport(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanReport", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanReport), ctx, arg)
}

// CreateCarePlanResources mocks base method.
func (m *MockQuerier) CreateCarePlanResources(ctx context.Context, arg db.CreateCarePlanResourcesParams) (db.CarePlanResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanResources", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanResources indicates an expected call of CreateCarePlanResources.
func (mr *MockQuerierMockRecorder) CreateCarePlanResources(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanResources", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanResources), ctx, arg)
}

// CreateCarePlanRisk mocks base method.
func (m *MockQuerier) CreateCarePlanRisk(ctx context.Context, arg db.CreateCarePlanRiskParams) (db.CarePlanRisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanRisk", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanRisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanRisk indicates an expected call of CreateCarePlanRisk.
func (mr *MockQuerierMockRecorder) CreateCarePlanRisk(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanRisk", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanRisk), ctx, arg)
}

// CreateCarePlanSuccessMetric mocks base method.
func (m *MockQuerier) CreateCarePlanSuccessMetric(ctx context.Context, arg db.CreateCarePlanSuccessMetricParams) (db.CarePlanMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanSuccessMetric", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanSuccessMetric indicates an expected call of CreateCarePlanSuccessMetric.
func (mr *MockQuerierMockRecorder) CreateCarePlanSuccessMetric(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanSuccessMetric", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanSuccessMetric), ctx, arg)
}

// CreateCarePlanSupportNetwork mocks base method.
func (m *MockQuerier) CreateCarePlanSupportNetwork(ctx context.Context, arg db.CreateCarePlanSupportNetworkParams) (db.CarePlanSupportNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCarePlanSupportNetwork", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanSupportNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCarePlanSupportNetwork indicates an expected call of CreateCarePlanSupportNetwork.
func (mr *MockQuerierMockRecorder) CreateCarePlanSupportNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCarePlanSupportNetwork", reflect.TypeOf((*MockQuerier)(nil).CreateCarePlanSupportNetwork), ctx, arg)
}

// CreateClientDetails mocks base method.
func (m *MockQuerier) CreateClientDetails(ctx context.Context, arg db.CreateClientDetailsParams) (db.ClientDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientDetails", ctx, arg)
	ret0, _ := ret[0].(db.ClientDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientDetails indicates an expected call of CreateClientDetails.
func (mr *MockQuerierMockRecorder) CreateClientDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientDetails", reflect.TypeOf((*MockQuerier)(nil).CreateClientDetails), ctx, arg)
}

// CreateClientDiagnosis mocks base method.
func (m *MockQuerier) CreateClientDiagnosis(ctx context.Context, arg db.CreateClientDiagnosisParams) (db.ClientDiagnosis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientDiagnosis", ctx, arg)
	ret0, _ := ret[0].(db.ClientDiagnosis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientDiagnosis indicates an expected call of CreateClientDiagnosis.
func (mr *MockQuerierMockRecorder) CreateClientDiagnosis(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientDiagnosis", reflect.TypeOf((*MockQuerier)(nil).CreateClientDiagnosis), ctx, arg)
}

// CreateClientDocument mocks base method.
func (m *MockQuerier) CreateClientDocument(ctx context.Context, arg db.CreateClientDocumentParams) (db.ClientDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientDocument", ctx, arg)
	ret0, _ := ret[0].(db.ClientDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientDocument indicates an expected call of CreateClientDocument.
func (mr *MockQuerierMockRecorder) CreateClientDocument(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientDocument", reflect.TypeOf((*MockQuerier)(nil).CreateClientDocument), ctx, arg)
}

// CreateClientMaturityMatrixAssessment mocks base method.
func (m *MockQuerier) CreateClientMaturityMatrixAssessment(ctx context.Context, arg db.CreateClientMaturityMatrixAssessmentParams) (db.CreateClientMaturityMatrixAssessmentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientMaturityMatrixAssessment", ctx, arg)
	ret0, _ := ret[0].(db.CreateClientMaturityMatrixAssessmentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientMaturityMatrixAssessment indicates an expected call of CreateClientMaturityMatrixAssessment.
func (mr *MockQuerierMockRecorder) CreateClientMaturityMatrixAssessment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientMaturityMatrixAssessment", reflect.TypeOf((*MockQuerier)(nil).CreateClientMaturityMatrixAssessment), ctx, arg)
}

// CreateClientMedication mocks base method.
func (m *MockQuerier) CreateClientMedication(ctx context.Context, arg db.CreateClientMedicationParams) (db.ClientMedication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientMedication", ctx, arg)
	ret0, _ := ret[0].(db.ClientMedication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientMedication indicates an expected call of CreateClientMedication.
func (mr *MockQuerierMockRecorder) CreateClientMedication(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientMedication", reflect.TypeOf((*MockQuerier)(nil).CreateClientMedication), ctx, arg)
}

// CreateClientStatusHistory mocks base method.
func (m *MockQuerier) CreateClientStatusHistory(ctx context.Context, arg db.CreateClientStatusHistoryParams) (db.ClientStatusHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClientStatusHistory", ctx, arg)
	ret0, _ := ret[0].(db.ClientStatusHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClientStatusHistory indicates an expected call of CreateClientStatusHistory.
func (mr *MockQuerierMockRecorder) CreateClientStatusHistory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClientStatusHistory", reflect.TypeOf((*MockQuerier)(nil).CreateClientStatusHistory), ctx, arg)
}

// CreateContract mocks base method.
func (m *MockQuerier) CreateContract(ctx context.Context, arg db.CreateContractParams) (db.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContract", ctx, arg)
	ret0, _ := ret[0].(db.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContract indicates an expected call of CreateContract.
func (mr *MockQuerierMockRecorder) CreateContract(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockQuerier)(nil).CreateContract), ctx, arg)
}

// CreateContractReminder mocks base method.
func (m *MockQuerier) CreateContractReminder(ctx context.Context, arg db.CreateContractReminderParams) (db.ContractReminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractReminder", ctx, arg)
	ret0, _ := ret[0].(db.ContractReminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractReminder indicates an expected call of CreateContractReminder.
func (mr *MockQuerierMockRecorder) CreateContractReminder(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractReminder", reflect.TypeOf((*MockQuerier)(nil).CreateContractReminder), ctx, arg)
}

// CreateContractType mocks base method.
func (m *MockQuerier) CreateContractType(ctx context.Context, name string) (db.ContractType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContractType", ctx, name)
	ret0, _ := ret[0].(db.ContractType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContractType indicates an expected call of CreateContractType.
func (mr *MockQuerierMockRecorder) CreateContractType(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContractType", reflect.TypeOf((*MockQuerier)(nil).CreateContractType), ctx, name)
}

// CreateEmemrgencyContact mocks base method.
func (m *MockQuerier) CreateEmemrgencyContact(ctx context.Context, arg db.CreateEmemrgencyContactParams) (db.ClientEmergencyContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmemrgencyContact", ctx, arg)
	ret0, _ := ret[0].(db.ClientEmergencyContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmemrgencyContact indicates an expected call of CreateEmemrgencyContact.
func (mr *MockQuerierMockRecorder) CreateEmemrgencyContact(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmemrgencyContact", reflect.TypeOf((*MockQuerier)(nil).CreateEmemrgencyContact), ctx, arg)
}

// CreateEmployeeProfile mocks base method.
func (m *MockQuerier) CreateEmployeeProfile(ctx context.Context, arg db.CreateEmployeeProfileParams) (db.EmployeeProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployeeProfile", ctx, arg)
	ret0, _ := ret[0].(db.EmployeeProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployeeProfile indicates an expected call of CreateEmployeeProfile.
func (mr *MockQuerierMockRecorder) CreateEmployeeProfile(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployeeProfile", reflect.TypeOf((*MockQuerier)(nil).CreateEmployeeProfile), ctx, arg)
}

// CreateIncident mocks base method.
func (m *MockQuerier) CreateIncident(ctx context.Context, arg db.CreateIncidentParams) (db.Incident, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncident", ctx, arg)
	ret0, _ := ret[0].(db.Incident)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIncident indicates an expected call of CreateIncident.
func (mr *MockQuerierMockRecorder) CreateIncident(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncident", reflect.TypeOf((*MockQuerier)(nil).CreateIncident), ctx, arg)
}

// CreateIntakeForm mocks base method.
func (m *MockQuerier) CreateIntakeForm(ctx context.Context, arg db.CreateIntakeFormParams) (db.IntakeForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntakeForm", ctx, arg)
	ret0, _ := ret[0].(db.IntakeForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntakeForm indicates an expected call of CreateIntakeForm.
func (mr *MockQuerierMockRecorder) CreateIntakeForm(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntakeForm", reflect.TypeOf((*MockQuerier)(nil).CreateIntakeForm), ctx, arg)
}

// CreateInvoice mocks base method.
func (m *MockQuerier) CreateInvoice(ctx context.Context, arg db.CreateInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoice indicates an expected call of CreateInvoice.
func (mr *MockQuerierMockRecorder) CreateInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoice", reflect.TypeOf((*MockQuerier)(nil).CreateInvoice), ctx, arg)
}

// CreateLocation mocks base method.
func (m *MockQuerier) CreateLocation(ctx context.Context, arg db.CreateLocationParams) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLocation", ctx, arg)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLocation indicates an expected call of CreateLocation.
func (mr *MockQuerierMockRecorder) CreateLocation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLocation", reflect.TypeOf((*MockQuerier)(nil).CreateLocation), ctx, arg)
}

// CreateNotification mocks base method.
func (m *MockQuerier) CreateNotification(ctx context.Context, arg db.CreateNotificationParams) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, arg)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockQuerierMockRecorder) CreateNotification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockQuerier)(nil).CreateNotification), ctx, arg)
}

// CreateOrganisation mocks base method.
func (m *MockQuerier) CreateOrganisation(ctx context.Context, arg db.CreateOrganisationParams) (db.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganisation", ctx, arg)
	ret0, _ := ret[0].(db.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrganisation indicates an expected call of CreateOrganisation.
func (mr *MockQuerierMockRecorder) CreateOrganisation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganisation", reflect.TypeOf((*MockQuerier)(nil).CreateOrganisation), ctx, arg)
}

// CreatePayment mocks base method.
func (m *MockQuerier) CreatePayment(ctx context.Context, arg db.CreatePaymentParams) (db.InvoicePaymentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, arg)
	ret0, _ := ret[0].(db.InvoicePaymentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockQuerierMockRecorder) CreatePayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockQuerier)(nil).CreatePayment), ctx, arg)
}

// CreateProgressReport mocks base method.
func (m *MockQuerier) CreateProgressReport(ctx context.Context, arg db.CreateProgressReportParams) (db.ProgressReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProgressReport", ctx, arg)
	ret0, _ := ret[0].(db.ProgressReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProgressReport indicates an expected call of CreateProgressReport.
func (mr *MockQuerierMockRecorder) CreateProgressReport(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProgressReport", reflect.TypeOf((*MockQuerier)(nil).CreateProgressReport), ctx, arg)
}

// CreateRegistrationForm mocks base method.
func (m *MockQuerier) CreateRegistrationForm(ctx context.Context, arg db.CreateRegistrationFormParams) (db.RegistrationForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRegistrationForm", ctx, arg)
	ret0, _ := ret[0].(db.RegistrationForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationForm indicates an expected call of CreateRegistrationForm.
func (mr *MockQuerierMockRecorder) CreateRegistrationForm(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationForm", reflect.TypeOf((*MockQuerier)(nil).CreateRegistrationForm), ctx, arg)
}

// CreateRole mocks base method.
func (m *MockQuerier) CreateRole(ctx context.Context, name string) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, name)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockQuerierMockRecorder) CreateRole(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockQuerier)(nil).CreateRole), ctx, name)
}

// CreateSchedueledClientStatusChange mocks base method.
func (m *MockQuerier) CreateSchedueledClientStatusChange(ctx context.Context, arg db.CreateSchedueledClientStatusChangeParams) (db.ScheduledStatusChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedueledClientStatusChange", ctx, arg)
	ret0, _ := ret[0].(db.ScheduledStatusChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedueledClientStatusChange indicates an expected call of CreateSchedueledClientStatusChange.
func (mr *MockQuerierMockRecorder) CreateSchedueledClientStatusChange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedueledClientStatusChange", reflect.TypeOf((*MockQuerier)(nil).CreateSchedueledClientStatusChange), ctx, arg)
}

// CreateSchedule mocks base method.
func (m *MockQuerier) CreateSchedule(ctx context.Context, arg db.CreateScheduleParams) (db.CreateScheduleRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", ctx, arg)
	ret0, _ := ret[0].(db.CreateScheduleRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockQuerierMockRecorder) CreateSchedule(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockQuerier)(nil).CreateSchedule), ctx, arg)
}

// CreateSender mocks base method.
func (m *MockQuerier) CreateSender(ctx context.Context, arg db.CreateSenderParams) (db.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSender", ctx, arg)
	ret0, _ := ret[0].(db.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSender indicates an expected call of CreateSender.
func (mr *MockQuerierMockRecorder) CreateSender(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSender", reflect.TypeOf((*MockQuerier)(nil).CreateSender), ctx, arg)
}

// CreateSenderInvoiceTemplate mocks base method.
func (m *MockQuerier) CreateSenderInvoiceTemplate(ctx context.Context, arg db.CreateSenderInvoiceTemplateParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSenderInvoiceTemplate", ctx, arg)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSenderInvoiceTemplate indicates an expected call of CreateSenderInvoiceTemplate.
func (mr *MockQuerierMockRecorder) CreateSenderInvoiceTemplate(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSenderInvoiceTemplate", reflect.TypeOf((*MockQuerier)(nil).CreateSenderInvoiceTemplate), ctx, arg)
}

// CreateSession mocks base method.
func (m *MockQuerier) CreateSession(ctx context.Context, arg db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockQuerierMockRecorder) CreateSession(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockQuerier)(nil).CreateSession), ctx, arg)
}

// CreateShift mocks base method.
func (m *MockQuerier) CreateShift(ctx context.Context, arg db.CreateShiftParams) (db.LocationShift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShift", ctx, arg)
	ret0, _ := ret[0].(db.LocationShift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShift indicates an expected call of CreateShift.
func (mr *MockQuerierMockRecorder) CreateShift(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShift", reflect.TypeOf((*MockQuerier)(nil).CreateShift), ctx, arg)
}

// CreateTemp2FaSecret mocks base method.
func (m *MockQuerier) CreateTemp2FaSecret(ctx context.Context, arg db.CreateTemp2FaSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemp2FaSecret", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTemp2FaSecret indicates an expected call of CreateTemp2FaSecret.
func (mr *MockQuerierMockRecorder) CreateTemp2FaSecret(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemp2FaSecret", reflect.TypeOf((*MockQuerier)(nil).CreateTemp2FaSecret), ctx, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, arg db.CreateUserParams) (db.CustomUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, arg)
	ret0, _ := ret[0].(db.CustomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, arg)
}

// DeleteAppointment mocks base method.
func (m *MockQuerier) DeleteAppointment(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppointment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppointment indicates an expected call of DeleteAppointment.
func (mr *MockQuerierMockRecorder) DeleteAppointment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppointment", reflect.TypeOf((*MockQuerier)(nil).DeleteAppointment), ctx, id)
}

// DeleteAppointmentClients mocks base method.
func (m *MockQuerier) DeleteAppointmentClients(ctx context.Context, appointmentID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppointmentClients", ctx, appointmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppointmentClients indicates an expected call of DeleteAppointmentClients.
func (mr *MockQuerierMockRecorder) DeleteAppointmentClients(ctx, appointmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppointmentClients", reflect.TypeOf((*MockQuerier)(nil).DeleteAppointmentClients), ctx, appointmentID)
}

// DeleteAppointmentParticipants mocks base method.
func (m *MockQuerier) DeleteAppointmentParticipants(ctx context.Context, appointmentID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAppointmentParticipants", ctx, appointmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppointmentParticipants indicates an expected call of DeleteAppointmentParticipants.
func (mr *MockQuerierMockRecorder) DeleteAppointmentParticipants(ctx, appointmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppointmentParticipants", reflect.TypeOf((*MockQuerier)(nil).DeleteAppointmentParticipants), ctx, appointmentID)
}

// DeleteAssignedEmployee mocks base method.
func (m *MockQuerier) DeleteAssignedEmployee(ctx context.Context, id int64) (db.AssignedEmployee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssignedEmployee", ctx, id)
	ret0, _ := ret[0].(db.AssignedEmployee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAssignedEmployee indicates an expected call of DeleteAssignedEmployee.
func (mr *MockQuerierMockRecorder) DeleteAssignedEmployee(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssignedEmployee", reflect.TypeOf((*MockQuerier)(nil).DeleteAssignedEmployee), ctx, id)
}

// DeleteAttachment mocks base method.
func (m *MockQuerier) DeleteAttachment(ctx context.Context, argUuid uuid.UUID) (db.AttachmentFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachment", ctx, argUuid)
	ret0, _ := ret[0].(db.AttachmentFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttachment indicates an expected call of DeleteAttachment.
func (mr *MockQuerierMockRecorder) DeleteAttachment(ctx, argUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachment", reflect.TypeOf((*MockQuerier)(nil).DeleteAttachment), ctx, argUuid)
}

// DeleteCarePlan mocks base method.
func (m *MockQuerier) DeleteCarePlan(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlan", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlan indicates an expected call of DeleteCarePlan.
func (mr *MockQuerierMockRecorder) DeleteCarePlan(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlan", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlan), ctx, id)
}

// DeleteCarePlanAction mocks base method.
func (m *MockQuerier) DeleteCarePlanAction(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanAction", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanAction indicates an expected call of DeleteCarePlanAction.
func (mr *MockQuerierMockRecorder) DeleteCarePlanAction(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanAction", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanAction), ctx, id)
}

// DeleteCarePlanIntervention mocks base method.
func (m *MockQuerier) DeleteCarePlanIntervention(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanIntervention", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanIntervention indicates an expected call of DeleteCarePlanIntervention.
func (mr *MockQuerierMockRecorder) DeleteCarePlanIntervention(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanIntervention", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanIntervention), ctx, id)
}

// DeleteCarePlanObjective mocks base method.
func (m *MockQuerier) DeleteCarePlanObjective(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanObjective", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanObjective indicates an expected call of DeleteCarePlanObjective.
func (mr *MockQuerierMockRecorder) DeleteCarePlanObjective(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanObjective", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanObjective), ctx, id)
}

// DeleteCarePlanReport mocks base method.
func (m *MockQuerier) DeleteCarePlanReport(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanReport", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanReport indicates an expected call of DeleteCarePlanReport.
func (mr *MockQuerierMockRecorder) DeleteCarePlanReport(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanReport", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanReport), ctx, id)
}

// DeleteCarePlanResource mocks base method.
func (m *MockQuerier) DeleteCarePlanResource(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanResource", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanResource indicates an expected call of DeleteCarePlanResource.
func (mr *MockQuerierMockRecorder) DeleteCarePlanResource(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanResource", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanResource), ctx, id)
}

// DeleteCarePlanRisk mocks base method.
func (m *MockQuerier) DeleteCarePlanRisk(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanRisk", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanRisk indicates an expected call of DeleteCarePlanRisk.
func (mr *MockQuerierMockRecorder) DeleteCarePlanRisk(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanRisk", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanRisk), ctx, id)
}

// DeleteCarePlanSuccessMetric mocks base method.
func (m *MockQuerier) DeleteCarePlanSuccessMetric(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanSuccessMetric", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanSuccessMetric indicates an expected call of DeleteCarePlanSuccessMetric.
func (mr *MockQuerierMockRecorder) DeleteCarePlanSuccessMetric(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanSuccessMetric", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanSuccessMetric), ctx, id)
}

// DeleteCarePlanSupportNetwork mocks base method.
func (m *MockQuerier) DeleteCarePlanSupportNetwork(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCarePlanSupportNetwork", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCarePlanSupportNetwork indicates an expected call of DeleteCarePlanSupportNetwork.
func (mr *MockQuerierMockRecorder) DeleteCarePlanSupportNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCarePlanSupportNetwork", reflect.TypeOf((*MockQuerier)(nil).DeleteCarePlanSupportNetwork), ctx, id)
}

// DeleteClientDiagnosis mocks base method.
func (m *MockQuerier) DeleteClientDiagnosis(ctx context.Context, id int64) (db.ClientDiagnosis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientDiagnosis", ctx, id)
	ret0, _ := ret[0].(db.ClientDiagnosis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClientDiagnosis indicates an expected call of DeleteClientDiagnosis.
func (mr *MockQuerierMockRecorder) DeleteClientDiagnosis(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientDiagnosis", reflect.TypeOf((*MockQuerier)(nil).DeleteClientDiagnosis), ctx, id)
}

// DeleteClientDocument mocks base method.
func (m *MockQuerier) DeleteClientDocument(ctx context.Context, attachmentUuid *uuid.UUID) (db.ClientDocument, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientDocument", ctx, attachmentUuid)
	ret0, _ := ret[0].(db.ClientDocument)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteClientDocument indicates an expected call of DeleteClientDocument.
func (mr *MockQuerierMockRecorder) DeleteClientDocument(ctx, attachmentUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientDocument", reflect.TypeOf((*MockQuerier)(nil).DeleteClientDocument), ctx, attachmentUuid)
}

// DeleteClientMedication mocks base method.
func (m *MockQuerier) DeleteClientMedication(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClientMedication", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClientMedication indicates an expected call of DeleteClientMedication.
func (mr *MockQuerierMockRecorder) DeleteClientMedication(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClientMedication", reflect.TypeOf((*MockQuerier)(nil).DeleteClientMedication), ctx, id)
}

// DeleteContractType mocks base method.
func (m *MockQuerier) DeleteContractType(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContractType", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContractType indicates an expected call of DeleteContractType.
func (mr *MockQuerierMockRecorder) DeleteContractType(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContractType", reflect.TypeOf((*MockQuerier)(nil).DeleteContractType), ctx, id)
}

// DeleteEmergencyContact mocks base method.
func (m *MockQuerier) DeleteEmergencyContact(ctx context.Context, id int64) (db.ClientEmergencyContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmergencyContact", ctx, id)
	ret0, _ := ret[0].(db.ClientEmergencyContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmergencyContact indicates an expected call of DeleteEmergencyContact.
func (mr *MockQuerierMockRecorder) DeleteEmergencyContact(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmergencyContact", reflect.TypeOf((*MockQuerier)(nil).DeleteEmergencyContact), ctx, id)
}

// DeleteEmployeeCertification mocks base method.
func (m *MockQuerier) DeleteEmployeeCertification(ctx context.Context, id int64) (db.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployeeCertification", ctx, id)
	ret0, _ := ret[0].(db.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmployeeCertification indicates an expected call of DeleteEmployeeCertification.
func (mr *MockQuerierMockRecorder) DeleteEmployeeCertification(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployeeCertification", reflect.TypeOf((*MockQuerier)(nil).DeleteEmployeeCertification), ctx, id)
}

// DeleteEmployeeEducation mocks base method.
func (m *MockQuerier) DeleteEmployeeEducation(ctx context.Context, id int64) (db.EmployeeEducation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployeeEducation", ctx, id)
	ret0, _ := ret[0].(db.EmployeeEducation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmployeeEducation indicates an expected call of DeleteEmployeeEducation.
func (mr *MockQuerierMockRecorder) DeleteEmployeeEducation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployeeEducation", reflect.TypeOf((*MockQuerier)(nil).DeleteEmployeeEducation), ctx, id)
}

// DeleteEmployeeExperience mocks base method.
func (m *MockQuerier) DeleteEmployeeExperience(ctx context.Context, id int64) (db.EmployeeExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployeeExperience", ctx, id)
	ret0, _ := ret[0].(db.EmployeeExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmployeeExperience indicates an expected call of DeleteEmployeeExperience.
func (mr *MockQuerierMockRecorder) DeleteEmployeeExperience(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployeeExperience", reflect.TypeOf((*MockQuerier)(nil).DeleteEmployeeExperience), ctx, id)
}

// DeleteIncident mocks base method.
func (m *MockQuerier) DeleteIncident(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIncident", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIncident indicates an expected call of DeleteIncident.
func (mr *MockQuerierMockRecorder) DeleteIncident(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIncident", reflect.TypeOf((*MockQuerier)(nil).DeleteIncident), ctx, id)
}

// DeleteInvoice mocks base method.
func (m *MockQuerier) DeleteInvoice(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvoice", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvoice indicates an expected call of DeleteInvoice.
func (mr *MockQuerierMockRecorder) DeleteInvoice(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvoice", reflect.TypeOf((*MockQuerier)(nil).DeleteInvoice), ctx, id)
}

// DeleteLocation mocks base method.
func (m *MockQuerier) DeleteLocation(ctx context.Context, id int64) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLocation", ctx, id)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLocation indicates an expected call of DeleteLocation.
func (mr *MockQuerierMockRecorder) DeleteLocation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLocation", reflect.TypeOf((*MockQuerier)(nil).DeleteLocation), ctx, id)
}

// DeleteOrganisation mocks base method.
func (m *MockQuerier) DeleteOrganisation(ctx context.Context, id int64) (db.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganisation", ctx, id)
	ret0, _ := ret[0].(db.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOrganisation indicates an expected call of DeleteOrganisation.
func (mr *MockQuerierMockRecorder) DeleteOrganisation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganisation", reflect.TypeOf((*MockQuerier)(nil).DeleteOrganisation), ctx, id)
}

// DeletePayment mocks base method.
func (m *MockQuerier) DeletePayment(ctx context.Context, id int64) (db.InvoicePaymentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePayment", ctx, id)
	ret0, _ := ret[0].(db.InvoicePaymentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePayment indicates an expected call of DeletePayment.
func (mr *MockQuerierMockRecorder) DeletePayment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePayment", reflect.TypeOf((*MockQuerier)(nil).DeletePayment), ctx, id)
}

// DeleteProgressReport mocks base method.
func (m *MockQuerier) DeleteProgressReport(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProgressReport", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProgressReport indicates an expected call of DeleteProgressReport.
func (mr *MockQuerierMockRecorder) DeleteProgressReport(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProgressReport", reflect.TypeOf((*MockQuerier)(nil).DeleteProgressReport), ctx, id)
}

// DeleteRegistrationForm mocks base method.
func (m *MockQuerier) DeleteRegistrationForm(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRegistrationForm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRegistrationForm indicates an expected call of DeleteRegistrationForm.
func (mr *MockQuerierMockRecorder) DeleteRegistrationForm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationForm", reflect.TypeOf((*MockQuerier)(nil).DeleteRegistrationForm), ctx, id)
}

// DeleteSchedule mocks base method.
func (m *MockQuerier) DeleteSchedule(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockQuerierMockRecorder) DeleteSchedule(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockQuerier)(nil).DeleteSchedule), ctx, id)
}

// DeleteSender mocks base method.
func (m *MockQuerier) DeleteSender(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSender", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSender indicates an expected call of DeleteSender.
func (mr *MockQuerierMockRecorder) DeleteSender(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSender", reflect.TypeOf((*MockQuerier)(nil).DeleteSender), ctx, id)
}

// DeleteSession mocks base method.
func (m *MockQuerier) DeleteSession(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockQuerierMockRecorder) DeleteSession(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockQuerier)(nil).DeleteSession), ctx, id)
}

// DeleteShift mocks base method.
func (m *MockQuerier) DeleteShift(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShift", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShift indicates an expected call of DeleteShift.
func (mr *MockQuerierMockRecorder) DeleteShift(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShift", reflect.TypeOf((*MockQuerier)(nil).DeleteShift), ctx, id)
}

// DeleteUserPermissions mocks base method.
func (m *MockQuerier) DeleteUserPermissions(ctx context.Context, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserPermissions", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserPermissions indicates an expected call of DeleteUserPermissions.
func (mr *MockQuerierMockRecorder) DeleteUserPermissions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserPermissions", reflect.TypeOf((*MockQuerier)(nil).DeleteUserPermissions), ctx, userID)
}

// DischargeOverview mocks base method.
func (m *MockQuerier) DischargeOverview(ctx context.Context, arg db.DischargeOverviewParams) ([]db.DischargeOverviewRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DischargeOverview", ctx, arg)
	ret0, _ := ret[0].([]db.DischargeOverviewRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DischargeOverview indicates an expected call of DischargeOverview.
func (mr *MockQuerierMockRecorder) DischargeOverview(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DischargeOverview", reflect.TypeOf((*MockQuerier)(nil).DischargeOverview), ctx, arg)
}

// Enable2Fa mocks base method.
func (m *MockQuerier) Enable2Fa(ctx context.Context, arg db.Enable2FaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable2Fa", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable2Fa indicates an expected call of Enable2Fa.
func (mr *MockQuerierMockRecorder) Enable2Fa(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable2Fa", reflect.TypeOf((*MockQuerier)(nil).Enable2Fa), ctx, arg)
}

// GetAiGeneratedReport mocks base method.
func (m *MockQuerier) GetAiGeneratedReport(ctx context.Context, id int64) (db.AiGeneratedReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAiGeneratedReport", ctx, id)
	ret0, _ := ret[0].(db.AiGeneratedReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAiGeneratedReport indicates an expected call of GetAiGeneratedReport.
func (mr *MockQuerierMockRecorder) GetAiGeneratedReport(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAiGeneratedReport", reflect.TypeOf((*MockQuerier)(nil).GetAiGeneratedReport), ctx, id)
}

// GetAllAdminUsers mocks base method.
func (m *MockQuerier) GetAllAdminUsers(ctx context.Context) ([]db.CustomUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdminUsers", ctx)
	ret0, _ := ret[0].([]db.CustomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdminUsers indicates an expected call of GetAllAdminUsers.
func (mr *MockQuerierMockRecorder) GetAllAdminUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdminUsers", reflect.TypeOf((*MockQuerier)(nil).GetAllAdminUsers), ctx)
}

// GetAllTemplateItems mocks base method.
func (m *MockQuerier) GetAllTemplateItems(ctx context.Context) ([]db.TemplateItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTemplateItems", ctx)
	ret0, _ := ret[0].([]db.TemplateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTemplateItems indicates an expected call of GetAllTemplateItems.
func (mr *MockQuerierMockRecorder) GetAllTemplateItems(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTemplateItems", reflect.TypeOf((*MockQuerier)(nil).GetAllTemplateItems), ctx)
}

// GetAppointmentCard mocks base method.
func (m *MockQuerier) GetAppointmentCard(ctx context.Context, clientID int64) (db.GetAppointmentCardRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentCard", ctx, clientID)
	ret0, _ := ret[0].(db.GetAppointmentCardRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentCard indicates an expected call of GetAppointmentCard.
func (mr *MockQuerierMockRecorder) GetAppointmentCard(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentCard", reflect.TypeOf((*MockQuerier)(nil).GetAppointmentCard), ctx, clientID)
}

// GetAppointmentClients mocks base method.
func (m *MockQuerier) GetAppointmentClients(ctx context.Context, appointmentID uuid.UUID) ([]db.GetAppointmentClientsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentClients", ctx, appointmentID)
	ret0, _ := ret[0].([]db.GetAppointmentClientsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentClients indicates an expected call of GetAppointmentClients.
func (mr *MockQuerierMockRecorder) GetAppointmentClients(ctx, appointmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentClients", reflect.TypeOf((*MockQuerier)(nil).GetAppointmentClients), ctx, appointmentID)
}

// GetAppointmentParticipants mocks base method.
func (m *MockQuerier) GetAppointmentParticipants(ctx context.Context, appointmentID uuid.UUID) ([]db.GetAppointmentParticipantsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentParticipants", ctx, appointmentID)
	ret0, _ := ret[0].([]db.GetAppointmentParticipantsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentParticipants indicates an expected call of GetAppointmentParticipants.
func (mr *MockQuerierMockRecorder) GetAppointmentParticipants(ctx, appointmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentParticipants", reflect.TypeOf((*MockQuerier)(nil).GetAppointmentParticipants), ctx, appointmentID)
}

// GetAppointmentTemplate mocks base method.
func (m *MockQuerier) GetAppointmentTemplate(ctx context.Context, id uuid.UUID) (db.AppointmentTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppointmentTemplate", ctx, id)
	ret0, _ := ret[0].(db.AppointmentTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppointmentTemplate indicates an expected call of GetAppointmentTemplate.
func (mr *MockQuerierMockRecorder) GetAppointmentTemplate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppointmentTemplate", reflect.TypeOf((*MockQuerier)(nil).GetAppointmentTemplate), ctx, id)
}

// GetAssignedEmployee mocks base method.
func (m *MockQuerier) GetAssignedEmployee(ctx context.Context, id int64) (db.GetAssignedEmployeeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedEmployee", ctx, id)
	ret0, _ := ret[0].(db.GetAssignedEmployeeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedEmployee indicates an expected call of GetAssignedEmployee.
func (mr *MockQuerierMockRecorder) GetAssignedEmployee(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedEmployee", reflect.TypeOf((*MockQuerier)(nil).GetAssignedEmployee), ctx, id)
}

// GetAttachmentById mocks base method.
func (m *MockQuerier) GetAttachmentById(ctx context.Context, argUuid uuid.UUID) (db.AttachmentFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachmentById", ctx, argUuid)
	ret0, _ := ret[0].(db.AttachmentFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachmentById indicates an expected call of GetAttachmentById.
func (mr *MockQuerierMockRecorder) GetAttachmentById(ctx, argUuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachmentById", reflect.TypeOf((*MockQuerier)(nil).GetAttachmentById), ctx, argUuid)
}

// GetBillablePeriodsForContract mocks base method.
func (m *MockQuerier) GetBillablePeriodsForContract(ctx context.Context, arg db.GetBillablePeriodsForContractParams) ([]db.GetBillablePeriodsForContractRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillablePeriodsForContract", ctx, arg)
	ret0, _ := ret[0].([]db.GetBillablePeriodsForContractRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillablePeriodsForContract indicates an expected call of GetBillablePeriodsForContract.
func (mr *MockQuerierMockRecorder) GetBillablePeriodsForContract(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillablePeriodsForContract", reflect.TypeOf((*MockQuerier)(nil).GetBillablePeriodsForContract), ctx, arg)
}

// GetCarePlanActionsMaxSortOrder mocks base method.
func (m *MockQuerier) GetCarePlanActionsMaxSortOrder(ctx context.Context, objectiveID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanActionsMaxSortOrder", ctx, objectiveID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanActionsMaxSortOrder indicates an expected call of GetCarePlanActionsMaxSortOrder.
func (mr *MockQuerierMockRecorder) GetCarePlanActionsMaxSortOrder(ctx, objectiveID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanActionsMaxSortOrder", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanActionsMaxSortOrder), ctx, objectiveID)
}

// GetCarePlanInterventions mocks base method.
func (m *MockQuerier) GetCarePlanInterventions(ctx context.Context, carePlanID int64) ([]db.CarePlanIntervention, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanInterventions", ctx, carePlanID)
	ret0, _ := ret[0].([]db.CarePlanIntervention)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanInterventions indicates an expected call of GetCarePlanInterventions.
func (mr *MockQuerierMockRecorder) GetCarePlanInterventions(ctx, carePlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanInterventions", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanInterventions), ctx, carePlanID)
}

// GetCarePlanObjectivesWithActions mocks base method.
func (m *MockQuerier) GetCarePlanObjectivesWithActions(ctx context.Context, carePlanID int64) ([]db.GetCarePlanObjectivesWithActionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanObjectivesWithActions", ctx, carePlanID)
	ret0, _ := ret[0].([]db.GetCarePlanObjectivesWithActionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanObjectivesWithActions indicates an expected call of GetCarePlanObjectivesWithActions.
func (mr *MockQuerierMockRecorder) GetCarePlanObjectivesWithActions(ctx, carePlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanObjectivesWithActions", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanObjectivesWithActions), ctx, carePlanID)
}

// GetCarePlanOverview mocks base method.
func (m *MockQuerier) GetCarePlanOverview(ctx context.Context, id int64) (db.GetCarePlanOverviewRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanOverview", ctx, id)
	ret0, _ := ret[0].(db.GetCarePlanOverviewRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanOverview indicates an expected call of GetCarePlanOverview.
func (mr *MockQuerierMockRecorder) GetCarePlanOverview(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanOverview", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanOverview), ctx, id)
}

// GetCarePlanReport mocks base method.
func (m *MockQuerier) GetCarePlanReport(ctx context.Context, id int64) (db.GetCarePlanReportRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanReport", ctx, id)
	ret0, _ := ret[0].(db.GetCarePlanReportRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanReport indicates an expected call of GetCarePlanReport.
func (mr *MockQuerierMockRecorder) GetCarePlanReport(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanReport", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanReport), ctx, id)
}

// GetCarePlanResources mocks base method.
func (m *MockQuerier) GetCarePlanResources(ctx context.Context, carePlanID int64) ([]db.CarePlanResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanResources", ctx, carePlanID)
	ret0, _ := ret[0].([]db.CarePlanResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanResources indicates an expected call of GetCarePlanResources.
func (mr *MockQuerierMockRecorder) GetCarePlanResources(ctx, carePlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanResources", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanResources), ctx, carePlanID)
}

// GetCarePlanRisks mocks base method.
func (m *MockQuerier) GetCarePlanRisks(ctx context.Context, carePlanID int64) ([]db.CarePlanRisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanRisks", ctx, carePlanID)
	ret0, _ := ret[0].([]db.CarePlanRisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanRisks indicates an expected call of GetCarePlanRisks.
func (mr *MockQuerierMockRecorder) GetCarePlanRisks(ctx, carePlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanRisks", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanRisks), ctx, carePlanID)
}

// GetCarePlanSuccessMetrics mocks base method.
func (m *MockQuerier) GetCarePlanSuccessMetrics(ctx context.Context, carePlanID int64) ([]db.CarePlanMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanSuccessMetrics", ctx, carePlanID)
	ret0, _ := ret[0].([]db.CarePlanMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanSuccessMetrics indicates an expected call of GetCarePlanSuccessMetrics.
func (mr *MockQuerierMockRecorder) GetCarePlanSuccessMetrics(ctx, carePlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanSuccessMetrics", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanSuccessMetrics), ctx, carePlanID)
}

// GetCarePlanSupportNetwork mocks base method.
func (m *MockQuerier) GetCarePlanSupportNetwork(ctx context.Context, carePlanID int64) ([]db.CarePlanSupportNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarePlanSupportNetwork", ctx, carePlanID)
	ret0, _ := ret[0].([]db.CarePlanSupportNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarePlanSupportNetwork indicates an expected call of GetCarePlanSupportNetwork.
func (mr *MockQuerierMockRecorder) GetCarePlanSupportNetwork(ctx, carePlanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarePlanSupportNetwork", reflect.TypeOf((*MockQuerier)(nil).GetCarePlanSupportNetwork), ctx, carePlanID)
}

// GetClientAddresses mocks base method.
func (m *MockQuerier) GetClientAddresses(ctx context.Context, id int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientAddresses", ctx, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientAddresses indicates an expected call of GetClientAddresses.
func (mr *MockQuerierMockRecorder) GetClientAddresses(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientAddresses", reflect.TypeOf((*MockQuerier)(nil).GetClientAddresses), ctx, id)
}

// GetClientContract mocks base method.
func (m *MockQuerier) GetClientContract(ctx context.Context, id int64) (db.GetClientContractRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientContract", ctx, id)
	ret0, _ := ret[0].(db.GetClientContractRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientContract indicates an expected call of GetClientContract.
func (mr *MockQuerierMockRecorder) GetClientContract(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientContract", reflect.TypeOf((*MockQuerier)(nil).GetClientContract), ctx, id)
}

// GetClientCounts mocks base method.
func (m *MockQuerier) GetClientCounts(ctx context.Context) (db.GetClientCountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientCounts", ctx)
	ret0, _ := ret[0].(db.GetClientCountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientCounts indicates an expected call of GetClientCounts.
func (mr *MockQuerierMockRecorder) GetClientCounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientCounts", reflect.TypeOf((*MockQuerier)(nil).GetClientCounts), ctx)
}

// GetClientDetails mocks base method.
func (m *MockQuerier) GetClientDetails(ctx context.Context, id int64) (db.GetClientDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientDetails", ctx, id)
	ret0, _ := ret[0].(db.GetClientDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientDetails indicates an expected call of GetClientDetails.
func (mr *MockQuerierMockRecorder) GetClientDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientDetails", reflect.TypeOf((*MockQuerier)(nil).GetClientDetails), ctx, id)
}

// GetClientDiagnosis mocks base method.
func (m *MockQuerier) GetClientDiagnosis(ctx context.Context, id int64) (db.ClientDiagnosis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientDiagnosis", ctx, id)
	ret0, _ := ret[0].(db.ClientDiagnosis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientDiagnosis indicates an expected call of GetClientDiagnosis.
func (mr *MockQuerierMockRecorder) GetClientDiagnosis(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientDiagnosis", reflect.TypeOf((*MockQuerier)(nil).GetClientDiagnosis), ctx, id)
}

// GetClientMaturityMatrixAssessment mocks base method.
func (m *MockQuerier) GetClientMaturityMatrixAssessment(ctx context.Context, id int64) (db.GetClientMaturityMatrixAssessmentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientMaturityMatrixAssessment", ctx, id)
	ret0, _ := ret[0].(db.GetClientMaturityMatrixAssessmentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientMaturityMatrixAssessment indicates an expected call of GetClientMaturityMatrixAssessment.
func (mr *MockQuerierMockRecorder) GetClientMaturityMatrixAssessment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientMaturityMatrixAssessment", reflect.TypeOf((*MockQuerier)(nil).GetClientMaturityMatrixAssessment), ctx, id)
}

// GetClientRelatedEmails mocks base method.
func (m *MockQuerier) GetClientRelatedEmails(ctx context.Context, clientID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRelatedEmails", ctx, clientID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientRelatedEmails indicates an expected call of GetClientRelatedEmails.
func (mr *MockQuerierMockRecorder) GetClientRelatedEmails(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRelatedEmails", reflect.TypeOf((*MockQuerier)(nil).GetClientRelatedEmails), ctx, clientID)
}

// GetClientSender mocks base method.
func (m *MockQuerier) GetClientSender(ctx context.Context, id int64) (db.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientSender", ctx, id)
	ret0, _ := ret[0].(db.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientSender indicates an expected call of GetClientSender.
func (mr *MockQuerierMockRecorder) GetClientSender(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientSender", reflect.TypeOf((*MockQuerier)(nil).GetClientSender), ctx, id)
}

// GetContractAudit mocks base method.
func (m *MockQuerier) GetContractAudit(ctx context.Context, contractID int64) ([]db.GetContractAuditRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAudit", ctx, contractID)
	ret0, _ := ret[0].([]db.GetContractAuditRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractAudit indicates an expected call of GetContractAudit.
func (mr *MockQuerierMockRecorder) GetContractAudit(ctx, contractID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAudit", reflect.TypeOf((*MockQuerier)(nil).GetContractAudit), ctx, contractID)
}

// GetDailySchedulesByLocation mocks base method.
func (m *MockQuerier) GetDailySchedulesByLocation(ctx context.Context, arg db.GetDailySchedulesByLocationParams) ([]db.GetDailySchedulesByLocationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailySchedulesByLocation", ctx, arg)
	ret0, _ := ret[0].([]db.GetDailySchedulesByLocationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailySchedulesByLocation indicates an expected call of GetDailySchedulesByLocation.
func (mr *MockQuerierMockRecorder) GetDailySchedulesByLocation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailySchedulesByLocation", reflect.TypeOf((*MockQuerier)(nil).GetDailySchedulesByLocation), ctx, arg)
}

// GetEmergencyContact mocks base method.
func (m *MockQuerier) GetEmergencyContact(ctx context.Context, id int64) (db.ClientEmergencyContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmergencyContact", ctx, id)
	ret0, _ := ret[0].(db.ClientEmergencyContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmergencyContact indicates an expected call of GetEmergencyContact.
func (mr *MockQuerierMockRecorder) GetEmergencyContact(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmergencyContact", reflect.TypeOf((*MockQuerier)(nil).GetEmergencyContact), ctx, id)
}

// GetEmployeeContractDetails mocks base method.
func (m *MockQuerier) GetEmployeeContractDetails(ctx context.Context, id int64) (db.GetEmployeeContractDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeContractDetails", ctx, id)
	ret0, _ := ret[0].(db.GetEmployeeContractDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeContractDetails indicates an expected call of GetEmployeeContractDetails.
func (mr *MockQuerierMockRecorder) GetEmployeeContractDetails(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeContractDetails", reflect.TypeOf((*MockQuerier)(nil).GetEmployeeContractDetails), ctx, id)
}

// GetEmployeeCounts mocks base method.
func (m *MockQuerier) GetEmployeeCounts(ctx context.Context) (db.GetEmployeeCountsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeCounts", ctx)
	ret0, _ := ret[0].(db.GetEmployeeCountsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeCounts indicates an expected call of GetEmployeeCounts.
func (mr *MockQuerierMockRecorder) GetEmployeeCounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeCounts", reflect.TypeOf((*MockQuerier)(nil).GetEmployeeCounts), ctx)
}

// GetEmployeeProfileByID mocks base method.
func (m *MockQuerier) GetEmployeeProfileByID(ctx context.Context, id int64) (db.GetEmployeeProfileByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeProfileByID", ctx, id)
	ret0, _ := ret[0].(db.GetEmployeeProfileByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeProfileByID indicates an expected call of GetEmployeeProfileByID.
func (mr *MockQuerierMockRecorder) GetEmployeeProfileByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeProfileByID", reflect.TypeOf((*MockQuerier)(nil).GetEmployeeProfileByID), ctx, id)
}

// GetEmployeeProfileByUserID mocks base method.
func (m *MockQuerier) GetEmployeeProfileByUserID(ctx context.Context, id int64) (db.GetEmployeeProfileByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeProfileByUserID", ctx, id)
	ret0, _ := ret[0].(db.GetEmployeeProfileByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeProfileByUserID indicates an expected call of GetEmployeeProfileByUserID.
func (mr *MockQuerierMockRecorder) GetEmployeeProfileByUserID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeProfileByUserID", reflect.TypeOf((*MockQuerier)(nil).GetEmployeeProfileByUserID), ctx, id)
}

// GetEmployeeSchedules mocks base method.
func (m *MockQuerier) GetEmployeeSchedules(ctx context.Context, arg db.GetEmployeeSchedulesParams) ([]db.GetEmployeeSchedulesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeSchedules", ctx, arg)
	ret0, _ := ret[0].([]db.GetEmployeeSchedulesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeSchedules indicates an expected call of GetEmployeeSchedules.
func (mr *MockQuerierMockRecorder) GetEmployeeSchedules(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeSchedules", reflect.TypeOf((*MockQuerier)(nil).GetEmployeeSchedules), ctx, arg)
}

// GetIncident mocks base method.
func (m *MockQuerier) GetIncident(ctx context.Context, id int64) (db.GetIncidentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncident", ctx, id)
	ret0, _ := ret[0].(db.GetIncidentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncident indicates an expected call of GetIncident.
func (mr *MockQuerierMockRecorder) GetIncident(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncident", reflect.TypeOf((*MockQuerier)(nil).GetIncident), ctx, id)
}

// GetIntakeForm mocks base method.
func (m *MockQuerier) GetIntakeForm(ctx context.Context, id int64) (db.IntakeForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntakeForm", ctx, id)
	ret0, _ := ret[0].(db.IntakeForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIntakeForm indicates an expected call of GetIntakeForm.
func (mr *MockQuerierMockRecorder) GetIntakeForm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntakeForm", reflect.TypeOf((*MockQuerier)(nil).GetIntakeForm), ctx, id)
}

// GetInvoice mocks base method.
func (m *MockQuerier) GetInvoice(ctx context.Context, id int64) (db.GetInvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoice", ctx, id)
	ret0, _ := ret[0].(db.GetInvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoice indicates an expected call of GetInvoice.
func (mr *MockQuerierMockRecorder) GetInvoice(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoice", reflect.TypeOf((*MockQuerier)(nil).GetInvoice), ctx, id)
}

// GetInvoiceAuditLogs mocks base method.
func (m *MockQuerier) GetInvoiceAuditLogs(ctx context.Context, invoiceID int64) ([]db.GetInvoiceAuditLogsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoiceAuditLogs", ctx, invoiceID)
	ret0, _ := ret[0].([]db.GetInvoiceAuditLogsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoiceAuditLogs indicates an expected call of GetInvoiceAuditLogs.
func (mr *MockQuerierMockRecorder) GetInvoiceAuditLogs(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoiceAuditLogs", reflect.TypeOf((*MockQuerier)(nil).GetInvoiceAuditLogs), ctx, invoiceID)
}

// GetLevelDescription mocks base method.
func (m *MockQuerier) GetLevelDescription(ctx context.Context, arg db.GetLevelDescriptionParams) (db.GetLevelDescriptionRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevelDescription", ctx, arg)
	ret0, _ := ret[0].(db.GetLevelDescriptionRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLevelDescription indicates an expected call of GetLevelDescription.
func (mr *MockQuerierMockRecorder) GetLevelDescription(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevelDescription", reflect.TypeOf((*MockQuerier)(nil).GetLevelDescription), ctx, arg)
}

// GetLocation mocks base method.
func (m *MockQuerier) GetLocation(ctx context.Context, id int64) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", ctx, id)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockQuerierMockRecorder) GetLocation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockQuerier)(nil).GetLocation), ctx, id)
}

// GetMaturityMatrix mocks base method.
func (m *MockQuerier) GetMaturityMatrix(ctx context.Context, id int64) (db.MaturityMatrix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaturityMatrix", ctx, id)
	ret0, _ := ret[0].(db.MaturityMatrix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaturityMatrix indicates an expected call of GetMaturityMatrix.
func (mr *MockQuerierMockRecorder) GetMaturityMatrix(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaturityMatrix", reflect.TypeOf((*MockQuerier)(nil).GetMaturityMatrix), ctx, id)
}

// GetMaxInvoiceSequenceForDate mocks base method.
func (m *MockQuerier) GetMaxInvoiceSequenceForDate(ctx context.Context, date any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxInvoiceSequenceForDate", ctx, date)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxInvoiceSequenceForDate indicates an expected call of GetMaxInvoiceSequenceForDate.
func (mr *MockQuerierMockRecorder) GetMaxInvoiceSequenceForDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxInvoiceSequenceForDate", reflect.TypeOf((*MockQuerier)(nil).GetMaxInvoiceSequenceForDate), ctx, date)
}

// GetMedication mocks base method.
func (m *MockQuerier) GetMedication(ctx context.Context, id int64) (db.GetMedicationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMedication", ctx, id)
	ret0, _ := ret[0].(db.GetMedicationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMedication indicates an expected call of GetMedication.
func (mr *MockQuerierMockRecorder) GetMedication(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMedication", reflect.TypeOf((*MockQuerier)(nil).GetMedication), ctx, id)
}

// GetMissingClientDocuments mocks base method.
func (m *MockQuerier) GetMissingClientDocuments(ctx context.Context, clientID int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMissingClientDocuments", ctx, clientID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMissingClientDocuments indicates an expected call of GetMissingClientDocuments.
func (mr *MockQuerierMockRecorder) GetMissingClientDocuments(ctx, clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMissingClientDocuments", reflect.TypeOf((*MockQuerier)(nil).GetMissingClientDocuments), ctx, clientID)
}

// GetMonthlySchedulesByLocation mocks base method.
func (m *MockQuerier) GetMonthlySchedulesByLocation(ctx context.Context, arg db.GetMonthlySchedulesByLocationParams) ([]db.GetMonthlySchedulesByLocationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlySchedulesByLocation", ctx, arg)
	ret0, _ := ret[0].([]db.GetMonthlySchedulesByLocationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlySchedulesByLocation indicates an expected call of GetMonthlySchedulesByLocation.
func (mr *MockQuerierMockRecorder) GetMonthlySchedulesByLocation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlySchedulesByLocation", reflect.TypeOf((*MockQuerier)(nil).GetMonthlySchedulesByLocation), ctx, arg)
}

// GetOrganisation mocks base method.
func (m *MockQuerier) GetOrganisation(ctx context.Context, id int64) (db.GetOrganisationRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganisation", ctx, id)
	ret0, _ := ret[0].(db.GetOrganisationRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganisation indicates an expected call of GetOrganisation.
func (mr *MockQuerierMockRecorder) GetOrganisation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganisation", reflect.TypeOf((*MockQuerier)(nil).GetOrganisation), ctx, id)
}

// GetPayment mocks base method.
func (m *MockQuerier) GetPayment(ctx context.Context, id int64) (db.GetPaymentRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, id)
	ret0, _ := ret[0].(db.GetPaymentRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockQuerierMockRecorder) GetPayment(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockQuerier)(nil).GetPayment), ctx, id)
}

// GetPaymentWithInvoice mocks base method.
func (m *MockQuerier) GetPaymentWithInvoice(ctx context.Context, id int64) (db.GetPaymentWithInvoiceRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentWithInvoice", ctx, id)
	ret0, _ := ret[0].(db.GetPaymentWithInvoiceRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentWithInvoice indicates an expected call of GetPaymentWithInvoice.
func (mr *MockQuerierMockRecorder) GetPaymentWithInvoice(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentWithInvoice", reflect.TypeOf((*MockQuerier)(nil).GetPaymentWithInvoice), ctx, id)
}

// GetProgressReport mocks base method.
func (m *MockQuerier) GetProgressReport(ctx context.Context, id int64) (db.GetProgressReportRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressReport", ctx, id)
	ret0, _ := ret[0].(db.GetProgressReportRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressReport indicates an expected call of GetProgressReport.
func (mr *MockQuerierMockRecorder) GetProgressReport(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressReport", reflect.TypeOf((*MockQuerier)(nil).GetProgressReport), ctx, id)
}

// GetProgressReportsByDateRange mocks base method.
func (m *MockQuerier) GetProgressReportsByDateRange(ctx context.Context, arg db.GetProgressReportsByDateRangeParams) ([]db.ProgressReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressReportsByDateRange", ctx, arg)
	ret0, _ := ret[0].([]db.ProgressReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressReportsByDateRange indicates an expected call of GetProgressReportsByDateRange.
func (mr *MockQuerierMockRecorder) GetProgressReportsByDateRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressReportsByDateRange", reflect.TypeOf((*MockQuerier)(nil).GetProgressReportsByDateRange), ctx, arg)
}

// GetRegistrationForm mocks base method.
func (m *MockQuerier) GetRegistrationForm(ctx context.Context, id int64) (db.RegistrationForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegistrationForm", ctx, id)
	ret0, _ := ret[0].(db.RegistrationForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegistrationForm indicates an expected call of GetRegistrationForm.
func (mr *MockQuerierMockRecorder) GetRegistrationForm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegistrationForm", reflect.TypeOf((*MockQuerier)(nil).GetRegistrationForm), ctx, id)
}

// GetScheduleById mocks base method.
func (m *MockQuerier) GetScheduleById(ctx context.Context, id uuid.UUID) (db.GetScheduleByIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleById", ctx, id)
	ret0, _ := ret[0].(db.GetScheduleByIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleById indicates an expected call of GetScheduleById.
func (mr *MockQuerierMockRecorder) GetScheduleById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleById", reflect.TypeOf((*MockQuerier)(nil).GetScheduleById), ctx, id)
}

// GetScheduledAppointmentByID mocks base method.
func (m *MockQuerier) GetScheduledAppointmentByID(ctx context.Context, id uuid.UUID) (db.GetScheduledAppointmentByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledAppointmentByID", ctx, id)
	ret0, _ := ret[0].(db.GetScheduledAppointmentByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduledAppointmentByID indicates an expected call of GetScheduledAppointmentByID.
func (mr *MockQuerierMockRecorder) GetScheduledAppointmentByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledAppointmentByID", reflect.TypeOf((*MockQuerier)(nil).GetScheduledAppointmentByID), ctx, id)
}

// GetSenderById mocks base method.
func (m *MockQuerier) GetSenderById(ctx context.Context, id int64) (db.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderById", ctx, id)
	ret0, _ := ret[0].(db.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSenderById indicates an expected call of GetSenderById.
func (mr *MockQuerierMockRecorder) GetSenderById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderById", reflect.TypeOf((*MockQuerier)(nil).GetSenderById), ctx, id)
}

// GetSenderContracts mocks base method.
func (m *MockQuerier) GetSenderContracts(ctx context.Context, senderID *int64) ([]db.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderContracts", ctx, senderID)
	ret0, _ := ret[0].([]db.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSenderContracts indicates an expected call of GetSenderContracts.
func (mr *MockQuerierMockRecorder) GetSenderContracts(ctx, senderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderContracts", reflect.TypeOf((*MockQuerier)(nil).GetSenderContracts), ctx, senderID)
}

// GetSenderInvoiceTemplate mocks base method.
func (m *MockQuerier) GetSenderInvoiceTemplate(ctx context.Context, id int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSenderInvoiceTemplate", ctx, id)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSenderInvoiceTemplate indicates an expected call of GetSenderInvoiceTemplate.
func (mr *MockQuerierMockRecorder) GetSenderInvoiceTemplate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSenderInvoiceTemplate", reflect.TypeOf((*MockQuerier)(nil).GetSenderInvoiceTemplate), ctx, id)
}

// GetSessionByID mocks base method.
func (m *MockQuerier) GetSessionByID(ctx context.Context, id uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", ctx, id)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockQuerierMockRecorder) GetSessionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockQuerier)(nil).GetSessionByID), ctx, id)
}

// GetShiftByID mocks base method.
func (m *MockQuerier) GetShiftByID(ctx context.Context, id int64) (db.LocationShift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShiftByID", ctx, id)
	ret0, _ := ret[0].(db.LocationShift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShiftByID indicates an expected call of GetShiftByID.
func (mr *MockQuerierMockRecorder) GetShiftByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShiftByID", reflect.TypeOf((*MockQuerier)(nil).GetShiftByID), ctx, id)
}

// GetShiftsByLocationID mocks base method.
func (m *MockQuerier) GetShiftsByLocationID(ctx context.Context, locationID int64) ([]db.LocationShift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShiftsByLocationID", ctx, locationID)
	ret0, _ := ret[0].([]db.LocationShift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShiftsByLocationID indicates an expected call of GetShiftsByLocationID.
func (mr *MockQuerierMockRecorder) GetShiftsByLocationID(ctx, locationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShiftsByLocationID", reflect.TypeOf((*MockQuerier)(nil).GetShiftsByLocationID), ctx, locationID)
}

// GetTemp2FaSecret mocks base method.
func (m *MockQuerier) GetTemp2FaSecret(ctx context.Context, id int64) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemp2FaSecret", ctx, id)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemp2FaSecret indicates an expected call of GetTemp2FaSecret.
func (mr *MockQuerierMockRecorder) GetTemp2FaSecret(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemp2FaSecret", reflect.TypeOf((*MockQuerier)(nil).GetTemp2FaSecret), ctx, id)
}

// GetTemplateItemsByIds mocks base method.
func (m *MockQuerier) GetTemplateItemsByIds(ctx context.Context, dollar_1 []int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateItemsByIds", ctx, dollar_1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateItemsByIds indicates an expected call of GetTemplateItemsByIds.
func (mr *MockQuerierMockRecorder) GetTemplateItemsByIds(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateItemsByIds", reflect.TypeOf((*MockQuerier)(nil).GetTemplateItemsByIds), ctx, dollar_1)
}

// GetTemplateItemsBySourceTable mocks base method.
func (m *MockQuerier) GetTemplateItemsBySourceTable(ctx context.Context, dollar_1 []int64) ([]db.TemplateItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateItemsBySourceTable", ctx, dollar_1)
	ret0, _ := ret[0].([]db.TemplateItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplateItemsBySourceTable indicates an expected call of GetTemplateItemsBySourceTable.
func (mr *MockQuerierMockRecorder) GetTemplateItemsBySourceTable(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateItemsBySourceTable", reflect.TypeOf((*MockQuerier)(nil).GetTemplateItemsBySourceTable), ctx, dollar_1)
}

// GetTotalPaidAmountByInvoice mocks base method.
func (m *MockQuerier) GetTotalPaidAmountByInvoice(ctx context.Context, invoiceID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPaidAmountByInvoice", ctx, invoiceID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalPaidAmountByInvoice indicates an expected call of GetTotalPaidAmountByInvoice.
func (mr *MockQuerierMockRecorder) GetTotalPaidAmountByInvoice(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPaidAmountByInvoice", reflect.TypeOf((*MockQuerier)(nil).GetTotalPaidAmountByInvoice), ctx, invoiceID)
}

// GetUserByEmail mocks base method.
func (m *MockQuerier) GetUserByEmail(ctx context.Context, email string) (db.GetUserByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(db.GetUserByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockQuerierMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockQuerier)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockQuerier) GetUserByID(ctx context.Context, id int64) (db.GetUserByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(db.GetUserByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockQuerierMockRecorder) GetUserByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockQuerier)(nil).GetUserByID), ctx, id)
}

// GetUserIDByEmployeeID mocks base method.
func (m *MockQuerier) GetUserIDByEmployeeID(ctx context.Context, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByEmployeeID", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByEmployeeID indicates an expected call of GetUserIDByEmployeeID.
func (mr *MockQuerierMockRecorder) GetUserIDByEmployeeID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByEmployeeID", reflect.TypeOf((*MockQuerier)(nil).GetUserIDByEmployeeID), ctx, id)
}

// GetUserRoles mocks base method.
func (m *MockQuerier) GetUserRoles(ctx context.Context, userID int64) (db.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", ctx, userID)
	ret0, _ := ret[0].(db.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockQuerierMockRecorder) GetUserRoles(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockQuerier)(nil).GetUserRoles), ctx, userID)
}

// GrantRolePermissionsToUser mocks base method.
func (m *MockQuerier) GrantRolePermissionsToUser(ctx context.Context, arg db.GrantRolePermissionsToUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantRolePermissionsToUser", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantRolePermissionsToUser indicates an expected call of GrantRolePermissionsToUser.
func (mr *MockQuerierMockRecorder) GrantRolePermissionsToUser(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantRolePermissionsToUser", reflect.TypeOf((*MockQuerier)(nil).GrantRolePermissionsToUser), ctx, arg)
}

// GrantUserPermissions mocks base method.
func (m *MockQuerier) GrantUserPermissions(ctx context.Context, arg db.GrantUserPermissionsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantUserPermissions", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantUserPermissions indicates an expected call of GrantUserPermissions.
func (mr *MockQuerierMockRecorder) GrantUserPermissions(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantUserPermissions", reflect.TypeOf((*MockQuerier)(nil).GrantUserPermissions), ctx, arg)
}

// InsertIncoicePdfUrl mocks base method.
func (m *MockQuerier) InsertIncoicePdfUrl(ctx context.Context, arg db.InsertIncoicePdfUrlParams) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIncoicePdfUrl", ctx, arg)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIncoicePdfUrl indicates an expected call of InsertIncoicePdfUrl.
func (mr *MockQuerierMockRecorder) InsertIncoicePdfUrl(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIncoicePdfUrl", reflect.TypeOf((*MockQuerier)(nil).InsertIncoicePdfUrl), ctx, arg)
}

// ListAiGeneratedReports mocks base method.
func (m *MockQuerier) ListAiGeneratedReports(ctx context.Context, arg db.ListAiGeneratedReportsParams) ([]db.ListAiGeneratedReportsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAiGeneratedReports", ctx, arg)
	ret0, _ := ret[0].([]db.ListAiGeneratedReportsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAiGeneratedReports indicates an expected call of ListAiGeneratedReports.
func (mr *MockQuerierMockRecorder) ListAiGeneratedReports(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAiGeneratedReports", reflect.TypeOf((*MockQuerier)(nil).ListAiGeneratedReports), ctx, arg)
}

// ListAllIncidents mocks base method.
func (m *MockQuerier) ListAllIncidents(ctx context.Context, arg db.ListAllIncidentsParams) ([]db.ListAllIncidentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllIncidents", ctx, arg)
	ret0, _ := ret[0].([]db.ListAllIncidentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllIncidents indicates an expected call of ListAllIncidents.
func (mr *MockQuerierMockRecorder) ListAllIncidents(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllIncidents", reflect.TypeOf((*MockQuerier)(nil).ListAllIncidents), ctx, arg)
}

// ListAllLocations mocks base method.
func (m *MockQuerier) ListAllLocations(ctx context.Context) ([]db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllLocations", ctx)
	ret0, _ := ret[0].([]db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllLocations indicates an expected call of ListAllLocations.
func (mr *MockQuerierMockRecorder) ListAllLocations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllLocations", reflect.TypeOf((*MockQuerier)(nil).ListAllLocations), ctx)
}

// ListAllPermissions mocks base method.
func (m *MockQuerier) ListAllPermissions(ctx context.Context) ([]db.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllPermissions", ctx)
	ret0, _ := ret[0].([]db.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllPermissions indicates an expected call of ListAllPermissions.
func (mr *MockQuerierMockRecorder) ListAllPermissions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllPermissions", reflect.TypeOf((*MockQuerier)(nil).ListAllPermissions), ctx)
}

// ListAllRolePermissions mocks base method.
func (m *MockQuerier) ListAllRolePermissions(ctx context.Context, roleID int32) ([]db.ListAllRolePermissionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllRolePermissions", ctx, roleID)
	ret0, _ := ret[0].([]db.ListAllRolePermissionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllRolePermissions indicates an expected call of ListAllRolePermissions.
func (mr *MockQuerierMockRecorder) ListAllRolePermissions(ctx, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllRolePermissions", reflect.TypeOf((*MockQuerier)(nil).ListAllRolePermissions), ctx, roleID)
}

// ListAssignedEmployees mocks base method.
func (m *MockQuerier) ListAssignedEmployees(ctx context.Context, arg db.ListAssignedEmployeesParams) ([]db.ListAssignedEmployeesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAssignedEmployees", ctx, arg)
	ret0, _ := ret[0].([]db.ListAssignedEmployeesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAssignedEmployees indicates an expected call of ListAssignedEmployees.
func (mr *MockQuerierMockRecorder) ListAssignedEmployees(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAssignedEmployees", reflect.TypeOf((*MockQuerier)(nil).ListAssignedEmployees), ctx, arg)
}

// ListCarePlanReports mocks base method.
func (m *MockQuerier) ListCarePlanReports(ctx context.Context, arg db.ListCarePlanReportsParams) ([]db.ListCarePlanReportsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCarePlanReports", ctx, arg)
	ret0, _ := ret[0].([]db.ListCarePlanReportsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCarePlanReports indicates an expected call of ListCarePlanReports.
func (mr *MockQuerierMockRecorder) ListCarePlanReports(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCarePlanReports", reflect.TypeOf((*MockQuerier)(nil).ListCarePlanReports), ctx, arg)
}

// ListClientAppointmentsInRange mocks base method.
func (m *MockQuerier) ListClientAppointmentsInRange(ctx context.Context, arg db.ListClientAppointmentsInRangeParams) ([]db.ListClientAppointmentsInRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientAppointmentsInRange", ctx, arg)
	ret0, _ := ret[0].([]db.ListClientAppointmentsInRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientAppointmentsInRange indicates an expected call of ListClientAppointmentsInRange.
func (mr *MockQuerierMockRecorder) ListClientAppointmentsInRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientAppointmentsInRange", reflect.TypeOf((*MockQuerier)(nil).ListClientAppointmentsInRange), ctx, arg)
}

// ListClientAppointmentsStartingInRange mocks base method.
func (m *MockQuerier) ListClientAppointmentsStartingInRange(ctx context.Context, arg db.ListClientAppointmentsStartingInRangeParams) ([]db.ListClientAppointmentsStartingInRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientAppointmentsStartingInRange", ctx, arg)
	ret0, _ := ret[0].([]db.ListClientAppointmentsStartingInRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientAppointmentsStartingInRange indicates an expected call of ListClientAppointmentsStartingInRange.
func (mr *MockQuerierMockRecorder) ListClientAppointmentsStartingInRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientAppointmentsStartingInRange", reflect.TypeOf((*MockQuerier)(nil).ListClientAppointmentsStartingInRange), ctx, arg)
}

// ListClientContracts mocks base method.
func (m *MockQuerier) ListClientContracts(ctx context.Context, arg db.ListClientContractsParams) ([]db.ListClientContractsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientContracts", ctx, arg)
	ret0, _ := ret[0].([]db.ListClientContractsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientContracts indicates an expected call of ListClientContracts.
func (mr *MockQuerierMockRecorder) ListClientContracts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientContracts", reflect.TypeOf((*MockQuerier)(nil).ListClientContracts), ctx, arg)
}

// ListClientDetails mocks base method.
func (m *MockQuerier) ListClientDetails(ctx context.Context, arg db.ListClientDetailsParams) ([]db.ListClientDetailsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientDetails", ctx, arg)
	ret0, _ := ret[0].([]db.ListClientDetailsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientDetails indicates an expected call of ListClientDetails.
func (mr *MockQuerierMockRecorder) ListClientDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientDetails", reflect.TypeOf((*MockQuerier)(nil).ListClientDetails), ctx, arg)
}

// ListClientDiagnoses mocks base method.
func (m *MockQuerier) ListClientDiagnoses(ctx context.Context, arg db.ListClientDiagnosesParams) ([]db.ListClientDiagnosesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientDiagnoses", ctx, arg)
	ret0, _ := ret[0].([]db.ListClientDiagnosesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientDiagnoses indicates an expected call of ListClientDiagnoses.
func (mr *MockQuerierMockRecorder) ListClientDiagnoses(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientDiagnoses", reflect.TypeOf((*MockQuerier)(nil).ListClientDiagnoses), ctx, arg)
}

// ListClientDocuments mocks base method.
func (m *MockQuerier) ListClientDocuments(ctx context.Context, arg db.ListClientDocumentsParams) ([]db.ListClientDocumentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientDocuments", ctx, arg)
	ret0, _ := ret[0].([]db.ListClientDocumentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientDocuments indicates an expected call of ListClientDocuments.
func (mr *MockQuerierMockRecorder) ListClientDocuments(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientDocuments", reflect.TypeOf((*MockQuerier)(nil).ListClientDocuments), ctx, arg)
}

// ListClientMaturityMatrixAssessments mocks base method.
func (m *MockQuerier) ListClientMaturityMatrixAssessments(ctx context.Context, arg db.ListClientMaturityMatrixAssessmentsParams) ([]db.ListClientMaturityMatrixAssessmentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientMaturityMatrixAssessments", ctx, arg)
	ret0, _ := ret[0].([]db.ListClientMaturityMatrixAssessmentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientMaturityMatrixAssessments indicates an expected call of ListClientMaturityMatrixAssessments.
func (mr *MockQuerierMockRecorder) ListClientMaturityMatrixAssessments(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientMaturityMatrixAssessments", reflect.TypeOf((*MockQuerier)(nil).ListClientMaturityMatrixAssessments), ctx, arg)
}

// ListClientStatusHistory mocks base method.
func (m *MockQuerier) ListClientStatusHistory(ctx context.Context, arg db.ListClientStatusHistoryParams) ([]db.ClientStatusHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClientStatusHistory", ctx, arg)
	ret0, _ := ret[0].([]db.ClientStatusHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClientStatusHistory indicates an expected call of ListClientStatusHistory.
func (mr *MockQuerierMockRecorder) ListClientStatusHistory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClientStatusHistory", reflect.TypeOf((*MockQuerier)(nil).ListClientStatusHistory), ctx, arg)
}

// ListContractTypes mocks base method.
func (m *MockQuerier) ListContractTypes(ctx context.Context) ([]db.ContractType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContractTypes", ctx)
	ret0, _ := ret[0].([]db.ContractType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContractTypes indicates an expected call of ListContractTypes.
func (mr *MockQuerierMockRecorder) ListContractTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContractTypes", reflect.TypeOf((*MockQuerier)(nil).ListContractTypes), ctx)
}

// ListContracts mocks base method.
func (m *MockQuerier) ListContracts(ctx context.Context, arg db.ListContractsParams) ([]db.ListContractsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContracts", ctx, arg)
	ret0, _ := ret[0].([]db.ListContractsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContracts indicates an expected call of ListContracts.
func (mr *MockQuerierMockRecorder) ListContracts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContracts", reflect.TypeOf((*MockQuerier)(nil).ListContracts), ctx, arg)
}

// ListContractsTobeReminded mocks base method.
func (m *MockQuerier) ListContractsTobeReminded(ctx context.Context) ([]db.ListContractsTobeRemindedRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListContractsTobeReminded", ctx)
	ret0, _ := ret[0].([]db.ListContractsTobeRemindedRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListContractsTobeReminded indicates an expected call of ListContractsTobeReminded.
func (mr *MockQuerierMockRecorder) ListContractsTobeReminded(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListContractsTobeReminded", reflect.TypeOf((*MockQuerier)(nil).ListContractsTobeReminded), ctx)
}

// ListEducations mocks base method.
func (m *MockQuerier) ListEducations(ctx context.Context, employeeID int64) ([]db.EmployeeEducation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEducations", ctx, employeeID)
	ret0, _ := ret[0].([]db.EmployeeEducation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEducations indicates an expected call of ListEducations.
func (mr *MockQuerierMockRecorder) ListEducations(ctx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEducations", reflect.TypeOf((*MockQuerier)(nil).ListEducations), ctx, employeeID)
}

// ListEmergencyContacts mocks base method.
func (m *MockQuerier) ListEmergencyContacts(ctx context.Context, arg db.ListEmergencyContactsParams) ([]db.ListEmergencyContactsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmergencyContacts", ctx, arg)
	ret0, _ := ret[0].([]db.ListEmergencyContactsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmergencyContacts indicates an expected call of ListEmergencyContacts.
func (mr *MockQuerierMockRecorder) ListEmergencyContacts(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmergencyContacts", reflect.TypeOf((*MockQuerier)(nil).ListEmergencyContacts), ctx, arg)
}

// ListEmployeeAppointmentsInRange mocks base method.
func (m *MockQuerier) ListEmployeeAppointmentsInRange(ctx context.Context, arg db.ListEmployeeAppointmentsInRangeParams) ([]db.ListEmployeeAppointmentsInRangeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeeAppointmentsInRange", ctx, arg)
	ret0, _ := ret[0].([]db.ListEmployeeAppointmentsInRangeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeeAppointmentsInRange indicates an expected call of ListEmployeeAppointmentsInRange.
func (mr *MockQuerierMockRecorder) ListEmployeeAppointmentsInRange(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeeAppointmentsInRange", reflect.TypeOf((*MockQuerier)(nil).ListEmployeeAppointmentsInRange), ctx, arg)
}

// ListEmployeeCertifications mocks base method.
func (m *MockQuerier) ListEmployeeCertifications(ctx context.Context, employeeID int64) ([]db.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeeCertifications", ctx, employeeID)
	ret0, _ := ret[0].([]db.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeeCertifications indicates an expected call of ListEmployeeCertifications.
func (mr *MockQuerierMockRecorder) ListEmployeeCertifications(ctx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeeCertifications", reflect.TypeOf((*MockQuerier)(nil).ListEmployeeCertifications), ctx, employeeID)
}

// ListEmployeeExperience mocks base method.
func (m *MockQuerier) ListEmployeeExperience(ctx context.Context, employeeID int64) ([]db.EmployeeExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeeExperience", ctx, employeeID)
	ret0, _ := ret[0].([]db.EmployeeExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeeExperience indicates an expected call of ListEmployeeExperience.
func (mr *MockQuerierMockRecorder) ListEmployeeExperience(ctx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeeExperience", reflect.TypeOf((*MockQuerier)(nil).ListEmployeeExperience), ctx, employeeID)
}

// ListEmployeeProfile mocks base method.
func (m *MockQuerier) ListEmployeeProfile(ctx context.Context, arg db.ListEmployeeProfileParams) ([]db.ListEmployeeProfileRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeeProfile", ctx, arg)
	ret0, _ := ret[0].([]db.ListEmployeeProfileRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeeProfile indicates an expected call of ListEmployeeProfile.
func (mr *MockQuerierMockRecorder) ListEmployeeProfile(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeeProfile", reflect.TypeOf((*MockQuerier)(nil).ListEmployeeProfile), ctx, arg)
}

// ListEmployeesByContractEndDate mocks base method.
func (m *MockQuerier) ListEmployeesByContractEndDate(ctx context.Context) ([]db.ListEmployeesByContractEndDateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEmployeesByContractEndDate", ctx)
	ret0, _ := ret[0].([]db.ListEmployeesByContractEndDateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEmployeesByContractEndDate indicates an expected call of ListEmployeesByContractEndDate.
func (mr *MockQuerierMockRecorder) ListEmployeesByContractEndDate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEmployeesByContractEndDate", reflect.TypeOf((*MockQuerier)(nil).ListEmployeesByContractEndDate), ctx)
}

// ListIncidents mocks base method.
func (m *MockQuerier) ListIncidents(ctx context.Context, arg db.ListIncidentsParams) ([]db.ListIncidentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIncidents", ctx, arg)
	ret0, _ := ret[0].([]db.ListIncidentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIncidents indicates an expected call of ListIncidents.
func (mr *MockQuerierMockRecorder) ListIncidents(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIncidents", reflect.TypeOf((*MockQuerier)(nil).ListIncidents), ctx, arg)
}

// ListIntakeForms mocks base method.
func (m *MockQuerier) ListIntakeForms(ctx context.Context, arg db.ListIntakeFormsParams) ([]db.ListIntakeFormsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIntakeForms", ctx, arg)
	ret0, _ := ret[0].([]db.ListIntakeFormsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIntakeForms indicates an expected call of ListIntakeForms.
func (mr *MockQuerierMockRecorder) ListIntakeForms(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIntakeForms", reflect.TypeOf((*MockQuerier)(nil).ListIntakeForms), ctx, arg)
}

// ListInvoices mocks base method.
func (m *MockQuerier) ListInvoices(ctx context.Context, arg db.ListInvoicesParams) ([]db.ListInvoicesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInvoices", ctx, arg)
	ret0, _ := ret[0].([]db.ListInvoicesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInvoices indicates an expected call of ListInvoices.
func (mr *MockQuerierMockRecorder) ListInvoices(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInvoices", reflect.TypeOf((*MockQuerier)(nil).ListInvoices), ctx, arg)
}

// ListLatestPayments mocks base method.
func (m *MockQuerier) ListLatestPayments(ctx context.Context) ([]db.ListLatestPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLatestPayments", ctx)
	ret0, _ := ret[0].([]db.ListLatestPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLatestPayments indicates an expected call of ListLatestPayments.
func (mr *MockQuerierMockRecorder) ListLatestPayments(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatestPayments", reflect.TypeOf((*MockQuerier)(nil).ListLatestPayments), ctx)
}

// ListLocations mocks base method.
func (m *MockQuerier) ListLocations(ctx context.Context, organisationID int64) ([]db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", ctx, organisationID)
	ret0, _ := ret[0].([]db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockQuerierMockRecorder) ListLocations(ctx, organisationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockQuerier)(nil).ListLocations), ctx, organisationID)
}

// ListMaturityMatrix mocks base method.
func (m *MockQuerier) ListMaturityMatrix(ctx context.Context) ([]db.MaturityMatrix, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMaturityMatrix", ctx)
	ret0, _ := ret[0].([]db.MaturityMatrix)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMaturityMatrix indicates an expected call of ListMaturityMatrix.
func (mr *MockQuerierMockRecorder) ListMaturityMatrix(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMaturityMatrix", reflect.TypeOf((*MockQuerier)(nil).ListMaturityMatrix), ctx)
}

// ListMedicationsByDiagnosisID mocks base method.
func (m *MockQuerier) ListMedicationsByDiagnosisID(ctx context.Context, arg db.ListMedicationsByDiagnosisIDParams) ([]db.ListMedicationsByDiagnosisIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMedicationsByDiagnosisID", ctx, arg)
	ret0, _ := ret[0].([]db.ListMedicationsByDiagnosisIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMedicationsByDiagnosisID indicates an expected call of ListMedicationsByDiagnosisID.
func (mr *MockQuerierMockRecorder) ListMedicationsByDiagnosisID(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMedicationsByDiagnosisID", reflect.TypeOf((*MockQuerier)(nil).ListMedicationsByDiagnosisID), ctx, arg)
}

// ListMedicationsByDiagnosisIDs mocks base method.
func (m *MockQuerier) ListMedicationsByDiagnosisIDs(ctx context.Context, dollar_1 []int64) ([]db.ClientMedication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMedicationsByDiagnosisIDs", ctx, dollar_1)
	ret0, _ := ret[0].([]db.ClientMedication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMedicationsByDiagnosisIDs indicates an expected call of ListMedicationsByDiagnosisIDs.
func (mr *MockQuerierMockRecorder) ListMedicationsByDiagnosisIDs(ctx, dollar_1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMedicationsByDiagnosisIDs", reflect.TypeOf((*MockQuerier)(nil).ListMedicationsByDiagnosisIDs), ctx, dollar_1)
}

// ListNotifications mocks base method.
func (m *MockQuerier) ListNotifications(ctx context.Context, arg db.ListNotificationsParams) ([]db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotifications", ctx, arg)
	ret0, _ := ret[0].([]db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotifications indicates an expected call of ListNotifications.
func (mr *MockQuerierMockRecorder) ListNotifications(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotifications", reflect.TypeOf((*MockQuerier)(nil).ListNotifications), ctx, arg)
}

// ListOrganisations mocks base method.
func (m *MockQuerier) ListOrganisations(ctx context.Context) ([]db.ListOrganisationsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganisations", ctx)
	ret0, _ := ret[0].([]db.ListOrganisationsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrganisations indicates an expected call of ListOrganisations.
func (mr *MockQuerierMockRecorder) ListOrganisations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganisations", reflect.TypeOf((*MockQuerier)(nil).ListOrganisations), ctx)
}

// ListPayments mocks base method.
func (m *MockQuerier) ListPayments(ctx context.Context, invoiceID int64) ([]db.ListPaymentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPayments", ctx, invoiceID)
	ret0, _ := ret[0].([]db.ListPaymentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPayments indicates an expected call of ListPayments.
func (mr *MockQuerierMockRecorder) ListPayments(ctx, invoiceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPayments", reflect.TypeOf((*MockQuerier)(nil).ListPayments), ctx, invoiceID)
}

// ListProgressReports mocks base method.
func (m *MockQuerier) ListProgressReports(ctx context.Context, arg db.ListProgressReportsParams) ([]db.ListProgressReportsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProgressReports", ctx, arg)
	ret0, _ := ret[0].([]db.ListProgressReportsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProgressReports indicates an expected call of ListProgressReports.
func (mr *MockQuerierMockRecorder) ListProgressReports(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProgressReports", reflect.TypeOf((*MockQuerier)(nil).ListProgressReports), ctx, arg)
}

// ListRegistrationForms mocks base method.
func (m *MockQuerier) ListRegistrationForms(ctx context.Context, arg db.ListRegistrationFormsParams) ([]db.RegistrationForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRegistrationForms", ctx, arg)
	ret0, _ := ret[0].([]db.RegistrationForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistrationForms indicates an expected call of ListRegistrationForms.
func (mr *MockQuerierMockRecorder) ListRegistrationForms(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationForms", reflect.TypeOf((*MockQuerier)(nil).ListRegistrationForms), ctx, arg)
}

// ListRoles mocks base method.
func (m *MockQuerier) ListRoles(ctx context.Context) ([]db.ListRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoles", ctx)
	ret0, _ := ret[0].([]db.ListRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoles indicates an expected call of ListRoles.
func (mr *MockQuerierMockRecorder) ListRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoles", reflect.TypeOf((*MockQuerier)(nil).ListRoles), ctx)
}

// ListSenders mocks base method.
func (m *MockQuerier) ListSenders(ctx context.Context, arg db.ListSendersParams) ([]db.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSenders", ctx, arg)
	ret0, _ := ret[0].([]db.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSenders indicates an expected call of ListSenders.
func (mr *MockQuerierMockRecorder) ListSenders(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSenders", reflect.TypeOf((*MockQuerier)(nil).ListSenders), ctx, arg)
}

// ListUpcomingAppointments mocks base method.
func (m *MockQuerier) ListUpcomingAppointments(ctx context.Context, creatorEmployeeID *int64) ([]db.ListUpcomingAppointmentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUpcomingAppointments", ctx, creatorEmployeeID)
	ret0, _ := ret[0].([]db.ListUpcomingAppointmentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUpcomingAppointments indicates an expected call of ListUpcomingAppointments.
func (mr *MockQuerierMockRecorder) ListUpcomingAppointments(ctx, creatorEmployeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUpcomingAppointments", reflect.TypeOf((*MockQuerier)(nil).ListUpcomingAppointments), ctx, creatorEmployeeID)
}

// ListUserPermissions mocks base method.
func (m *MockQuerier) ListUserPermissions(ctx context.Context, userID int64) ([]db.ListUserPermissionsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserPermissions", ctx, userID)
	ret0, _ := ret[0].([]db.ListUserPermissionsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserPermissions indicates an expected call of ListUserPermissions.
func (mr *MockQuerierMockRecorder) ListUserPermissions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserPermissions", reflect.TypeOf((*MockQuerier)(nil).ListUserPermissions), ctx, userID)
}

// MarkNotificationAsRead mocks base method.
func (m *MockQuerier) MarkNotificationAsRead(ctx context.Context, id uuid.UUID) (db.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkNotificationAsRead", ctx, id)
	ret0, _ := ret[0].(db.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkNotificationAsRead indicates an expected call of MarkNotificationAsRead.
func (mr *MockQuerierMockRecorder) MarkNotificationAsRead(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkNotificationAsRead", reflect.TypeOf((*MockQuerier)(nil).MarkNotificationAsRead), ctx, id)
}

// MoveToWaitingList mocks base method.
func (m *MockQuerier) MoveToWaitingList(ctx context.Context, id int64) (db.IntakeForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveToWaitingList", ctx, id)
	ret0, _ := ret[0].(db.IntakeForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveToWaitingList indicates an expected call of MoveToWaitingList.
func (mr *MockQuerierMockRecorder) MoveToWaitingList(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveToWaitingList", reflect.TypeOf((*MockQuerier)(nil).MoveToWaitingList), ctx, id)
}

// RecentIncidents mocks base method.
func (m *MockQuerier) RecentIncidents(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecentIncidents", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecentIncidents indicates an expected call of RecentIncidents.
func (mr *MockQuerierMockRecorder) RecentIncidents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecentIncidents", reflect.TypeOf((*MockQuerier)(nil).RecentIncidents), ctx)
}

// RemovePermissionsFromRole mocks base method.
func (m *MockQuerier) RemovePermissionsFromRole(ctx context.Context, roleID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePermissionsFromRole", ctx, roleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePermissionsFromRole indicates an expected call of RemovePermissionsFromRole.
func (mr *MockQuerierMockRecorder) RemovePermissionsFromRole(ctx, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePermissionsFromRole", reflect.TypeOf((*MockQuerier)(nil).RemovePermissionsFromRole), ctx, roleID)
}

// SearchEmployeesByNameOrEmail mocks base method.
func (m *MockQuerier) SearchEmployeesByNameOrEmail(ctx context.Context, search *string) ([]db.SearchEmployeesByNameOrEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEmployeesByNameOrEmail", ctx, search)
	ret0, _ := ret[0].([]db.SearchEmployeesByNameOrEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEmployeesByNameOrEmail indicates an expected call of SearchEmployeesByNameOrEmail.
func (mr *MockQuerierMockRecorder) SearchEmployeesByNameOrEmail(ctx, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEmployeesByNameOrEmail", reflect.TypeOf((*MockQuerier)(nil).SearchEmployeesByNameOrEmail), ctx, search)
}

// SetAttachmentAsUsedorUnused mocks base method.
func (m *MockQuerier) SetAttachmentAsUsedorUnused(ctx context.Context, arg db.SetAttachmentAsUsedorUnusedParams) (db.AttachmentFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAttachmentAsUsedorUnused", ctx, arg)
	ret0, _ := ret[0].(db.AttachmentFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAttachmentAsUsedorUnused indicates an expected call of SetAttachmentAsUsedorUnused.
func (mr *MockQuerierMockRecorder) SetAttachmentAsUsedorUnused(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAttachmentAsUsedorUnused", reflect.TypeOf((*MockQuerier)(nil).SetAttachmentAsUsedorUnused), ctx, arg)
}

// SetClientProfilePicture mocks base method.
func (m *MockQuerier) SetClientProfilePicture(ctx context.Context, arg db.SetClientProfilePictureParams) (db.ClientDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientProfilePicture", ctx, arg)
	ret0, _ := ret[0].(db.ClientDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetClientProfilePicture indicates an expected call of SetClientProfilePicture.
func (mr *MockQuerierMockRecorder) SetClientProfilePicture(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientProfilePicture", reflect.TypeOf((*MockQuerier)(nil).SetClientProfilePicture), ctx, arg)
}

// SetEmployeeProfilePicture mocks base method.
func (m *MockQuerier) SetEmployeeProfilePicture(ctx context.Context, arg db.SetEmployeeProfilePictureParams) (db.CustomUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEmployeeProfilePicture", ctx, arg)
	ret0, _ := ret[0].(db.CustomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEmployeeProfilePicture indicates an expected call of SetEmployeeProfilePicture.
func (mr *MockQuerierMockRecorder) SetEmployeeProfilePicture(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEmployeeProfilePicture", reflect.TypeOf((*MockQuerier)(nil).SetEmployeeProfilePicture), ctx, arg)
}

// StatusChangeCount mocks base method.
func (m *MockQuerier) StatusChangeCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusChangeCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatusChangeCount indicates an expected call of StatusChangeCount.
func (mr *MockQuerierMockRecorder) StatusChangeCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusChangeCount", reflect.TypeOf((*MockQuerier)(nil).StatusChangeCount), ctx)
}

// TotalActiveClients mocks base method.
func (m *MockQuerier) TotalActiveClients(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalActiveClients", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalActiveClients indicates an expected call of TotalActiveClients.
func (mr *MockQuerierMockRecorder) TotalActiveClients(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalActiveClients", reflect.TypeOf((*MockQuerier)(nil).TotalActiveClients), ctx)
}

// TotalDischargeCount mocks base method.
func (m *MockQuerier) TotalDischargeCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalDischargeCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalDischargeCount indicates an expected call of TotalDischargeCount.
func (mr *MockQuerierMockRecorder) TotalDischargeCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalDischargeCount", reflect.TypeOf((*MockQuerier)(nil).TotalDischargeCount), ctx)
}

// UpdateAppointment mocks base method.
func (m *MockQuerier) UpdateAppointment(ctx context.Context, arg db.UpdateAppointmentParams) (db.ScheduledAppointment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppointment", ctx, arg)
	ret0, _ := ret[0].(db.ScheduledAppointment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppointment indicates an expected call of UpdateAppointment.
func (mr *MockQuerierMockRecorder) UpdateAppointment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppointment", reflect.TypeOf((*MockQuerier)(nil).UpdateAppointment), ctx, arg)
}

// UpdateAppointmentCard mocks base method.
func (m *MockQuerier) UpdateAppointmentCard(ctx context.Context, arg db.UpdateAppointmentCardParams) (db.AppointmentCard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppointmentCard", ctx, arg)
	ret0, _ := ret[0].(db.AppointmentCard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppointmentCard indicates an expected call of UpdateAppointmentCard.
func (mr *MockQuerierMockRecorder) UpdateAppointmentCard(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppointmentCard", reflect.TypeOf((*MockQuerier)(nil).UpdateAppointmentCard), ctx, arg)
}

// UpdateAppointmentCardUrl mocks base method.
func (m *MockQuerier) UpdateAppointmentCardUrl(ctx context.Context, arg db.UpdateAppointmentCardUrlParams) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAppointmentCardUrl", ctx, arg)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAppointmentCardUrl indicates an expected call of UpdateAppointmentCardUrl.
func (mr *MockQuerierMockRecorder) UpdateAppointmentCardUrl(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppointmentCardUrl", reflect.TypeOf((*MockQuerier)(nil).UpdateAppointmentCardUrl), ctx, arg)
}

// UpdateAssignedEmployee mocks base method.
func (m *MockQuerier) UpdateAssignedEmployee(ctx context.Context, arg db.UpdateAssignedEmployeeParams) (db.AssignedEmployee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssignedEmployee", ctx, arg)
	ret0, _ := ret[0].(db.AssignedEmployee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssignedEmployee indicates an expected call of UpdateAssignedEmployee.
func (mr *MockQuerierMockRecorder) UpdateAssignedEmployee(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssignedEmployee", reflect.TypeOf((*MockQuerier)(nil).UpdateAssignedEmployee), ctx, arg)
}

// UpdateCarePlanAction mocks base method.
func (m *MockQuerier) UpdateCarePlanAction(ctx context.Context, arg db.UpdateCarePlanActionParams) (db.CarePlanAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanAction", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanAction indicates an expected call of UpdateCarePlanAction.
func (mr *MockQuerierMockRecorder) UpdateCarePlanAction(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanAction", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanAction), ctx, arg)
}

// UpdateCarePlanIntervention mocks base method.
func (m *MockQuerier) UpdateCarePlanIntervention(ctx context.Context, arg db.UpdateCarePlanInterventionParams) (db.CarePlanIntervention, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanIntervention", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanIntervention)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanIntervention indicates an expected call of UpdateCarePlanIntervention.
func (mr *MockQuerierMockRecorder) UpdateCarePlanIntervention(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanIntervention", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanIntervention), ctx, arg)
}

// UpdateCarePlanObjective mocks base method.
func (m *MockQuerier) UpdateCarePlanObjective(ctx context.Context, arg db.UpdateCarePlanObjectiveParams) (db.CarePlanObjective, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanObjective", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanObjective)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanObjective indicates an expected call of UpdateCarePlanObjective.
func (mr *MockQuerierMockRecorder) UpdateCarePlanObjective(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanObjective", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanObjective), ctx, arg)
}

// UpdateCarePlanOverview mocks base method.
func (m *MockQuerier) UpdateCarePlanOverview(ctx context.Context, arg db.UpdateCarePlanOverviewParams) (db.CarePlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanOverview", ctx, arg)
	ret0, _ := ret[0].(db.CarePlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanOverview indicates an expected call of UpdateCarePlanOverview.
func (mr *MockQuerierMockRecorder) UpdateCarePlanOverview(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanOverview", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanOverview), ctx, arg)
}

// UpdateCarePlanReport mocks base method.
func (m *MockQuerier) UpdateCarePlanReport(ctx context.Context, arg db.UpdateCarePlanReportParams) (db.CarePlanReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanReport", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanReport indicates an expected call of UpdateCarePlanReport.
func (mr *MockQuerierMockRecorder) UpdateCarePlanReport(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanReport", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanReport), ctx, arg)
}

// UpdateCarePlanResource mocks base method.
func (m *MockQuerier) UpdateCarePlanResource(ctx context.Context, arg db.UpdateCarePlanResourceParams) (db.CarePlanResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanResource", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanResource indicates an expected call of UpdateCarePlanResource.
func (mr *MockQuerierMockRecorder) UpdateCarePlanResource(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanResource", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanResource), ctx, arg)
}

// UpdateCarePlanRisk mocks base method.
func (m *MockQuerier) UpdateCarePlanRisk(ctx context.Context, arg db.UpdateCarePlanRiskParams) (db.CarePlanRisk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanRisk", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanRisk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanRisk indicates an expected call of UpdateCarePlanRisk.
func (mr *MockQuerierMockRecorder) UpdateCarePlanRisk(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanRisk", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanRisk), ctx, arg)
}

// UpdateCarePlanSuccessMetric mocks base method.
func (m *MockQuerier) UpdateCarePlanSuccessMetric(ctx context.Context, arg db.UpdateCarePlanSuccessMetricParams) (db.CarePlanMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanSuccessMetric", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanMetric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanSuccessMetric indicates an expected call of UpdateCarePlanSuccessMetric.
func (mr *MockQuerierMockRecorder) UpdateCarePlanSuccessMetric(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanSuccessMetric", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanSuccessMetric), ctx, arg)
}

// UpdateCarePlanSupportNetwork mocks base method.
func (m *MockQuerier) UpdateCarePlanSupportNetwork(ctx context.Context, arg db.UpdateCarePlanSupportNetworkParams) (db.CarePlanSupportNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCarePlanSupportNetwork", ctx, arg)
	ret0, _ := ret[0].(db.CarePlanSupportNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCarePlanSupportNetwork indicates an expected call of UpdateCarePlanSupportNetwork.
func (mr *MockQuerierMockRecorder) UpdateCarePlanSupportNetwork(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCarePlanSupportNetwork", reflect.TypeOf((*MockQuerier)(nil).UpdateCarePlanSupportNetwork), ctx, arg)
}

// UpdateClientDetails mocks base method.
func (m *MockQuerier) UpdateClientDetails(ctx context.Context, arg db.UpdateClientDetailsParams) (db.ClientDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientDetails", ctx, arg)
	ret0, _ := ret[0].(db.ClientDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientDetails indicates an expected call of UpdateClientDetails.
func (mr *MockQuerierMockRecorder) UpdateClientDetails(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientDetails", reflect.TypeOf((*MockQuerier)(nil).UpdateClientDetails), ctx, arg)
}

// UpdateClientDiagnosis mocks base method.
func (m *MockQuerier) UpdateClientDiagnosis(ctx context.Context, arg db.UpdateClientDiagnosisParams) (db.ClientDiagnosis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientDiagnosis", ctx, arg)
	ret0, _ := ret[0].(db.ClientDiagnosis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientDiagnosis indicates an expected call of UpdateClientDiagnosis.
func (mr *MockQuerierMockRecorder) UpdateClientDiagnosis(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientDiagnosis", reflect.TypeOf((*MockQuerier)(nil).UpdateClientDiagnosis), ctx, arg)
}

// UpdateClientMedication mocks base method.
func (m *MockQuerier) UpdateClientMedication(ctx context.Context, arg db.UpdateClientMedicationParams) (db.ClientMedication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientMedication", ctx, arg)
	ret0, _ := ret[0].(db.ClientMedication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientMedication indicates an expected call of UpdateClientMedication.
func (mr *MockQuerierMockRecorder) UpdateClientMedication(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientMedication", reflect.TypeOf((*MockQuerier)(nil).UpdateClientMedication), ctx, arg)
}

// UpdateClientStatus mocks base method.
func (m *MockQuerier) UpdateClientStatus(ctx context.Context, arg db.UpdateClientStatusParams) (db.ClientDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClientStatus", ctx, arg)
	ret0, _ := ret[0].(db.ClientDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClientStatus indicates an expected call of UpdateClientStatus.
func (mr *MockQuerierMockRecorder) UpdateClientStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClientStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateClientStatus), ctx, arg)
}

// UpdateContract mocks base method.
func (m *MockQuerier) UpdateContract(ctx context.Context, arg db.UpdateContractParams) (db.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContract", ctx, arg)
	ret0, _ := ret[0].(db.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContract indicates an expected call of UpdateContract.
func (mr *MockQuerierMockRecorder) UpdateContract(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContract", reflect.TypeOf((*MockQuerier)(nil).UpdateContract), ctx, arg)
}

// UpdateContractStatus mocks base method.
func (m *MockQuerier) UpdateContractStatus(ctx context.Context, arg db.UpdateContractStatusParams) (db.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContractStatus", ctx, arg)
	ret0, _ := ret[0].(db.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContractStatus indicates an expected call of UpdateContractStatus.
func (mr *MockQuerierMockRecorder) UpdateContractStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContractStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateContractStatus), ctx, arg)
}

// UpdateEmergencyContact mocks base method.
func (m *MockQuerier) UpdateEmergencyContact(ctx context.Context, arg db.UpdateEmergencyContactParams) (db.ClientEmergencyContact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmergencyContact", ctx, arg)
	ret0, _ := ret[0].(db.ClientEmergencyContact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmergencyContact indicates an expected call of UpdateEmergencyContact.
func (mr *MockQuerierMockRecorder) UpdateEmergencyContact(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmergencyContact", reflect.TypeOf((*MockQuerier)(nil).UpdateEmergencyContact), ctx, arg)
}

// UpdateEmployeeCertification mocks base method.
func (m *MockQuerier) UpdateEmployeeCertification(ctx context.Context, arg db.UpdateEmployeeCertificationParams) (db.Certification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeCertification", ctx, arg)
	ret0, _ := ret[0].(db.Certification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeCertification indicates an expected call of UpdateEmployeeCertification.
func (mr *MockQuerierMockRecorder) UpdateEmployeeCertification(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeCertification", reflect.TypeOf((*MockQuerier)(nil).UpdateEmployeeCertification), ctx, arg)
}

// UpdateEmployeeEducation mocks base method.
func (m *MockQuerier) UpdateEmployeeEducation(ctx context.Context, arg db.UpdateEmployeeEducationParams) (db.EmployeeEducation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeEducation", ctx, arg)
	ret0, _ := ret[0].(db.EmployeeEducation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeEducation indicates an expected call of UpdateEmployeeEducation.
func (mr *MockQuerierMockRecorder) UpdateEmployeeEducation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeEducation", reflect.TypeOf((*MockQuerier)(nil).UpdateEmployeeEducation), ctx, arg)
}

// UpdateEmployeeExperience mocks base method.
func (m *MockQuerier) UpdateEmployeeExperience(ctx context.Context, arg db.UpdateEmployeeExperienceParams) (db.EmployeeExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeExperience", ctx, arg)
	ret0, _ := ret[0].(db.EmployeeExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeExperience indicates an expected call of UpdateEmployeeExperience.
func (mr *MockQuerierMockRecorder) UpdateEmployeeExperience(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeExperience", reflect.TypeOf((*MockQuerier)(nil).UpdateEmployeeExperience), ctx, arg)
}

// UpdateEmployeeProfile mocks base method.
func (m *MockQuerier) UpdateEmployeeProfile(ctx context.Context, arg db.UpdateEmployeeProfileParams) (db.EmployeeProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeProfile", ctx, arg)
	ret0, _ := ret[0].(db.EmployeeProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmployeeProfile indicates an expected call of UpdateEmployeeProfile.
func (mr *MockQuerierMockRecorder) UpdateEmployeeProfile(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeProfile", reflect.TypeOf((*MockQuerier)(nil).UpdateEmployeeProfile), ctx, arg)
}

// UpdateIncident mocks base method.
func (m *MockQuerier) UpdateIncident(ctx context.Context, arg db.UpdateIncidentParams) (db.Incident, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncident", ctx, arg)
	ret0, _ := ret[0].(db.Incident)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIncident indicates an expected call of UpdateIncident.
func (mr *MockQuerierMockRecorder) UpdateIncident(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncident", reflect.TypeOf((*MockQuerier)(nil).UpdateIncident), ctx, arg)
}

// UpdateIncidentFileUrl mocks base method.
func (m *MockQuerier) UpdateIncidentFileUrl(ctx context.Context, arg db.UpdateIncidentFileUrlParams) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncidentFileUrl", ctx, arg)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIncidentFileUrl indicates an expected call of UpdateIncidentFileUrl.
func (mr *MockQuerierMockRecorder) UpdateIncidentFileUrl(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncidentFileUrl", reflect.TypeOf((*MockQuerier)(nil).UpdateIncidentFileUrl), ctx, arg)
}

// UpdateInvoice mocks base method.
func (m *MockQuerier) UpdateInvoice(ctx context.Context, arg db.UpdateInvoiceParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoice", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoice indicates an expected call of UpdateInvoice.
func (mr *MockQuerierMockRecorder) UpdateInvoice(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoice", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoice), ctx, arg)
}

// UpdateInvoiceStatus mocks base method.
func (m *MockQuerier) UpdateInvoiceStatus(ctx context.Context, arg db.UpdateInvoiceStatusParams) (db.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInvoiceStatus", ctx, arg)
	ret0, _ := ret[0].(db.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInvoiceStatus indicates an expected call of UpdateInvoiceStatus.
func (mr *MockQuerierMockRecorder) UpdateInvoiceStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInvoiceStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateInvoiceStatus), ctx, arg)
}

// UpdateLocation mocks base method.
func (m *MockQuerier) UpdateLocation(ctx context.Context, arg db.UpdateLocationParams) (db.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLocation", ctx, arg)
	ret0, _ := ret[0].(db.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLocation indicates an expected call of UpdateLocation.
func (mr *MockQuerierMockRecorder) UpdateLocation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLocation", reflect.TypeOf((*MockQuerier)(nil).UpdateLocation), ctx, arg)
}

// UpdateOrganisation mocks base method.
func (m *MockQuerier) UpdateOrganisation(ctx context.Context, arg db.UpdateOrganisationParams) (db.Organisation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganisation", ctx, arg)
	ret0, _ := ret[0].(db.Organisation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrganisation indicates an expected call of UpdateOrganisation.
func (mr *MockQuerierMockRecorder) UpdateOrganisation(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganisation", reflect.TypeOf((*MockQuerier)(nil).UpdateOrganisation), ctx, arg)
}

// UpdatePassword mocks base method.
func (m *MockQuerier) UpdatePassword(ctx context.Context, arg db.UpdatePasswordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockQuerierMockRecorder) UpdatePassword(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockQuerier)(nil).UpdatePassword), ctx, arg)
}

// UpdatePayment mocks base method.
func (m *MockQuerier) UpdatePayment(ctx context.Context, arg db.UpdatePaymentParams) (db.InvoicePaymentHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", ctx, arg)
	ret0, _ := ret[0].(db.InvoicePaymentHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockQuerierMockRecorder) UpdatePayment(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockQuerier)(nil).UpdatePayment), ctx, arg)
}

// UpdateProgressReport mocks base method.
func (m *MockQuerier) UpdateProgressReport(ctx context.Context, arg db.UpdateProgressReportParams) (db.ProgressReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgressReport", ctx, arg)
	ret0, _ := ret[0].(db.ProgressReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProgressReport indicates an expected call of UpdateProgressReport.
func (mr *MockQuerierMockRecorder) UpdateProgressReport(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgressReport", reflect.TypeOf((*MockQuerier)(nil).UpdateProgressReport), ctx, arg)
}

// UpdateRegistrationForm mocks base method.
func (m *MockQuerier) UpdateRegistrationForm(ctx context.Context, arg db.UpdateRegistrationFormParams) (db.RegistrationForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistrationForm", ctx, arg)
	ret0, _ := ret[0].(db.RegistrationForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistrationForm indicates an expected call of UpdateRegistrationForm.
func (mr *MockQuerierMockRecorder) UpdateRegistrationForm(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationForm", reflect.TypeOf((*MockQuerier)(nil).UpdateRegistrationForm), ctx, arg)
}

// UpdateRegistrationFormStatus mocks base method.
func (m *MockQuerier) UpdateRegistrationFormStatus(ctx context.Context, arg db.UpdateRegistrationFormStatusParams) (db.RegistrationForm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRegistrationFormStatus", ctx, arg)
	ret0, _ := ret[0].(db.RegistrationForm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistrationFormStatus indicates an expected call of UpdateRegistrationFormStatus.
func (mr *MockQuerierMockRecorder) UpdateRegistrationFormStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationFormStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateRegistrationFormStatus), ctx, arg)
}

// UpdateSchedule mocks base method.
func (m *MockQuerier) UpdateSchedule(ctx context.Context, arg db.UpdateScheduleParams) (db.UpdateScheduleRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", ctx, arg)
	ret0, _ := ret[0].(db.UpdateScheduleRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockQuerierMockRecorder) UpdateSchedule(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockQuerier)(nil).UpdateSchedule), ctx, arg)
}

// UpdateSender mocks base method.
func (m *MockQuerier) UpdateSender(ctx context.Context, arg db.UpdateSenderParams) (db.Sender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSender", ctx, arg)
	ret0, _ := ret[0].(db.Sender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSender indicates an expected call of UpdateSender.
func (mr *MockQuerierMockRecorder) UpdateSender(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSender", reflect.TypeOf((*MockQuerier)(nil).UpdateSender), ctx, arg)
}

// UpdateShift mocks base method.
func (m *MockQuerier) UpdateShift(ctx context.Context, arg db.UpdateShiftParams) (db.LocationShift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShift", ctx, arg)
	ret0, _ := ret[0].(db.LocationShift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShift indicates an expected call of UpdateShift.
func (mr *MockQuerierMockRecorder) UpdateShift(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShift", reflect.TypeOf((*MockQuerier)(nil).UpdateShift), ctx, arg)
}

// UrgentCasesCount mocks base method.
func (m *MockQuerier) UrgentCasesCount(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UrgentCasesCount", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UrgentCasesCount indicates an expected call of UrgentCasesCount.
func (mr *MockQuerierMockRecorder) UrgentCasesCount(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UrgentCasesCount", reflect.TypeOf((*MockQuerier)(nil).UrgentCasesCount), ctx)
}
