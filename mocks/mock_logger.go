// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go
//
// Generated by this command:
//
//	mockgen -source=logger.go -destination=../mocks/mock_logger.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	logger "maicare_go/logger"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// LogBusinessEvent mocks base method.
func (m *MockLogger) LogBusinessEvent(level logger.LogLevel, operation, message string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{level, operation, message}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "LogBusinessEvent", varargs...)
}

// LogBusinessEvent indicates an expected call of LogBusinessEvent.
func (mr *MockLoggerMockRecorder) LogBusinessEvent(level, operation, message any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{level, operation, message}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogBusinessEvent", reflect.TypeOf((*MockLogger)(nil).LogBusinessEvent), varargs...)
}
