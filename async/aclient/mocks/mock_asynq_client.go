// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/mock_asynq_client.go -package=asyncmocks
//

// Package asyncmocks is a generated GoMock package.
package asyncmocks

import (
	context "context"
	aclient "maicare_go/async/aclient"
	notification "maicare_go/notification"
	reflect "reflect"

	asynq "github.com/hibiken/asynq"
	gomock "go.uber.org/mock/gomock"
)

// MockAsynqClientInterface is a mock of AsynqClientInterface interface.
type MockAsynqClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAsynqClientInterfaceMockRecorder
	isgomock struct{}
}

// MockAsynqClientInterfaceMockRecorder is the mock recorder for MockAsynqClientInterface.
type MockAsynqClientInterfaceMockRecorder struct {
	mock *MockAsynqClientInterface
}

// NewMockAsynqClientInterface creates a new mock instance.
func NewMockAsynqClientInterface(ctrl *gomock.Controller) *MockAsynqClientInterface {
	mock := &MockAsynqClientInterface{ctrl: ctrl}
	mock.recorder = &MockAsynqClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsynqClientInterface) EXPECT() *MockAsynqClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAsynqClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAsynqClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAsynqClientInterface)(nil).Close))
}

// EnqueueAcceptedRegistration mocks base method.
func (m *MockAsynqClientInterface) EnqueueAcceptedRegistration(ctx context.Context, payload aclient.AcceptedRegistrationFormPayload, opts ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueAcceptedRegistration", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueAcceptedRegistration indicates an expected call of EnqueueAcceptedRegistration.
func (mr *MockAsynqClientInterfaceMockRecorder) EnqueueAcceptedRegistration(ctx, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueAcceptedRegistration", reflect.TypeOf((*MockAsynqClientInterface)(nil).EnqueueAcceptedRegistration), varargs...)
}

// EnqueueAppointmentTask mocks base method.
func (m *MockAsynqClientInterface) EnqueueAppointmentTask(ctx context.Context, payload aclient.AppointmentPayload, opts ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueAppointmentTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueAppointmentTask indicates an expected call of EnqueueAppointmentTask.
func (mr *MockAsynqClientInterfaceMockRecorder) EnqueueAppointmentTask(ctx, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueAppointmentTask", reflect.TypeOf((*MockAsynqClientInterface)(nil).EnqueueAppointmentTask), varargs...)
}

// EnqueueEmailDelivery mocks base method.
func (m *MockAsynqClientInterface) EnqueueEmailDelivery(payload aclient.EmailDeliveryPayload, ctx context.Context, opts ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{payload, ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueEmailDelivery", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueEmailDelivery indicates an expected call of EnqueueEmailDelivery.
func (mr *MockAsynqClientInterfaceMockRecorder) EnqueueEmailDelivery(payload, ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{payload, ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueEmailDelivery", reflect.TypeOf((*MockAsynqClientInterface)(nil).EnqueueEmailDelivery), varargs...)
}

// EnqueueIncident mocks base method.
func (m *MockAsynqClientInterface) EnqueueIncident(payload aclient.IncidentPayload, ctx context.Context, opts ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{payload, ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueIncident", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueIncident indicates an expected call of EnqueueIncident.
func (mr *MockAsynqClientInterfaceMockRecorder) EnqueueIncident(payload, ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{payload, ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueIncident", reflect.TypeOf((*MockAsynqClientInterface)(nil).EnqueueIncident), varargs...)
}

// EnqueueNotificationTask mocks base method.
func (m *MockAsynqClientInterface) EnqueueNotificationTask(ctx context.Context, payload notification.NotificationPayload, opts ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, payload}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnqueueNotificationTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueNotificationTask indicates an expected call of EnqueueNotificationTask.
func (mr *MockAsynqClientInterfaceMockRecorder) EnqueueNotificationTask(ctx, payload any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, payload}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueNotificationTask", reflect.TypeOf((*MockAsynqClientInterface)(nil).EnqueueNotificationTask), varargs...)
}

// GetClient mocks base method.
func (m *MockAsynqClientInterface) GetClient() *asynq.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*asynq.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockAsynqClientInterfaceMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockAsynqClientInterface)(nil).GetClient))
}
