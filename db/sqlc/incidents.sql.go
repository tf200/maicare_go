// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: incidents.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllIncidents = `-- name: CountAllIncidents :one
SELECT COUNT(*) as total_count
FROM incident i
WHERE i.soft_delete = false
AND (
    $1::boolean IS NULL 
    OR i.is_confirmed = $1::boolean
)
`

func (q *Queries) CountAllIncidents(ctx context.Context, isConfirmed bool) (int64, error) {
	row := q.db.QueryRow(ctx, countAllIncidents, isConfirmed)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const listAllIncidents = `-- name: ListAllIncidents :many
SELECT 
    i.id, i.employee_id, i.location_id, i.reporter_involvement, i.inform_who, i.incident_date, i.runtime_incident, i.incident_type, i.passing_away, i.self_harm, i.violence, i.fire_water_damage, i.accident, i.client_absence, i.medicines, i.organization, i.use_prohibited_substances, i.other_notifications, i.severity_of_incident, i.incident_explanation, i.recurrence_risk, i.incident_prevent_steps, i.incident_taken_measures, i.technical, i.organizational, i.mese_worker, i.client_options, i.other_cause, i.cause_explanation, i.physical_injury, i.physical_injury_desc, i.psychological_damage, i.psychological_damage_desc, i.needed_consultation, i.succession, i.succession_desc, i.other, i.other_desc, i.additional_appointments, i.employee_absenteeism, i.client_id, i.soft_delete, i.updated_at, i.created_at, i.is_confirmed, i.file_url, i.emails,
    c.first_name AS client_first_name,
    c.last_name AS client_last_name,
    e.first_name AS employee_first_name,
    e.last_name AS employee_last_name
FROM 
    incident i
JOIN 
    client_details c ON i.client_id = c.id
JOIN 
    employee_profile e ON i.employee_id = e.id
WHERE 
    i.soft_delete = false
    AND (
        $3::boolean IS NULL 
        OR i.is_confirmed = $3::boolean
    )
ORDER BY 
    i.incident_date DESC
LIMIT $1
OFFSET $2
`

type ListAllIncidentsParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	IsConfirmed bool  `json:"is_confirmed"`
}

type ListAllIncidentsRow struct {
	ID                      int64              `json:"id"`
	EmployeeID              int64              `json:"employee_id"`
	LocationID              int64              `json:"location_id"`
	ReporterInvolvement     string             `json:"reporter_involvement"`
	InformWho               []byte             `json:"inform_who"`
	IncidentDate            pgtype.Date        `json:"incident_date"`
	RuntimeIncident         string             `json:"runtime_incident"`
	IncidentType            string             `json:"incident_type"`
	PassingAway             bool               `json:"passing_away"`
	SelfHarm                bool               `json:"self_harm"`
	Violence                bool               `json:"violence"`
	FireWaterDamage         bool               `json:"fire_water_damage"`
	Accident                bool               `json:"accident"`
	ClientAbsence           bool               `json:"client_absence"`
	Medicines               bool               `json:"medicines"`
	Organization            bool               `json:"organization"`
	UseProhibitedSubstances bool               `json:"use_prohibited_substances"`
	OtherNotifications      bool               `json:"other_notifications"`
	SeverityOfIncident      string             `json:"severity_of_incident"`
	IncidentExplanation     *string            `json:"incident_explanation"`
	RecurrenceRisk          string             `json:"recurrence_risk"`
	IncidentPreventSteps    *string            `json:"incident_prevent_steps"`
	IncidentTakenMeasures   *string            `json:"incident_taken_measures"`
	Technical               []byte             `json:"technical"`
	Organizational          []byte             `json:"organizational"`
	MeseWorker              []byte             `json:"mese_worker"`
	ClientOptions           []byte             `json:"client_options"`
	OtherCause              *string            `json:"other_cause"`
	CauseExplanation        *string            `json:"cause_explanation"`
	PhysicalInjury          string             `json:"physical_injury"`
	PhysicalInjuryDesc      *string            `json:"physical_injury_desc"`
	PsychologicalDamage     string             `json:"psychological_damage"`
	PsychologicalDamageDesc *string            `json:"psychological_damage_desc"`
	NeededConsultation      string             `json:"needed_consultation"`
	Succession              []byte             `json:"succession"`
	SuccessionDesc          *string            `json:"succession_desc"`
	Other                   bool               `json:"other"`
	OtherDesc               *string            `json:"other_desc"`
	AdditionalAppointments  *string            `json:"additional_appointments"`
	EmployeeAbsenteeism     string             `json:"employee_absenteeism"`
	ClientID                int64              `json:"client_id"`
	SoftDelete              bool               `json:"soft_delete"`
	UpdatedAt               pgtype.Timestamptz `json:"updated_at"`
	CreatedAt               pgtype.Timestamptz `json:"created_at"`
	IsConfirmed             bool               `json:"is_confirmed"`
	FileUrl                 *string            `json:"file_url"`
	Emails                  []string           `json:"emails"`
	ClientFirstName         string             `json:"client_first_name"`
	ClientLastName          string             `json:"client_last_name"`
	EmployeeFirstName       string             `json:"employee_first_name"`
	EmployeeLastName        string             `json:"employee_last_name"`
}

func (q *Queries) ListAllIncidents(ctx context.Context, arg ListAllIncidentsParams) ([]ListAllIncidentsRow, error) {
	rows, err := q.db.Query(ctx, listAllIncidents, arg.Limit, arg.Offset, arg.IsConfirmed)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllIncidentsRow
	for rows.Next() {
		var i ListAllIncidentsRow
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeID,
			&i.LocationID,
			&i.ReporterInvolvement,
			&i.InformWho,
			&i.IncidentDate,
			&i.RuntimeIncident,
			&i.IncidentType,
			&i.PassingAway,
			&i.SelfHarm,
			&i.Violence,
			&i.FireWaterDamage,
			&i.Accident,
			&i.ClientAbsence,
			&i.Medicines,
			&i.Organization,
			&i.UseProhibitedSubstances,
			&i.OtherNotifications,
			&i.SeverityOfIncident,
			&i.IncidentExplanation,
			&i.RecurrenceRisk,
			&i.IncidentPreventSteps,
			&i.IncidentTakenMeasures,
			&i.Technical,
			&i.Organizational,
			&i.MeseWorker,
			&i.ClientOptions,
			&i.OtherCause,
			&i.CauseExplanation,
			&i.PhysicalInjury,
			&i.PhysicalInjuryDesc,
			&i.PsychologicalDamage,
			&i.PsychologicalDamageDesc,
			&i.NeededConsultation,
			&i.Succession,
			&i.SuccessionDesc,
			&i.Other,
			&i.OtherDesc,
			&i.AdditionalAppointments,
			&i.EmployeeAbsenteeism,
			&i.ClientID,
			&i.SoftDelete,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.IsConfirmed,
			&i.FileUrl,
			&i.Emails,
			&i.ClientFirstName,
			&i.ClientLastName,
			&i.EmployeeFirstName,
			&i.EmployeeLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
