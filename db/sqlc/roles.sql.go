// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"
)

const assignRoleToUser = `-- name: AssignRoleToUser :one
UPDATE custom_user
SET role_id = $1
WHERE id = $2
RETURNING id, role_id
`

type AssignRoleToUserParams struct {
	RoleID int32 `json:"role_id"`
	ID     int64 `json:"id"`
}

type AssignRoleToUserRow struct {
	ID     int64 `json:"id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) (AssignRoleToUserRow, error) {
	row := q.db.QueryRow(ctx, assignRoleToUser, arg.RoleID, arg.ID)
	var i AssignRoleToUserRow
	err := row.Scan(&i.ID, &i.RoleID)
	return i, err
}

const checkRolePermission = `-- name: CheckRolePermission :one
SELECT EXISTS (
    SELECT 1
    FROM role_permissions rp
    JOIN permissions p ON p.id = rp.permission_id
    WHERE rp.role_id = $1
    AND p.name = $2
) AS has_permission
`

type CheckRolePermissionParams struct {
	RoleID int32  `json:"role_id"`
	Name   string `json:"name"`
}

func (q *Queries) CheckRolePermission(ctx context.Context, arg CheckRolePermissionParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkRolePermission, arg.RoleID, arg.Name)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const getPermissionsByRoleID = `-- name: GetPermissionsByRoleID :many
SELECT p.id, p.name, p.resource, p.method
FROM permissions p
JOIN role_permissions rp ON p.id = rp.permission_id
WHERE rp.role_id = $1
`

func (q *Queries) GetPermissionsByRoleID(ctx context.Context, roleID int32) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissionsByRoleID, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Resource,
			&i.Method,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
