// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: client_progress_report.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProgressReport = `-- name: CreateProgressReport :one
INSERT INTO progress_report (
        client_id,
        employee_id,
        title,
        date,
        report_text,
        type,
        emotional_state
    ) VALUES (
        $1, $2, $3, $4, $5, $6, $7
    ) RETURNING id, client_id, date, title, report_text, employee_id, type, emotional_state, created_at
`

type CreateProgressReportParams struct {
	ClientID       int64              `json:"client_id"`
	EmployeeID     *int64             `json:"employee_id"`
	Title          *string            `json:"title"`
	Date           pgtype.Timestamptz `json:"date"`
	ReportText     string             `json:"report_text"`
	Type           string             `json:"type"`
	EmotionalState string             `json:"emotional_state"`
}

func (q *Queries) CreateProgressReport(ctx context.Context, arg CreateProgressReportParams) (ProgressReport, error) {
	row := q.db.QueryRow(ctx, createProgressReport,
		arg.ClientID,
		arg.EmployeeID,
		arg.Title,
		arg.Date,
		arg.ReportText,
		arg.Type,
		arg.EmotionalState,
	)
	var i ProgressReport
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Date,
		&i.Title,
		&i.ReportText,
		&i.EmployeeID,
		&i.Type,
		&i.EmotionalState,
		&i.CreatedAt,
	)
	return i, err
}

const getProgressReport = `-- name: GetProgressReport :one
SELECT 
    pr.id, pr.client_id, pr.date, pr.title, pr.report_text, pr.employee_id, pr.type, pr.emotional_state, pr.created_at,
    e.first_name AS employee_first_name,
    e.last_name AS employee_last_name
FROM progress_report pr
JOIN employee_profile e ON pr.employee_id = e.id
WHERE pr.id = $1 LIMIT 1
`

type GetProgressReportRow struct {
	ID                int64              `json:"id"`
	ClientID          int64              `json:"client_id"`
	Date              pgtype.Timestamptz `json:"date"`
	Title             *string            `json:"title"`
	ReportText        string             `json:"report_text"`
	EmployeeID        *int64             `json:"employee_id"`
	Type              string             `json:"type"`
	EmotionalState    string             `json:"emotional_state"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	EmployeeFirstName string             `json:"employee_first_name"`
	EmployeeLastName  string             `json:"employee_last_name"`
}

func (q *Queries) GetProgressReport(ctx context.Context, id int64) (GetProgressReportRow, error) {
	row := q.db.QueryRow(ctx, getProgressReport, id)
	var i GetProgressReportRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Date,
		&i.Title,
		&i.ReportText,
		&i.EmployeeID,
		&i.Type,
		&i.EmotionalState,
		&i.CreatedAt,
		&i.EmployeeFirstName,
		&i.EmployeeLastName,
	)
	return i, err
}

const listProgressReports = `-- name: ListProgressReports :many
SELECT 
    pr.id, pr.client_id, pr.date, pr.title, pr.report_text, pr.employee_id, pr.type, pr.emotional_state, pr.created_at,
    COUNT(*) OVER() AS total_count,
    e.first_name AS employee_first_name,
    e.last_name AS employee_last_name
FROM progress_report pr
JOIN employee_profile e ON pr.employee_id = e.id
WHERE pr.client_id = $1
ORDER BY pr.date DESC
LIMIT $2 OFFSET $3
`

type ListProgressReportsParams struct {
	ClientID int64 `json:"client_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type ListProgressReportsRow struct {
	ID                int64              `json:"id"`
	ClientID          int64              `json:"client_id"`
	Date              pgtype.Timestamptz `json:"date"`
	Title             *string            `json:"title"`
	ReportText        string             `json:"report_text"`
	EmployeeID        *int64             `json:"employee_id"`
	Type              string             `json:"type"`
	EmotionalState    string             `json:"emotional_state"`
	CreatedAt         pgtype.Timestamptz `json:"created_at"`
	TotalCount        int64              `json:"total_count"`
	EmployeeFirstName string             `json:"employee_first_name"`
	EmployeeLastName  string             `json:"employee_last_name"`
}

func (q *Queries) ListProgressReports(ctx context.Context, arg ListProgressReportsParams) ([]ListProgressReportsRow, error) {
	rows, err := q.db.Query(ctx, listProgressReports, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProgressReportsRow
	for rows.Next() {
		var i ListProgressReportsRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.Date,
			&i.Title,
			&i.ReportText,
			&i.EmployeeID,
			&i.Type,
			&i.EmotionalState,
			&i.CreatedAt,
			&i.TotalCount,
			&i.EmployeeFirstName,
			&i.EmployeeLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProgressReport = `-- name: UpdateProgressReport :one
UPDATE progress_report
SET
    employee_id = COALESCE($2, employee_id),
    title = COALESCE($3, title),
    date = COALESCE($4, date),
    report_text = COALESCE($5, report_text),
    type = COALESCE($6, type),
    emotional_state = COALESCE($7, emotional_state)
WHERE id = $1
RETURNING id, client_id, date, title, report_text, employee_id, type, emotional_state, created_at
`

type UpdateProgressReportParams struct {
	ID             int64              `json:"id"`
	EmployeeID     *int64             `json:"employee_id"`
	Title          *string            `json:"title"`
	Date           pgtype.Timestamptz `json:"date"`
	ReportText     *string            `json:"report_text"`
	Type           *string            `json:"type"`
	EmotionalState *string            `json:"emotional_state"`
}

func (q *Queries) UpdateProgressReport(ctx context.Context, arg UpdateProgressReportParams) (ProgressReport, error) {
	row := q.db.QueryRow(ctx, updateProgressReport,
		arg.ID,
		arg.EmployeeID,
		arg.Title,
		arg.Date,
		arg.ReportText,
		arg.Type,
		arg.EmotionalState,
	)
	var i ProgressReport
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.Date,
		&i.Title,
		&i.ReportText,
		&i.EmployeeID,
		&i.Type,
		&i.EmotionalState,
		&i.CreatedAt,
	)
	return i, err
}
