// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: invoice.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO invoice (
    invoice_number,
    due_date,
    invoice_details,
    total_amount,
    extra_content,
    client_id
    ) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, invoice_number, issue_date, due_date, status, invoice_details, total_amount, pdf_attachment_id, extra_content, client_id, updated, created
`

type CreateInvoiceParams struct {
	InvoiceNumber  string      `json:"invoice_number"`
	DueDate        pgtype.Date `json:"due_date"`
	InvoiceDetails []byte      `json:"invoice_details"`
	TotalAmount    float64     `json:"total_amount"`
	ExtraContent   *string     `json:"extra_content"`
	ClientID       int64       `json:"client_id"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRow(ctx, createInvoice,
		arg.InvoiceNumber,
		arg.DueDate,
		arg.InvoiceDetails,
		arg.TotalAmount,
		arg.ExtraContent,
		arg.ClientID,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.InvoiceNumber,
		&i.IssueDate,
		&i.DueDate,
		&i.Status,
		&i.InvoiceDetails,
		&i.TotalAmount,
		&i.PdfAttachmentID,
		&i.ExtraContent,
		&i.ClientID,
		&i.Updated,
		&i.Created,
	)
	return i, err
}
