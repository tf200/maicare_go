// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: maturity_matrix.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCarePlan = `-- name: CreateCarePlan :one

INSERT INTO care_plans (
    assessment_id,
    generated_by_employee_id,
    assessment_summary,
    raw_llm_response,
    status
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, assessment_id, generated_at, generated_by_employee_id, approved_by_employee_id, approved_at, status, assessment_summary, raw_llm_response, created_at, updated_at, version
`

type CreateCarePlanParams struct {
	AssessmentID          int64  `json:"assessment_id"`
	GeneratedByEmployeeID *int64 `json:"generated_by_employee_id"`
	AssessmentSummary     string `json:"assessment_summary"`
	RawLlmResponse        []byte `json:"raw_llm_response"`
	Status                string `json:"status"`
}

// ==================== new code    ====================
func (q *Queries) CreateCarePlan(ctx context.Context, arg CreateCarePlanParams) (CarePlan, error) {
	row := q.db.QueryRow(ctx, createCarePlan,
		arg.AssessmentID,
		arg.GeneratedByEmployeeID,
		arg.AssessmentSummary,
		arg.RawLlmResponse,
		arg.Status,
	)
	var i CarePlan
	err := row.Scan(
		&i.ID,
		&i.AssessmentID,
		&i.GeneratedAt,
		&i.GeneratedByEmployeeID,
		&i.ApprovedByEmployeeID,
		&i.ApprovedAt,
		&i.Status,
		&i.AssessmentSummary,
		&i.RawLlmResponse,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const createCarePlanResources = `-- name: CreateCarePlanResources :one
INSERT INTO care_plan_resources (
    care_plan_id,
    resource_description
) VALUES (
    $1, $2
)
RETURNING id, care_plan_id, resource_description, resource_type, is_obtained, obtained_date, cost_estimate, notes, created_at
`

type CreateCarePlanResourcesParams struct {
	CarePlanID          int64  `json:"care_plan_id"`
	ResourceDescription string `json:"resource_description"`
}

func (q *Queries) CreateCarePlanResources(ctx context.Context, arg CreateCarePlanResourcesParams) (CarePlanResource, error) {
	row := q.db.QueryRow(ctx, createCarePlanResources, arg.CarePlanID, arg.ResourceDescription)
	var i CarePlanResource
	err := row.Scan(
		&i.ID,
		&i.CarePlanID,
		&i.ResourceDescription,
		&i.ResourceType,
		&i.IsObtained,
		&i.ObtainedDate,
		&i.CostEstimate,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const createCarePlanRisks = `-- name: CreateCarePlanRisks :one
INSERT INTO care_plan_risks (
    care_plan_id,
    risk_description,
    mitigation_strategy
) VALUES (
    $1, $2, $3
)
RETURNING id, care_plan_id, risk_description, mitigation_strategy, risk_level, is_active, created_at
`

type CreateCarePlanRisksParams struct {
	CarePlanID         int64  `json:"care_plan_id"`
	RiskDescription    string `json:"risk_description"`
	MitigationStrategy string `json:"mitigation_strategy"`
}

func (q *Queries) CreateCarePlanRisks(ctx context.Context, arg CreateCarePlanRisksParams) (CarePlanRisk, error) {
	row := q.db.QueryRow(ctx, createCarePlanRisks, arg.CarePlanID, arg.RiskDescription, arg.MitigationStrategy)
	var i CarePlanRisk
	err := row.Scan(
		&i.ID,
		&i.CarePlanID,
		&i.RiskDescription,
		&i.MitigationStrategy,
		&i.RiskLevel,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const createCarePlanSupportNetwork = `-- name: CreateCarePlanSupportNetwork :one
INSERT INTO care_plan_support_network (
    care_plan_id,
    role_title,
    responsibility_description
) VALUES (
    $1, $2, $3
)
RETURNING id, care_plan_id, role_title, responsibility_description, contact_person, contact_details, is_active, created_at
`

type CreateCarePlanSupportNetworkParams struct {
	CarePlanID                int64  `json:"care_plan_id"`
	RoleTitle                 string `json:"role_title"`
	ResponsibilityDescription string `json:"responsibility_description"`
}

func (q *Queries) CreateCarePlanSupportNetwork(ctx context.Context, arg CreateCarePlanSupportNetworkParams) (CarePlanSupportNetwork, error) {
	row := q.db.QueryRow(ctx, createCarePlanSupportNetwork, arg.CarePlanID, arg.RoleTitle, arg.ResponsibilityDescription)
	var i CarePlanSupportNetwork
	err := row.Scan(
		&i.ID,
		&i.CarePlanID,
		&i.RoleTitle,
		&i.ResponsibilityDescription,
		&i.ContactPerson,
		&i.ContactDetails,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const createClientGoal = `-- name: CreateClientGoal :one
INSERT INTO client_goals (
    client_maturity_matrix_assessment_id,
    description,
    status,
    target_level,
    start_date,
    target_date,
    completion_date
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, client_maturity_matrix_assessment_id, description, status, target_level, start_date, target_date, completion_date, created_at
`

type CreateClientGoalParams struct {
	ClientMaturityMatrixAssessmentID int64       `json:"client_maturity_matrix_assessment_id"`
	Description                      string      `json:"description"`
	Status                           string      `json:"status"`
	TargetLevel                      int32       `json:"target_level"`
	StartDate                        pgtype.Date `json:"start_date"`
	TargetDate                       pgtype.Date `json:"target_date"`
	CompletionDate                   pgtype.Date `json:"completion_date"`
}

func (q *Queries) CreateClientGoal(ctx context.Context, arg CreateClientGoalParams) (ClientGoal, error) {
	row := q.db.QueryRow(ctx, createClientGoal,
		arg.ClientMaturityMatrixAssessmentID,
		arg.Description,
		arg.Status,
		arg.TargetLevel,
		arg.StartDate,
		arg.TargetDate,
		arg.CompletionDate,
	)
	var i ClientGoal
	err := row.Scan(
		&i.ID,
		&i.ClientMaturityMatrixAssessmentID,
		&i.Description,
		&i.Status,
		&i.TargetLevel,
		&i.StartDate,
		&i.TargetDate,
		&i.CompletionDate,
		&i.CreatedAt,
	)
	return i, err
}

const createClientMaturityMatrixAssessment = `-- name: CreateClientMaturityMatrixAssessment :one
WITH inserted AS (
    INSERT INTO client_maturity_matrix_assessment (
        client_id,
        maturity_matrix_id,
        start_date,
        end_date,
        target_level,
        initial_level,
        current_level
    ) VALUES (
        $1, $2, $3, $4, $5, $6, $7
    )
    RETURNING id, client_id, maturity_matrix_id, start_date, end_date, initial_level, target_level, current_level, care_plan_generated_at, care_plan_status, is_active
)
SELECT 
    inserted.id, inserted.client_id, inserted.maturity_matrix_id, inserted.start_date, inserted.end_date, inserted.initial_level, inserted.target_level, inserted.current_level, inserted.care_plan_generated_at, inserted.care_plan_status, inserted.is_active,
    mm.topic_name AS topic_name
FROM inserted
JOIN maturity_matrix mm ON inserted.maturity_matrix_id = mm.id
`

type CreateClientMaturityMatrixAssessmentParams struct {
	ClientID         int64       `json:"client_id"`
	MaturityMatrixID int64       `json:"maturity_matrix_id"`
	StartDate        pgtype.Date `json:"start_date"`
	EndDate          pgtype.Date `json:"end_date"`
	TargetLevel      int32       `json:"target_level"`
	InitialLevel     int32       `json:"initial_level"`
	CurrentLevel     int32       `json:"current_level"`
}

type CreateClientMaturityMatrixAssessmentRow struct {
	ID                  int64              `json:"id"`
	ClientID            int64              `json:"client_id"`
	MaturityMatrixID    int64              `json:"maturity_matrix_id"`
	StartDate           pgtype.Date        `json:"start_date"`
	EndDate             pgtype.Date        `json:"end_date"`
	InitialLevel        int32              `json:"initial_level"`
	TargetLevel         int32              `json:"target_level"`
	CurrentLevel        int32              `json:"current_level"`
	CarePlanGeneratedAt pgtype.Timestamptz `json:"care_plan_generated_at"`
	CarePlanStatus      string             `json:"care_plan_status"`
	IsActive            bool               `json:"is_active"`
	TopicName           string             `json:"topic_name"`
}

func (q *Queries) CreateClientMaturityMatrixAssessment(ctx context.Context, arg CreateClientMaturityMatrixAssessmentParams) (CreateClientMaturityMatrixAssessmentRow, error) {
	row := q.db.QueryRow(ctx, createClientMaturityMatrixAssessment,
		arg.ClientID,
		arg.MaturityMatrixID,
		arg.StartDate,
		arg.EndDate,
		arg.TargetLevel,
		arg.InitialLevel,
		arg.CurrentLevel,
	)
	var i CreateClientMaturityMatrixAssessmentRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.MaturityMatrixID,
		&i.StartDate,
		&i.EndDate,
		&i.InitialLevel,
		&i.TargetLevel,
		&i.CurrentLevel,
		&i.CarePlanGeneratedAt,
		&i.CarePlanStatus,
		&i.IsActive,
		&i.TopicName,
	)
	return i, err
}

const createGoalAction = `-- name: CreateGoalAction :one
INSERT INTO care_plan_actions (
    objective_id,
    action_description,
    sort_order
) VALUES (
    $1, $2, $3
)
RETURNING id, objective_id, action_description, is_completed, completed_at, completed_by_employee_id, notes, sort_order
`

type CreateGoalActionParams struct {
	ObjectiveID       int64  `json:"objective_id"`
	ActionDescription string `json:"action_description"`
	SortOrder         int32  `json:"sort_order"`
}

func (q *Queries) CreateGoalAction(ctx context.Context, arg CreateGoalActionParams) (CarePlanAction, error) {
	row := q.db.QueryRow(ctx, createGoalAction, arg.ObjectiveID, arg.ActionDescription, arg.SortOrder)
	var i CarePlanAction
	err := row.Scan(
		&i.ID,
		&i.ObjectiveID,
		&i.ActionDescription,
		&i.IsCompleted,
		&i.CompletedAt,
		&i.CompletedByEmployeeID,
		&i.Notes,
		&i.SortOrder,
	)
	return i, err
}

const createGoalObjective = `-- name: CreateGoalObjective :one
INSERT INTO goal_objectives (
    goal_id,
    objective_description,
    due_date,
    status,
    completion_date
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, goal_id, objective_description, due_date, status, completion_date, created_at, updated_at
`

type CreateGoalObjectiveParams struct {
	GoalID               int64       `json:"goal_id"`
	ObjectiveDescription string      `json:"objective_description"`
	DueDate              pgtype.Date `json:"due_date"`
	Status               string      `json:"status"`
	CompletionDate       pgtype.Date `json:"completion_date"`
}

func (q *Queries) CreateGoalObjective(ctx context.Context, arg CreateGoalObjectiveParams) (GoalObjective, error) {
	row := q.db.QueryRow(ctx, createGoalObjective,
		arg.GoalID,
		arg.ObjectiveDescription,
		arg.DueDate,
		arg.Status,
		arg.CompletionDate,
	)
	var i GoalObjective
	err := row.Scan(
		&i.ID,
		&i.GoalID,
		&i.ObjectiveDescription,
		&i.DueDate,
		&i.Status,
		&i.CompletionDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createIntervention = `-- name: CreateIntervention :one
INSERT INTO care_plan_interventions (
    care_plan_id,
    frequency,
    intervention_description
) VALUES (
    $1, $2, $3
)
RETURNING id, care_plan_id, frequency, intervention_description, is_active, last_completed_date, total_completions, created_at
`

type CreateInterventionParams struct {
	CarePlanID              int64  `json:"care_plan_id"`
	Frequency               string `json:"frequency"`
	InterventionDescription string `json:"intervention_description"`
}

func (q *Queries) CreateIntervention(ctx context.Context, arg CreateInterventionParams) (CarePlanIntervention, error) {
	row := q.db.QueryRow(ctx, createIntervention, arg.CarePlanID, arg.Frequency, arg.InterventionDescription)
	var i CarePlanIntervention
	err := row.Scan(
		&i.ID,
		&i.CarePlanID,
		&i.Frequency,
		&i.InterventionDescription,
		&i.IsActive,
		&i.LastCompletedDate,
		&i.TotalCompletions,
		&i.CreatedAt,
	)
	return i, err
}

const createObjective = `-- name: CreateObjective :one
INSERT INTO care_plan_objectives (
    care_plan_id,
    timeframe,
    goal_title,
    description,
    target_date
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, care_plan_id, timeframe, goal_title, description, target_date, status, completion_date, completion_notes, created_at, updated_at
`

type CreateObjectiveParams struct {
	CarePlanID  int64       `json:"care_plan_id"`
	Timeframe   string      `json:"timeframe"`
	GoalTitle   string      `json:"goal_title"`
	Description string      `json:"description"`
	TargetDate  pgtype.Date `json:"target_date"`
}

func (q *Queries) CreateObjective(ctx context.Context, arg CreateObjectiveParams) (CarePlanObjective, error) {
	row := q.db.QueryRow(ctx, createObjective,
		arg.CarePlanID,
		arg.Timeframe,
		arg.GoalTitle,
		arg.Description,
		arg.TargetDate,
	)
	var i CarePlanObjective
	err := row.Scan(
		&i.ID,
		&i.CarePlanID,
		&i.Timeframe,
		&i.GoalTitle,
		&i.Description,
		&i.TargetDate,
		&i.Status,
		&i.CompletionDate,
		&i.CompletionNotes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSuccessMetric = `-- name: CreateSuccessMetric :one
INSERT INTO care_plan_metrics (
    care_plan_id,
    metric_name,
    target_value,
    measurement_method
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, care_plan_id, metric_name, target_value, measurement_method, current_value, last_measured_date, is_achieved, created_at
`

type CreateSuccessMetricParams struct {
	CarePlanID        int64  `json:"care_plan_id"`
	MetricName        string `json:"metric_name"`
	TargetValue       string `json:"target_value"`
	MeasurementMethod string `json:"measurement_method"`
}

func (q *Queries) CreateSuccessMetric(ctx context.Context, arg CreateSuccessMetricParams) (CarePlanMetric, error) {
	row := q.db.QueryRow(ctx, createSuccessMetric,
		arg.CarePlanID,
		arg.MetricName,
		arg.TargetValue,
		arg.MeasurementMethod,
	)
	var i CarePlanMetric
	err := row.Scan(
		&i.ID,
		&i.CarePlanID,
		&i.MetricName,
		&i.TargetValue,
		&i.MeasurementMethod,
		&i.CurrentValue,
		&i.LastMeasuredDate,
		&i.IsAchieved,
		&i.CreatedAt,
	)
	return i, err
}

const getClientGoal = `-- name: GetClientGoal :one
SELECT id, client_maturity_matrix_assessment_id, description, status, target_level, start_date, target_date, completion_date, created_at FROM client_goals WHERE id = $1
`

func (q *Queries) GetClientGoal(ctx context.Context, id int64) (ClientGoal, error) {
	row := q.db.QueryRow(ctx, getClientGoal, id)
	var i ClientGoal
	err := row.Scan(
		&i.ID,
		&i.ClientMaturityMatrixAssessmentID,
		&i.Description,
		&i.Status,
		&i.TargetLevel,
		&i.StartDate,
		&i.TargetDate,
		&i.CompletionDate,
		&i.CreatedAt,
	)
	return i, err
}

const getClientMaturityMatrixAssessment = `-- name: GetClientMaturityMatrixAssessment :one
SELECT
    cma.id, cma.client_id, cma.maturity_matrix_id, cma.start_date, cma.end_date, cma.initial_level, cma.target_level, cma.current_level, cma.care_plan_generated_at, cma.care_plan_status, cma.is_active,
    mm.topic_name AS topic_name
FROM client_maturity_matrix_assessment cma
JOIN maturity_matrix mm ON cma.maturity_matrix_id = mm.id
WHERE cma.id = $1
`

type GetClientMaturityMatrixAssessmentRow struct {
	ID                  int64              `json:"id"`
	ClientID            int64              `json:"client_id"`
	MaturityMatrixID    int64              `json:"maturity_matrix_id"`
	StartDate           pgtype.Date        `json:"start_date"`
	EndDate             pgtype.Date        `json:"end_date"`
	InitialLevel        int32              `json:"initial_level"`
	TargetLevel         int32              `json:"target_level"`
	CurrentLevel        int32              `json:"current_level"`
	CarePlanGeneratedAt pgtype.Timestamptz `json:"care_plan_generated_at"`
	CarePlanStatus      string             `json:"care_plan_status"`
	IsActive            bool               `json:"is_active"`
	TopicName           string             `json:"topic_name"`
}

func (q *Queries) GetClientMaturityMatrixAssessment(ctx context.Context, id int64) (GetClientMaturityMatrixAssessmentRow, error) {
	row := q.db.QueryRow(ctx, getClientMaturityMatrixAssessment, id)
	var i GetClientMaturityMatrixAssessmentRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.MaturityMatrixID,
		&i.StartDate,
		&i.EndDate,
		&i.InitialLevel,
		&i.TargetLevel,
		&i.CurrentLevel,
		&i.CarePlanGeneratedAt,
		&i.CarePlanStatus,
		&i.IsActive,
		&i.TopicName,
	)
	return i, err
}

const getLevelDescription = `-- name: GetLevelDescription :one
SELECT 
    topic_name, 
    (jsonb_path_query_first(level_description, format('$[*] ? (@.level == %s).description', $2::text)::jsonpath))::text as level_description 
FROM maturity_matrix 
WHERE id = $1
`

type GetLevelDescriptionParams struct {
	ID    int64  `json:"id"`
	Level string `json:"level"`
}

type GetLevelDescriptionRow struct {
	TopicName        string `json:"topic_name"`
	LevelDescription string `json:"level_description"`
}

func (q *Queries) GetLevelDescription(ctx context.Context, arg GetLevelDescriptionParams) (GetLevelDescriptionRow, error) {
	row := q.db.QueryRow(ctx, getLevelDescription, arg.ID, arg.Level)
	var i GetLevelDescriptionRow
	err := row.Scan(&i.TopicName, &i.LevelDescription)
	return i, err
}

const getMaturityMatrix = `-- name: GetMaturityMatrix :one
SELECT id, topic_name, level_description FROM maturity_matrix WHERE id = $1
`

func (q *Queries) GetMaturityMatrix(ctx context.Context, id int64) (MaturityMatrix, error) {
	row := q.db.QueryRow(ctx, getMaturityMatrix, id)
	var i MaturityMatrix
	err := row.Scan(&i.ID, &i.TopicName, &i.LevelDescription)
	return i, err
}

const listClientGoals = `-- name: ListClientGoals :many
SELECT
    cg.id, cg.client_maturity_matrix_assessment_id, cg.description, cg.status, cg.target_level, cg.start_date, cg.target_date, cg.completion_date, cg.created_at,
    COUNT(*) OVER() AS total_count
    FROM client_goals cg
WHERE cg.client_maturity_matrix_assessment_id = $1
ORDER BY cg.start_date DESC
LIMIT $2 OFFSET $3
`

type ListClientGoalsParams struct {
	ClientMaturityMatrixAssessmentID int64 `json:"client_maturity_matrix_assessment_id"`
	Limit                            int32 `json:"limit"`
	Offset                           int32 `json:"offset"`
}

type ListClientGoalsRow struct {
	ID                               int64              `json:"id"`
	ClientMaturityMatrixAssessmentID int64              `json:"client_maturity_matrix_assessment_id"`
	Description                      string             `json:"description"`
	Status                           string             `json:"status"`
	TargetLevel                      int32              `json:"target_level"`
	StartDate                        pgtype.Date        `json:"start_date"`
	TargetDate                       pgtype.Date        `json:"target_date"`
	CompletionDate                   pgtype.Date        `json:"completion_date"`
	CreatedAt                        pgtype.Timestamptz `json:"created_at"`
	TotalCount                       int64              `json:"total_count"`
}

func (q *Queries) ListClientGoals(ctx context.Context, arg ListClientGoalsParams) ([]ListClientGoalsRow, error) {
	rows, err := q.db.Query(ctx, listClientGoals, arg.ClientMaturityMatrixAssessmentID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClientGoalsRow
	for rows.Next() {
		var i ListClientGoalsRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientMaturityMatrixAssessmentID,
			&i.Description,
			&i.Status,
			&i.TargetLevel,
			&i.StartDate,
			&i.TargetDate,
			&i.CompletionDate,
			&i.CreatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientMaturityMatrixAssessments = `-- name: ListClientMaturityMatrixAssessments :many
SELECT
    cma.id, cma.client_id, cma.maturity_matrix_id, cma.start_date, cma.end_date, cma.initial_level, cma.target_level, cma.current_level, cma.care_plan_generated_at, cma.care_plan_status, cma.is_active,
    mm.topic_name AS topic_name,
    COUNT(*) OVER() AS total_count
FROM client_maturity_matrix_assessment cma
JOIN maturity_matrix mm ON cma.maturity_matrix_id = mm.id
WHERE cma.client_id = $1
ORDER BY cma.start_date DESC
LIMIT $2 OFFSET $3
`

type ListClientMaturityMatrixAssessmentsParams struct {
	ClientID int64 `json:"client_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type ListClientMaturityMatrixAssessmentsRow struct {
	ID                  int64              `json:"id"`
	ClientID            int64              `json:"client_id"`
	MaturityMatrixID    int64              `json:"maturity_matrix_id"`
	StartDate           pgtype.Date        `json:"start_date"`
	EndDate             pgtype.Date        `json:"end_date"`
	InitialLevel        int32              `json:"initial_level"`
	TargetLevel         int32              `json:"target_level"`
	CurrentLevel        int32              `json:"current_level"`
	CarePlanGeneratedAt pgtype.Timestamptz `json:"care_plan_generated_at"`
	CarePlanStatus      string             `json:"care_plan_status"`
	IsActive            bool               `json:"is_active"`
	TopicName           string             `json:"topic_name"`
	TotalCount          int64              `json:"total_count"`
}

func (q *Queries) ListClientMaturityMatrixAssessments(ctx context.Context, arg ListClientMaturityMatrixAssessmentsParams) ([]ListClientMaturityMatrixAssessmentsRow, error) {
	rows, err := q.db.Query(ctx, listClientMaturityMatrixAssessments, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClientMaturityMatrixAssessmentsRow
	for rows.Next() {
		var i ListClientMaturityMatrixAssessmentsRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.MaturityMatrixID,
			&i.StartDate,
			&i.EndDate,
			&i.InitialLevel,
			&i.TargetLevel,
			&i.CurrentLevel,
			&i.CarePlanGeneratedAt,
			&i.CarePlanStatus,
			&i.IsActive,
			&i.TopicName,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listGoalObjectives = `-- name: ListGoalObjectives :many
SELECT
    go.id, go.goal_id, go.objective_description, go.due_date, go.status, go.completion_date, go.created_at, go.updated_at,
    COUNT(*) OVER() AS total_count
FROM goal_objectives go
WHERE go.goal_id = $1
ORDER BY go.due_date DESC
`

type ListGoalObjectivesRow struct {
	ID                   int64              `json:"id"`
	GoalID               int64              `json:"goal_id"`
	ObjectiveDescription string             `json:"objective_description"`
	DueDate              pgtype.Date        `json:"due_date"`
	Status               string             `json:"status"`
	CompletionDate       pgtype.Date        `json:"completion_date"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	TotalCount           int64              `json:"total_count"`
}

func (q *Queries) ListGoalObjectives(ctx context.Context, goalID int64) ([]ListGoalObjectivesRow, error) {
	rows, err := q.db.Query(ctx, listGoalObjectives, goalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGoalObjectivesRow
	for rows.Next() {
		var i ListGoalObjectivesRow
		if err := rows.Scan(
			&i.ID,
			&i.GoalID,
			&i.ObjectiveDescription,
			&i.DueDate,
			&i.Status,
			&i.CompletionDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaturityMatrix = `-- name: ListMaturityMatrix :many
SELECT id, topic_name, level_description FROM maturity_matrix
`

func (q *Queries) ListMaturityMatrix(ctx context.Context) ([]MaturityMatrix, error) {
	rows, err := q.db.Query(ctx, listMaturityMatrix)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MaturityMatrix
	for rows.Next() {
		var i MaturityMatrix
		if err := rows.Scan(&i.ID, &i.TopicName, &i.LevelDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
