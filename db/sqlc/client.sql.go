// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: client.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createClientDetails = `-- name: CreateClientDetails :one
INSERT INTO client_details (
    intake_form_id,
    first_name,
    last_name,
    date_of_birth,
    "identity",
    bsn,
    bsn_verified_by,
    source,
    birthplace,
    email,
    phone_number,
    organisation,
    departement,
    gender,
    filenumber,
    profile_picture,
    infix,
    sender_id,
    location_id,
    departure_reason,
    departure_report,
    addresses,
    legal_measure,
    education_currently_enrolled,
    education_institution,
    education_mentor_name,
    education_mentor_phone,
    education_mentor_email,
    education_additional_notes,
    education_level, 
    work_currently_employed,
    work_current_employer,
    work_current_employer_phone,
    work_current_employer_email,
    work_current_position,
    work_start_date,
    work_additional_notes, 
    living_situation,
    living_situation_notes
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, 
    $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39
) RETURNING id, intake_form_id, first_name, last_name, date_of_birth, identity, status, bsn, bsn_verified_by, source, birthplace, email, phone_number, organisation, departement, gender, filenumber, profile_picture, infix, created_at, sender_id, location_id, departure_reason, departure_report, gps_position, maturity_domains, addresses, legal_measure, has_untaken_medications, education_currently_enrolled, education_institution, education_mentor_name, education_mentor_phone, education_mentor_email, education_additional_notes, education_level, work_currently_employed, work_current_employer, work_current_employer_phone, work_current_employer_email, work_current_position, work_start_date, work_additional_notes, living_situation, living_situation_notes, risk_aggressive_behavior, risk_suicidal_selfharm, risk_substance_abuse, risk_psychiatric_issues, risk_criminal_history, risk_flight_behavior, risk_weapon_possession, risk_sexual_behavior, risk_day_night_rhythm, risk_other, risk_other_description, risk_additional_notes
`

type CreateClientDetailsParams struct {
	IntakeFormID               *int64      `json:"intake_form_id"`
	FirstName                  string      `json:"first_name"`
	LastName                   string      `json:"last_name"`
	DateOfBirth                pgtype.Date `json:"date_of_birth"`
	Identity                   bool        `json:"identity"`
	Bsn                        *string     `json:"bsn"`
	BsnVerifiedBy              *int64      `json:"bsn_verified_by"`
	Source                     *string     `json:"source"`
	Birthplace                 *string     `json:"birthplace"`
	Email                      string      `json:"email"`
	PhoneNumber                *string     `json:"phone_number"`
	Organisation               *string     `json:"organisation"`
	Departement                *string     `json:"departement"`
	Gender                     string      `json:"gender"`
	Filenumber                 string      `json:"filenumber"`
	ProfilePicture             *string     `json:"profile_picture"`
	Infix                      *string     `json:"infix"`
	SenderID                   *int64      `json:"sender_id"`
	LocationID                 *int64      `json:"location_id"`
	DepartureReason            *string     `json:"departure_reason"`
	DepartureReport            *string     `json:"departure_report"`
	Addresses                  []byte      `json:"addresses"`
	LegalMeasure               *string     `json:"legal_measure"`
	EducationCurrentlyEnrolled bool        `json:"education_currently_enrolled"`
	EducationInstitution       *string     `json:"education_institution"`
	EducationMentorName        *string     `json:"education_mentor_name"`
	EducationMentorPhone       *string     `json:"education_mentor_phone"`
	EducationMentorEmail       *string     `json:"education_mentor_email"`
	EducationAdditionalNotes   *string     `json:"education_additional_notes"`
	EducationLevel             *string     `json:"education_level"`
	WorkCurrentlyEmployed      bool        `json:"work_currently_employed"`
	WorkCurrentEmployer        *string     `json:"work_current_employer"`
	WorkCurrentEmployerPhone   *string     `json:"work_current_employer_phone"`
	WorkCurrentEmployerEmail   *string     `json:"work_current_employer_email"`
	WorkCurrentPosition        *string     `json:"work_current_position"`
	WorkStartDate              pgtype.Date `json:"work_start_date"`
	WorkAdditionalNotes        *string     `json:"work_additional_notes"`
	LivingSituation            *string     `json:"living_situation"`
	LivingSituationNotes       *string     `json:"living_situation_notes"`
}

func (q *Queries) CreateClientDetails(ctx context.Context, arg CreateClientDetailsParams) (ClientDetail, error) {
	row := q.db.QueryRow(ctx, createClientDetails,
		arg.IntakeFormID,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Identity,
		arg.Bsn,
		arg.BsnVerifiedBy,
		arg.Source,
		arg.Birthplace,
		arg.Email,
		arg.PhoneNumber,
		arg.Organisation,
		arg.Departement,
		arg.Gender,
		arg.Filenumber,
		arg.ProfilePicture,
		arg.Infix,
		arg.SenderID,
		arg.LocationID,
		arg.DepartureReason,
		arg.DepartureReport,
		arg.Addresses,
		arg.LegalMeasure,
		arg.EducationCurrentlyEnrolled,
		arg.EducationInstitution,
		arg.EducationMentorName,
		arg.EducationMentorPhone,
		arg.EducationMentorEmail,
		arg.EducationAdditionalNotes,
		arg.EducationLevel,
		arg.WorkCurrentlyEmployed,
		arg.WorkCurrentEmployer,
		arg.WorkCurrentEmployerPhone,
		arg.WorkCurrentEmployerEmail,
		arg.WorkCurrentPosition,
		arg.WorkStartDate,
		arg.WorkAdditionalNotes,
		arg.LivingSituation,
		arg.LivingSituationNotes,
	)
	var i ClientDetail
	err := row.Scan(
		&i.ID,
		&i.IntakeFormID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Identity,
		&i.Status,
		&i.Bsn,
		&i.BsnVerifiedBy,
		&i.Source,
		&i.Birthplace,
		&i.Email,
		&i.PhoneNumber,
		&i.Organisation,
		&i.Departement,
		&i.Gender,
		&i.Filenumber,
		&i.ProfilePicture,
		&i.Infix,
		&i.CreatedAt,
		&i.SenderID,
		&i.LocationID,
		&i.DepartureReason,
		&i.DepartureReport,
		&i.GpsPosition,
		&i.MaturityDomains,
		&i.Addresses,
		&i.LegalMeasure,
		&i.HasUntakenMedications,
		&i.EducationCurrentlyEnrolled,
		&i.EducationInstitution,
		&i.EducationMentorName,
		&i.EducationMentorPhone,
		&i.EducationMentorEmail,
		&i.EducationAdditionalNotes,
		&i.EducationLevel,
		&i.WorkCurrentlyEmployed,
		&i.WorkCurrentEmployer,
		&i.WorkCurrentEmployerPhone,
		&i.WorkCurrentEmployerEmail,
		&i.WorkCurrentPosition,
		&i.WorkStartDate,
		&i.WorkAdditionalNotes,
		&i.LivingSituation,
		&i.LivingSituationNotes,
		&i.RiskAggressiveBehavior,
		&i.RiskSuicidalSelfharm,
		&i.RiskSubstanceAbuse,
		&i.RiskPsychiatricIssues,
		&i.RiskCriminalHistory,
		&i.RiskFlightBehavior,
		&i.RiskWeaponPossession,
		&i.RiskSexualBehavior,
		&i.RiskDayNightRhythm,
		&i.RiskOther,
		&i.RiskOtherDescription,
		&i.RiskAdditionalNotes,
	)
	return i, err
}

const createClientDocument = `-- name: CreateClientDocument :one
INSERT INTO client_documents (
    client_id,
    attachment_uuid,
    label
) VALUES (
    $1, $2, $3
) RETURNING id, attachment_uuid, client_id, label
`

type CreateClientDocumentParams struct {
	ClientID       int64      `json:"client_id"`
	AttachmentUuid *uuid.UUID `json:"attachment_uuid"`
	Label          string     `json:"label"`
}

func (q *Queries) CreateClientDocument(ctx context.Context, arg CreateClientDocumentParams) (ClientDocument, error) {
	row := q.db.QueryRow(ctx, createClientDocument, arg.ClientID, arg.AttachmentUuid, arg.Label)
	var i ClientDocument
	err := row.Scan(
		&i.ID,
		&i.AttachmentUuid,
		&i.ClientID,
		&i.Label,
	)
	return i, err
}

const createClientStatusHistory = `-- name: CreateClientStatusHistory :one
INSERT INTO client_status_history (
    client_id,
    old_status,
    new_status,
    reason
) VALUES (
    $1, $2, $3, $4
) RETURNING id, client_id, old_status, new_status, changed_at, changed_by, reason
`

type CreateClientStatusHistoryParams struct {
	ClientID  int64   `json:"client_id"`
	OldStatus *string `json:"old_status"`
	NewStatus string  `json:"new_status"`
	Reason    *string `json:"reason"`
}

func (q *Queries) CreateClientStatusHistory(ctx context.Context, arg CreateClientStatusHistoryParams) (ClientStatusHistory, error) {
	row := q.db.QueryRow(ctx, createClientStatusHistory,
		arg.ClientID,
		arg.OldStatus,
		arg.NewStatus,
		arg.Reason,
	)
	var i ClientStatusHistory
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.OldStatus,
		&i.NewStatus,
		&i.ChangedAt,
		&i.ChangedBy,
		&i.Reason,
	)
	return i, err
}

const createSchedueledClientStatusChange = `-- name: CreateSchedueledClientStatusChange :one
INSERT INTO scheduled_status_changes (
    client_id,
    new_status,
    reason,
    scheduled_date
) VALUES (
    $1, $2, $3, $4
) RETURNING id, client_id, new_status, reason, scheduled_date, created_at
`

type CreateSchedueledClientStatusChangeParams struct {
	ClientID      int64       `json:"client_id"`
	NewStatus     *string     `json:"new_status"`
	Reason        *string     `json:"reason"`
	ScheduledDate pgtype.Date `json:"scheduled_date"`
}

func (q *Queries) CreateSchedueledClientStatusChange(ctx context.Context, arg CreateSchedueledClientStatusChangeParams) (ScheduledStatusChange, error) {
	row := q.db.QueryRow(ctx, createSchedueledClientStatusChange,
		arg.ClientID,
		arg.NewStatus,
		arg.Reason,
		arg.ScheduledDate,
	)
	var i ScheduledStatusChange
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.NewStatus,
		&i.Reason,
		&i.ScheduledDate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteClientDocument = `-- name: DeleteClientDocument :one
DELETE FROM client_documents
WHERE attachment_uuid = $1
RETURNING id, attachment_uuid, client_id, label
`

func (q *Queries) DeleteClientDocument(ctx context.Context, attachmentUuid *uuid.UUID) (ClientDocument, error) {
	row := q.db.QueryRow(ctx, deleteClientDocument, attachmentUuid)
	var i ClientDocument
	err := row.Scan(
		&i.ID,
		&i.AttachmentUuid,
		&i.ClientID,
		&i.Label,
	)
	return i, err
}

const getClientAddresses = `-- name: GetClientAddresses :one
SELECT addresses
FROM client_details
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClientAddresses(ctx context.Context, id int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getClientAddresses, id)
	var addresses []byte
	err := row.Scan(&addresses)
	return addresses, err
}

const getClientCounts = `-- name: GetClientCounts :one
SELECT 
    COUNT(*) AS total_clients,
    COUNT(*) FILTER (WHERE status = 'In Care') AS clients_in_care,
    COUNT(*) FILTER (WHERE status = 'On Waiting List') AS clients_on_waiting_list,
    COUNT(*) FILTER (WHERE status = 'Out Of Care') AS clients_out_of_care
FROM client_details
`

type GetClientCountsRow struct {
	TotalClients         int64 `json:"total_clients"`
	ClientsInCare        int64 `json:"clients_in_care"`
	ClientsOnWaitingList int64 `json:"clients_on_waiting_list"`
	ClientsOutOfCare     int64 `json:"clients_out_of_care"`
}

func (q *Queries) GetClientCounts(ctx context.Context) (GetClientCountsRow, error) {
	row := q.db.QueryRow(ctx, getClientCounts)
	var i GetClientCountsRow
	err := row.Scan(
		&i.TotalClients,
		&i.ClientsInCare,
		&i.ClientsOnWaitingList,
		&i.ClientsOutOfCare,
	)
	return i, err
}

const getClientDetails = `-- name: GetClientDetails :one
SELECT c.id, c.intake_form_id, c.first_name, c.last_name, c.date_of_birth, c.identity, c.status, c.bsn, c.bsn_verified_by, c.source, c.birthplace, c.email, c.phone_number, c.organisation, c.departement, c.gender, c.filenumber, c.profile_picture, c.infix, c.created_at, c.sender_id, c.location_id, c.departure_reason, c.departure_report, c.gps_position, c.maturity_domains, c.addresses, c.legal_measure, c.has_untaken_medications, c.education_currently_enrolled, c.education_institution, c.education_mentor_name, c.education_mentor_phone, c.education_mentor_email, c.education_additional_notes, c.education_level, c.work_currently_employed, c.work_current_employer, c.work_current_employer_phone, c.work_current_employer_email, c.work_current_position, c.work_start_date, c.work_additional_notes, c.living_situation, c.living_situation_notes, c.risk_aggressive_behavior, c.risk_suicidal_selfharm, c.risk_substance_abuse, c.risk_psychiatric_issues, c.risk_criminal_history, c.risk_flight_behavior, c.risk_weapon_possession, c.risk_sexual_behavior, c.risk_day_night_rhythm, c.risk_other, c.risk_other_description, c.risk_additional_notes,
       ep.first_name AS bsn_verified_by_first_name,
       ep.last_name AS bsn_verified_by_last_name
FROM client_details c
LEFT JOIN employee_profile ep ON c.bsn_verified_by = ep.id
WHERE c.id = $1 LIMIT 1
`

type GetClientDetailsRow struct {
	ID                         int64              `json:"id"`
	IntakeFormID               *int64             `json:"intake_form_id"`
	FirstName                  string             `json:"first_name"`
	LastName                   string             `json:"last_name"`
	DateOfBirth                pgtype.Date        `json:"date_of_birth"`
	Identity                   bool               `json:"identity"`
	Status                     *string            `json:"status"`
	Bsn                        *string            `json:"bsn"`
	BsnVerifiedBy              *int64             `json:"bsn_verified_by"`
	Source                     *string            `json:"source"`
	Birthplace                 *string            `json:"birthplace"`
	Email                      string             `json:"email"`
	PhoneNumber                *string            `json:"phone_number"`
	Organisation               *string            `json:"organisation"`
	Departement                *string            `json:"departement"`
	Gender                     string             `json:"gender"`
	Filenumber                 string             `json:"filenumber"`
	ProfilePicture             *string            `json:"profile_picture"`
	Infix                      *string            `json:"infix"`
	CreatedAt                  pgtype.Timestamptz `json:"created_at"`
	SenderID                   *int64             `json:"sender_id"`
	LocationID                 *int64             `json:"location_id"`
	DepartureReason            *string            `json:"departure_reason"`
	DepartureReport            *string            `json:"departure_report"`
	GpsPosition                []byte             `json:"gps_position"`
	MaturityDomains            []byte             `json:"maturity_domains"`
	Addresses                  []byte             `json:"addresses"`
	LegalMeasure               *string            `json:"legal_measure"`
	HasUntakenMedications      bool               `json:"has_untaken_medications"`
	EducationCurrentlyEnrolled bool               `json:"education_currently_enrolled"`
	EducationInstitution       *string            `json:"education_institution"`
	EducationMentorName        *string            `json:"education_mentor_name"`
	EducationMentorPhone       *string            `json:"education_mentor_phone"`
	EducationMentorEmail       *string            `json:"education_mentor_email"`
	EducationAdditionalNotes   *string            `json:"education_additional_notes"`
	EducationLevel             *string            `json:"education_level"`
	WorkCurrentlyEmployed      bool               `json:"work_currently_employed"`
	WorkCurrentEmployer        *string            `json:"work_current_employer"`
	WorkCurrentEmployerPhone   *string            `json:"work_current_employer_phone"`
	WorkCurrentEmployerEmail   *string            `json:"work_current_employer_email"`
	WorkCurrentPosition        *string            `json:"work_current_position"`
	WorkStartDate              pgtype.Date        `json:"work_start_date"`
	WorkAdditionalNotes        *string            `json:"work_additional_notes"`
	LivingSituation            *string            `json:"living_situation"`
	LivingSituationNotes       *string            `json:"living_situation_notes"`
	RiskAggressiveBehavior     *bool              `json:"risk_aggressive_behavior"`
	RiskSuicidalSelfharm       *bool              `json:"risk_suicidal_selfharm"`
	RiskSubstanceAbuse         *bool              `json:"risk_substance_abuse"`
	RiskPsychiatricIssues      *bool              `json:"risk_psychiatric_issues"`
	RiskCriminalHistory        *bool              `json:"risk_criminal_history"`
	RiskFlightBehavior         *bool              `json:"risk_flight_behavior"`
	RiskWeaponPossession       *bool              `json:"risk_weapon_possession"`
	RiskSexualBehavior         *bool              `json:"risk_sexual_behavior"`
	RiskDayNightRhythm         *bool              `json:"risk_day_night_rhythm"`
	RiskOther                  *bool              `json:"risk_other"`
	RiskOtherDescription       *string            `json:"risk_other_description"`
	RiskAdditionalNotes        *string            `json:"risk_additional_notes"`
	BsnVerifiedByFirstName     *string            `json:"bsn_verified_by_first_name"`
	BsnVerifiedByLastName      *string            `json:"bsn_verified_by_last_name"`
}

func (q *Queries) GetClientDetails(ctx context.Context, id int64) (GetClientDetailsRow, error) {
	row := q.db.QueryRow(ctx, getClientDetails, id)
	var i GetClientDetailsRow
	err := row.Scan(
		&i.ID,
		&i.IntakeFormID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Identity,
		&i.Status,
		&i.Bsn,
		&i.BsnVerifiedBy,
		&i.Source,
		&i.Birthplace,
		&i.Email,
		&i.PhoneNumber,
		&i.Organisation,
		&i.Departement,
		&i.Gender,
		&i.Filenumber,
		&i.ProfilePicture,
		&i.Infix,
		&i.CreatedAt,
		&i.SenderID,
		&i.LocationID,
		&i.DepartureReason,
		&i.DepartureReport,
		&i.GpsPosition,
		&i.MaturityDomains,
		&i.Addresses,
		&i.LegalMeasure,
		&i.HasUntakenMedications,
		&i.EducationCurrentlyEnrolled,
		&i.EducationInstitution,
		&i.EducationMentorName,
		&i.EducationMentorPhone,
		&i.EducationMentorEmail,
		&i.EducationAdditionalNotes,
		&i.EducationLevel,
		&i.WorkCurrentlyEmployed,
		&i.WorkCurrentEmployer,
		&i.WorkCurrentEmployerPhone,
		&i.WorkCurrentEmployerEmail,
		&i.WorkCurrentPosition,
		&i.WorkStartDate,
		&i.WorkAdditionalNotes,
		&i.LivingSituation,
		&i.LivingSituationNotes,
		&i.RiskAggressiveBehavior,
		&i.RiskSuicidalSelfharm,
		&i.RiskSubstanceAbuse,
		&i.RiskPsychiatricIssues,
		&i.RiskCriminalHistory,
		&i.RiskFlightBehavior,
		&i.RiskWeaponPossession,
		&i.RiskSexualBehavior,
		&i.RiskDayNightRhythm,
		&i.RiskOther,
		&i.RiskOtherDescription,
		&i.RiskAdditionalNotes,
		&i.BsnVerifiedByFirstName,
		&i.BsnVerifiedByLastName,
	)
	return i, err
}

const getMissingClientDocuments = `-- name: GetMissingClientDocuments :many
WITH all_labels AS (
    SELECT unnest(ARRAY[
        'registration_form', 'intake_form', 'consent_form',
        'risk_assessment', 'self_reliance_matrix', 'force_inventory',
        'care_plan', 'signaling_plan', 'cooperation_agreement'
    ]) AS label
),
client_labels AS (
    SELECT label
    FROM client_documents
    WHERE client_id = $1
)
SELECT al.label::text AS missing_label
FROM all_labels al
LEFT JOIN client_labels cl ON al.label = cl.label
WHERE cl.label IS NULL
`

func (q *Queries) GetMissingClientDocuments(ctx context.Context, clientID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getMissingClientDocuments, clientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var missing_label string
		if err := rows.Scan(&missing_label); err != nil {
			return nil, err
		}
		items = append(items, missing_label)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientDetails = `-- name: ListClientDetails :many
SELECT 
    id, intake_form_id, first_name, last_name, date_of_birth, identity, status, bsn, bsn_verified_by, source, birthplace, email, phone_number, organisation, departement, gender, filenumber, profile_picture, infix, created_at, sender_id, location_id, departure_reason, departure_report, gps_position, maturity_domains, addresses, legal_measure, has_untaken_medications, education_currently_enrolled, education_institution, education_mentor_name, education_mentor_phone, education_mentor_email, education_additional_notes, education_level, work_currently_employed, work_current_employer, work_current_employer_phone, work_current_employer_email, work_current_position, work_start_date, work_additional_notes, living_situation, living_situation_notes, risk_aggressive_behavior, risk_suicidal_selfharm, risk_substance_abuse, risk_psychiatric_issues, risk_criminal_history, risk_flight_behavior, risk_weapon_possession, risk_sexual_behavior, risk_day_night_rhythm, risk_other, risk_other_description, risk_additional_notes, 
    COUNT(*) OVER() AS total_count
FROM client_details
WHERE
    (status = $1 OR $1 IS NULL) AND
    (location_id = $2 OR $2 IS NULL) AND
    ($3::TEXT IS NULL OR 
        first_name ILIKE '%' || $3 || '%' OR
        last_name ILIKE '%' || $3 || '%' OR
        filenumber ILIKE '%' || $3 || '%' OR
        email ILIKE '%' || $3 || '%' OR
        phone_number ILIKE '%' || $3 || '%')
ORDER BY created_at DESC
LIMIT $5 OFFSET $4
`

type ListClientDetailsParams struct {
	Status     *string `json:"status"`
	LocationID *int64  `json:"location_id"`
	Search     *string `json:"search"`
	Offset     int32   `json:"offset"`
	Limit      int32   `json:"limit"`
}

type ListClientDetailsRow struct {
	ID                         int64              `json:"id"`
	IntakeFormID               *int64             `json:"intake_form_id"`
	FirstName                  string             `json:"first_name"`
	LastName                   string             `json:"last_name"`
	DateOfBirth                pgtype.Date        `json:"date_of_birth"`
	Identity                   bool               `json:"identity"`
	Status                     *string            `json:"status"`
	Bsn                        *string            `json:"bsn"`
	BsnVerifiedBy              *int64             `json:"bsn_verified_by"`
	Source                     *string            `json:"source"`
	Birthplace                 *string            `json:"birthplace"`
	Email                      string             `json:"email"`
	PhoneNumber                *string            `json:"phone_number"`
	Organisation               *string            `json:"organisation"`
	Departement                *string            `json:"departement"`
	Gender                     string             `json:"gender"`
	Filenumber                 string             `json:"filenumber"`
	ProfilePicture             *string            `json:"profile_picture"`
	Infix                      *string            `json:"infix"`
	CreatedAt                  pgtype.Timestamptz `json:"created_at"`
	SenderID                   *int64             `json:"sender_id"`
	LocationID                 *int64             `json:"location_id"`
	DepartureReason            *string            `json:"departure_reason"`
	DepartureReport            *string            `json:"departure_report"`
	GpsPosition                []byte             `json:"gps_position"`
	MaturityDomains            []byte             `json:"maturity_domains"`
	Addresses                  []byte             `json:"addresses"`
	LegalMeasure               *string            `json:"legal_measure"`
	HasUntakenMedications      bool               `json:"has_untaken_medications"`
	EducationCurrentlyEnrolled bool               `json:"education_currently_enrolled"`
	EducationInstitution       *string            `json:"education_institution"`
	EducationMentorName        *string            `json:"education_mentor_name"`
	EducationMentorPhone       *string            `json:"education_mentor_phone"`
	EducationMentorEmail       *string            `json:"education_mentor_email"`
	EducationAdditionalNotes   *string            `json:"education_additional_notes"`
	EducationLevel             *string            `json:"education_level"`
	WorkCurrentlyEmployed      bool               `json:"work_currently_employed"`
	WorkCurrentEmployer        *string            `json:"work_current_employer"`
	WorkCurrentEmployerPhone   *string            `json:"work_current_employer_phone"`
	WorkCurrentEmployerEmail   *string            `json:"work_current_employer_email"`
	WorkCurrentPosition        *string            `json:"work_current_position"`
	WorkStartDate              pgtype.Date        `json:"work_start_date"`
	WorkAdditionalNotes        *string            `json:"work_additional_notes"`
	LivingSituation            *string            `json:"living_situation"`
	LivingSituationNotes       *string            `json:"living_situation_notes"`
	RiskAggressiveBehavior     *bool              `json:"risk_aggressive_behavior"`
	RiskSuicidalSelfharm       *bool              `json:"risk_suicidal_selfharm"`
	RiskSubstanceAbuse         *bool              `json:"risk_substance_abuse"`
	RiskPsychiatricIssues      *bool              `json:"risk_psychiatric_issues"`
	RiskCriminalHistory        *bool              `json:"risk_criminal_history"`
	RiskFlightBehavior         *bool              `json:"risk_flight_behavior"`
	RiskWeaponPossession       *bool              `json:"risk_weapon_possession"`
	RiskSexualBehavior         *bool              `json:"risk_sexual_behavior"`
	RiskDayNightRhythm         *bool              `json:"risk_day_night_rhythm"`
	RiskOther                  *bool              `json:"risk_other"`
	RiskOtherDescription       *string            `json:"risk_other_description"`
	RiskAdditionalNotes        *string            `json:"risk_additional_notes"`
	TotalCount                 int64              `json:"total_count"`
}

func (q *Queries) ListClientDetails(ctx context.Context, arg ListClientDetailsParams) ([]ListClientDetailsRow, error) {
	rows, err := q.db.Query(ctx, listClientDetails,
		arg.Status,
		arg.LocationID,
		arg.Search,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListClientDetailsRow{}
	for rows.Next() {
		var i ListClientDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.IntakeFormID,
			&i.FirstName,
			&i.LastName,
			&i.DateOfBirth,
			&i.Identity,
			&i.Status,
			&i.Bsn,
			&i.BsnVerifiedBy,
			&i.Source,
			&i.Birthplace,
			&i.Email,
			&i.PhoneNumber,
			&i.Organisation,
			&i.Departement,
			&i.Gender,
			&i.Filenumber,
			&i.ProfilePicture,
			&i.Infix,
			&i.CreatedAt,
			&i.SenderID,
			&i.LocationID,
			&i.DepartureReason,
			&i.DepartureReport,
			&i.GpsPosition,
			&i.MaturityDomains,
			&i.Addresses,
			&i.LegalMeasure,
			&i.HasUntakenMedications,
			&i.EducationCurrentlyEnrolled,
			&i.EducationInstitution,
			&i.EducationMentorName,
			&i.EducationMentorPhone,
			&i.EducationMentorEmail,
			&i.EducationAdditionalNotes,
			&i.EducationLevel,
			&i.WorkCurrentlyEmployed,
			&i.WorkCurrentEmployer,
			&i.WorkCurrentEmployerPhone,
			&i.WorkCurrentEmployerEmail,
			&i.WorkCurrentPosition,
			&i.WorkStartDate,
			&i.WorkAdditionalNotes,
			&i.LivingSituation,
			&i.LivingSituationNotes,
			&i.RiskAggressiveBehavior,
			&i.RiskSuicidalSelfharm,
			&i.RiskSubstanceAbuse,
			&i.RiskPsychiatricIssues,
			&i.RiskCriminalHistory,
			&i.RiskFlightBehavior,
			&i.RiskWeaponPossession,
			&i.RiskSexualBehavior,
			&i.RiskDayNightRhythm,
			&i.RiskOther,
			&i.RiskOtherDescription,
			&i.RiskAdditionalNotes,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientDocuments = `-- name: ListClientDocuments :many
SELECT 
    cd.id, cd.attachment_uuid, cd.client_id, cd.label,
    a.uuid, a.name, a.file, a.size, a.is_used, a.tag, a.updated, a.created,
    COUNT(*) OVER() AS total_count
FROM client_documents cd
JOIN attachment_file a ON cd.attachment_uuid = a.uuid
WHERE client_id = $1
LIMIT $2 OFFSET $3
`

type ListClientDocumentsParams struct {
	ClientID int64 `json:"client_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

type ListClientDocumentsRow struct {
	ID             int64              `json:"id"`
	AttachmentUuid *uuid.UUID         `json:"attachment_uuid"`
	ClientID       int64              `json:"client_id"`
	Label          string             `json:"label"`
	Uuid           uuid.UUID          `json:"uuid"`
	Name           string             `json:"name"`
	File           string             `json:"file"`
	Size           int32              `json:"size"`
	IsUsed         bool               `json:"is_used"`
	Tag            *string            `json:"tag"`
	Updated        pgtype.Timestamptz `json:"updated"`
	Created        pgtype.Timestamptz `json:"created"`
	TotalCount     int64              `json:"total_count"`
}

func (q *Queries) ListClientDocuments(ctx context.Context, arg ListClientDocumentsParams) ([]ListClientDocumentsRow, error) {
	rows, err := q.db.Query(ctx, listClientDocuments, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListClientDocumentsRow{}
	for rows.Next() {
		var i ListClientDocumentsRow
		if err := rows.Scan(
			&i.ID,
			&i.AttachmentUuid,
			&i.ClientID,
			&i.Label,
			&i.Uuid,
			&i.Name,
			&i.File,
			&i.Size,
			&i.IsUsed,
			&i.Tag,
			&i.Updated,
			&i.Created,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientStatusHistory = `-- name: ListClientStatusHistory :many
SELECT id, client_id, old_status, new_status, changed_at, changed_by, reason FROM client_status_history
WHERE client_id = $1
ORDER BY changed_at DESC
LIMIT $2 OFFSET $3
`

type ListClientStatusHistoryParams struct {
	ClientID int64 `json:"client_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListClientStatusHistory(ctx context.Context, arg ListClientStatusHistoryParams) ([]ClientStatusHistory, error) {
	rows, err := q.db.Query(ctx, listClientStatusHistory, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ClientStatusHistory{}
	for rows.Next() {
		var i ClientStatusHistory
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.OldStatus,
			&i.NewStatus,
			&i.ChangedAt,
			&i.ChangedBy,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setClientProfilePicture = `-- name: SetClientProfilePicture :one
UPDATE client_details
SET profile_picture = $2
WHERE id = $1
RETURNING id, intake_form_id, first_name, last_name, date_of_birth, identity, status, bsn, bsn_verified_by, source, birthplace, email, phone_number, organisation, departement, gender, filenumber, profile_picture, infix, created_at, sender_id, location_id, departure_reason, departure_report, gps_position, maturity_domains, addresses, legal_measure, has_untaken_medications, education_currently_enrolled, education_institution, education_mentor_name, education_mentor_phone, education_mentor_email, education_additional_notes, education_level, work_currently_employed, work_current_employer, work_current_employer_phone, work_current_employer_email, work_current_position, work_start_date, work_additional_notes, living_situation, living_situation_notes, risk_aggressive_behavior, risk_suicidal_selfharm, risk_substance_abuse, risk_psychiatric_issues, risk_criminal_history, risk_flight_behavior, risk_weapon_possession, risk_sexual_behavior, risk_day_night_rhythm, risk_other, risk_other_description, risk_additional_notes
`

type SetClientProfilePictureParams struct {
	ID             int64   `json:"id"`
	ProfilePicture *string `json:"profile_picture"`
}

func (q *Queries) SetClientProfilePicture(ctx context.Context, arg SetClientProfilePictureParams) (ClientDetail, error) {
	row := q.db.QueryRow(ctx, setClientProfilePicture, arg.ID, arg.ProfilePicture)
	var i ClientDetail
	err := row.Scan(
		&i.ID,
		&i.IntakeFormID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Identity,
		&i.Status,
		&i.Bsn,
		&i.BsnVerifiedBy,
		&i.Source,
		&i.Birthplace,
		&i.Email,
		&i.PhoneNumber,
		&i.Organisation,
		&i.Departement,
		&i.Gender,
		&i.Filenumber,
		&i.ProfilePicture,
		&i.Infix,
		&i.CreatedAt,
		&i.SenderID,
		&i.LocationID,
		&i.DepartureReason,
		&i.DepartureReport,
		&i.GpsPosition,
		&i.MaturityDomains,
		&i.Addresses,
		&i.LegalMeasure,
		&i.HasUntakenMedications,
		&i.EducationCurrentlyEnrolled,
		&i.EducationInstitution,
		&i.EducationMentorName,
		&i.EducationMentorPhone,
		&i.EducationMentorEmail,
		&i.EducationAdditionalNotes,
		&i.EducationLevel,
		&i.WorkCurrentlyEmployed,
		&i.WorkCurrentEmployer,
		&i.WorkCurrentEmployerPhone,
		&i.WorkCurrentEmployerEmail,
		&i.WorkCurrentPosition,
		&i.WorkStartDate,
		&i.WorkAdditionalNotes,
		&i.LivingSituation,
		&i.LivingSituationNotes,
		&i.RiskAggressiveBehavior,
		&i.RiskSuicidalSelfharm,
		&i.RiskSubstanceAbuse,
		&i.RiskPsychiatricIssues,
		&i.RiskCriminalHistory,
		&i.RiskFlightBehavior,
		&i.RiskWeaponPossession,
		&i.RiskSexualBehavior,
		&i.RiskDayNightRhythm,
		&i.RiskOther,
		&i.RiskOtherDescription,
		&i.RiskAdditionalNotes,
	)
	return i, err
}

const updateClientDetails = `-- name: UpdateClientDetails :one
UPDATE client_details
SET 
    first_name = COALESCE ($2, first_name),
    last_name = COALESCE ($3, last_name),
    date_of_birth = COALESCE ($4, date_of_birth),
    "identity" = COALESCE ($5, "identity"),
    bsn = COALESCE ($6, bsn),
    bsn_verified_by = COALESCE ($7, bsn_verified_by),
    source = COALESCE ($8, source),
    birthplace = COALESCE ($9, birthplace),
    email = COALESCE ($10, email),
    phone_number = COALESCE ($11, phone_number),
    organisation = COALESCE ($12, organisation),
    departement = COALESCE ($13, departement),
    gender = COALESCE ($14, gender),
    filenumber = COALESCE ($15, filenumber),
    profile_picture = COALESCE ($16, profile_picture),
    infix = COALESCE ($17, infix),
    sender_id = COALESCE ($18, sender_id),
    location_id = COALESCE ($19, location_id),
    departure_reason = COALESCE ($20, departure_reason),
    departure_report = COALESCE ($21, departure_report),
    legal_measure = COALESCE ($22, legal_measure),
    education_currently_enrolled = COALESCE ($23, education_currently_enrolled),
    education_institution = COALESCE ($24, education_institution),
    education_mentor_name = COALESCE ($25, education_mentor_name),
    education_mentor_phone = COALESCE ($26, education_mentor_phone),
    education_mentor_email = COALESCE ($27, education_mentor_email),
    education_additional_notes = COALESCE ($28, education_additional_notes),
    education_level = COALESCE ($29, education_level),
    work_currently_employed = COALESCE ($30, work_currently_employed),
    work_current_employer = COALESCE ($31, work_current_employer),
    work_current_employer_phone = COALESCE ($32, work_current_employer_phone),
    work_current_employer_email = COALESCE ($33, work_current_employer_email),
    work_current_position = COALESCE ($34, work_current_position),
    work_start_date = COALESCE ($35, work_start_date),
    work_additional_notes = COALESCE ($36, work_additional_notes),
    living_situation = COALESCE ($37, living_situation),
    living_situation_notes = COALESCE ($38, living_situation_notes)

WHERE id = $1
RETURNING id, intake_form_id, first_name, last_name, date_of_birth, identity, status, bsn, bsn_verified_by, source, birthplace, email, phone_number, organisation, departement, gender, filenumber, profile_picture, infix, created_at, sender_id, location_id, departure_reason, departure_report, gps_position, maturity_domains, addresses, legal_measure, has_untaken_medications, education_currently_enrolled, education_institution, education_mentor_name, education_mentor_phone, education_mentor_email, education_additional_notes, education_level, work_currently_employed, work_current_employer, work_current_employer_phone, work_current_employer_email, work_current_position, work_start_date, work_additional_notes, living_situation, living_situation_notes, risk_aggressive_behavior, risk_suicidal_selfharm, risk_substance_abuse, risk_psychiatric_issues, risk_criminal_history, risk_flight_behavior, risk_weapon_possession, risk_sexual_behavior, risk_day_night_rhythm, risk_other, risk_other_description, risk_additional_notes
`

type UpdateClientDetailsParams struct {
	ID                         int64       `json:"id"`
	FirstName                  *string     `json:"first_name"`
	LastName                   *string     `json:"last_name"`
	DateOfBirth                pgtype.Date `json:"date_of_birth"`
	Identity                   *bool       `json:"identity"`
	Bsn                        *string     `json:"bsn"`
	BsnVerifiedBy              *int64      `json:"bsn_verified_by"`
	Source                     *string     `json:"source"`
	Birthplace                 *string     `json:"birthplace"`
	Email                      *string     `json:"email"`
	PhoneNumber                *string     `json:"phone_number"`
	Organisation               *string     `json:"organisation"`
	Departement                *string     `json:"departement"`
	Gender                     *string     `json:"gender"`
	Filenumber                 *string     `json:"filenumber"`
	ProfilePicture             *string     `json:"profile_picture"`
	Infix                      *string     `json:"infix"`
	SenderID                   *int64      `json:"sender_id"`
	LocationID                 *int64      `json:"location_id"`
	DepartureReason            *string     `json:"departure_reason"`
	DepartureReport            *string     `json:"departure_report"`
	LegalMeasure               *string     `json:"legal_measure"`
	EducationCurrentlyEnrolled *bool       `json:"education_currently_enrolled"`
	EducationInstitution       *string     `json:"education_institution"`
	EducationMentorName        *string     `json:"education_mentor_name"`
	EducationMentorPhone       *string     `json:"education_mentor_phone"`
	EducationMentorEmail       *string     `json:"education_mentor_email"`
	EducationAdditionalNotes   *string     `json:"education_additional_notes"`
	EducationLevel             *string     `json:"education_level"`
	WorkCurrentlyEmployed      *bool       `json:"work_currently_employed"`
	WorkCurrentEmployer        *string     `json:"work_current_employer"`
	WorkCurrentEmployerPhone   *string     `json:"work_current_employer_phone"`
	WorkCurrentEmployerEmail   *string     `json:"work_current_employer_email"`
	WorkCurrentPosition        *string     `json:"work_current_position"`
	WorkStartDate              pgtype.Date `json:"work_start_date"`
	WorkAdditionalNotes        *string     `json:"work_additional_notes"`
	LivingSituation            *string     `json:"living_situation"`
	LivingSituationNotes       *string     `json:"living_situation_notes"`
}

func (q *Queries) UpdateClientDetails(ctx context.Context, arg UpdateClientDetailsParams) (ClientDetail, error) {
	row := q.db.QueryRow(ctx, updateClientDetails,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Identity,
		arg.Bsn,
		arg.BsnVerifiedBy,
		arg.Source,
		arg.Birthplace,
		arg.Email,
		arg.PhoneNumber,
		arg.Organisation,
		arg.Departement,
		arg.Gender,
		arg.Filenumber,
		arg.ProfilePicture,
		arg.Infix,
		arg.SenderID,
		arg.LocationID,
		arg.DepartureReason,
		arg.DepartureReport,
		arg.LegalMeasure,
		arg.EducationCurrentlyEnrolled,
		arg.EducationInstitution,
		arg.EducationMentorName,
		arg.EducationMentorPhone,
		arg.EducationMentorEmail,
		arg.EducationAdditionalNotes,
		arg.EducationLevel,
		arg.WorkCurrentlyEmployed,
		arg.WorkCurrentEmployer,
		arg.WorkCurrentEmployerPhone,
		arg.WorkCurrentEmployerEmail,
		arg.WorkCurrentPosition,
		arg.WorkStartDate,
		arg.WorkAdditionalNotes,
		arg.LivingSituation,
		arg.LivingSituationNotes,
	)
	var i ClientDetail
	err := row.Scan(
		&i.ID,
		&i.IntakeFormID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Identity,
		&i.Status,
		&i.Bsn,
		&i.BsnVerifiedBy,
		&i.Source,
		&i.Birthplace,
		&i.Email,
		&i.PhoneNumber,
		&i.Organisation,
		&i.Departement,
		&i.Gender,
		&i.Filenumber,
		&i.ProfilePicture,
		&i.Infix,
		&i.CreatedAt,
		&i.SenderID,
		&i.LocationID,
		&i.DepartureReason,
		&i.DepartureReport,
		&i.GpsPosition,
		&i.MaturityDomains,
		&i.Addresses,
		&i.LegalMeasure,
		&i.HasUntakenMedications,
		&i.EducationCurrentlyEnrolled,
		&i.EducationInstitution,
		&i.EducationMentorName,
		&i.EducationMentorPhone,
		&i.EducationMentorEmail,
		&i.EducationAdditionalNotes,
		&i.EducationLevel,
		&i.WorkCurrentlyEmployed,
		&i.WorkCurrentEmployer,
		&i.WorkCurrentEmployerPhone,
		&i.WorkCurrentEmployerEmail,
		&i.WorkCurrentPosition,
		&i.WorkStartDate,
		&i.WorkAdditionalNotes,
		&i.LivingSituation,
		&i.LivingSituationNotes,
		&i.RiskAggressiveBehavior,
		&i.RiskSuicidalSelfharm,
		&i.RiskSubstanceAbuse,
		&i.RiskPsychiatricIssues,
		&i.RiskCriminalHistory,
		&i.RiskFlightBehavior,
		&i.RiskWeaponPossession,
		&i.RiskSexualBehavior,
		&i.RiskDayNightRhythm,
		&i.RiskOther,
		&i.RiskOtherDescription,
		&i.RiskAdditionalNotes,
	)
	return i, err
}

const updateClientStatus = `-- name: UpdateClientStatus :one
UPDATE client_details
SET status = $2
WHERE id = $1
RETURNING id, intake_form_id, first_name, last_name, date_of_birth, identity, status, bsn, bsn_verified_by, source, birthplace, email, phone_number, organisation, departement, gender, filenumber, profile_picture, infix, created_at, sender_id, location_id, departure_reason, departure_report, gps_position, maturity_domains, addresses, legal_measure, has_untaken_medications, education_currently_enrolled, education_institution, education_mentor_name, education_mentor_phone, education_mentor_email, education_additional_notes, education_level, work_currently_employed, work_current_employer, work_current_employer_phone, work_current_employer_email, work_current_position, work_start_date, work_additional_notes, living_situation, living_situation_notes, risk_aggressive_behavior, risk_suicidal_selfharm, risk_substance_abuse, risk_psychiatric_issues, risk_criminal_history, risk_flight_behavior, risk_weapon_possession, risk_sexual_behavior, risk_day_night_rhythm, risk_other, risk_other_description, risk_additional_notes
`

type UpdateClientStatusParams struct {
	ID     int64   `json:"id"`
	Status *string `json:"status"`
}

func (q *Queries) UpdateClientStatus(ctx context.Context, arg UpdateClientStatusParams) (ClientDetail, error) {
	row := q.db.QueryRow(ctx, updateClientStatus, arg.ID, arg.Status)
	var i ClientDetail
	err := row.Scan(
		&i.ID,
		&i.IntakeFormID,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Identity,
		&i.Status,
		&i.Bsn,
		&i.BsnVerifiedBy,
		&i.Source,
		&i.Birthplace,
		&i.Email,
		&i.PhoneNumber,
		&i.Organisation,
		&i.Departement,
		&i.Gender,
		&i.Filenumber,
		&i.ProfilePicture,
		&i.Infix,
		&i.CreatedAt,
		&i.SenderID,
		&i.LocationID,
		&i.DepartureReason,
		&i.DepartureReport,
		&i.GpsPosition,
		&i.MaturityDomains,
		&i.Addresses,
		&i.LegalMeasure,
		&i.HasUntakenMedications,
		&i.EducationCurrentlyEnrolled,
		&i.EducationInstitution,
		&i.EducationMentorName,
		&i.EducationMentorPhone,
		&i.EducationMentorEmail,
		&i.EducationAdditionalNotes,
		&i.EducationLevel,
		&i.WorkCurrentlyEmployed,
		&i.WorkCurrentEmployer,
		&i.WorkCurrentEmployerPhone,
		&i.WorkCurrentEmployerEmail,
		&i.WorkCurrentPosition,
		&i.WorkStartDate,
		&i.WorkAdditionalNotes,
		&i.LivingSituation,
		&i.LivingSituationNotes,
		&i.RiskAggressiveBehavior,
		&i.RiskSuicidalSelfharm,
		&i.RiskSubstanceAbuse,
		&i.RiskPsychiatricIssues,
		&i.RiskCriminalHistory,
		&i.RiskFlightBehavior,
		&i.RiskWeaponPossession,
		&i.RiskSexualBehavior,
		&i.RiskDayNightRhythm,
		&i.RiskOther,
		&i.RiskOtherDescription,
		&i.RiskAdditionalNotes,
	)
	return i, err
}
