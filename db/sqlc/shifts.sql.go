// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: shifts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShift = `-- name: CreateShift :one
INSERT INTO location_shift (
    location_id,
    shift_name,
    start_time,
    end_time
) VALUES (
    $1, $2, $3, $4
) RETURNING id, location_id, shift_name, start_time, end_time, created_at, updated_at
`

type CreateShiftParams struct {
	LocationID int64       `json:"location_id"`
	ShiftName  string      `json:"shift_name"`
	StartTime  pgtype.Time `json:"start_time"`
	EndTime    pgtype.Time `json:"end_time"`
}

func (q *Queries) CreateShift(ctx context.Context, arg CreateShiftParams) (LocationShift, error) {
	row := q.db.QueryRow(ctx, createShift,
		arg.LocationID,
		arg.ShiftName,
		arg.StartTime,
		arg.EndTime,
	)
	var i LocationShift
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ShiftName,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShift = `-- name: DeleteShift :exec
DELETE FROM location_shift
WHERE id = $1
`

func (q *Queries) DeleteShift(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteShift, id)
	return err
}

const getShiftByID = `-- name: GetShiftByID :one
SELECT id, location_id, shift_name, start_time, end_time, created_at, updated_at FROM location_shift
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetShiftByID(ctx context.Context, id int64) (LocationShift, error) {
	row := q.db.QueryRow(ctx, getShiftByID, id)
	var i LocationShift
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ShiftName,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getShiftsByLocationID = `-- name: GetShiftsByLocationID :many
SELECT id, location_id, shift_name, start_time, end_time, created_at, updated_at FROM location_shift
WHERE location_id = $1
`

func (q *Queries) GetShiftsByLocationID(ctx context.Context, locationID int64) ([]LocationShift, error) {
	rows, err := q.db.Query(ctx, getShiftsByLocationID, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocationShift
	for rows.Next() {
		var i LocationShift
		if err := rows.Scan(
			&i.ID,
			&i.LocationID,
			&i.ShiftName,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShift = `-- name: UpdateShift :one
UPDATE location_shift
SET
    shift_name = COALESCE($2, shift_name),
    start_time = COALESCE($3, start_time),
    end_time = COALESCE($4, end_time),
    updated_at = NOW()
WHERE id = $1
RETURNING id, location_id, shift_name, start_time, end_time, created_at, updated_at
`

type UpdateShiftParams struct {
	ID        int64       `json:"id"`
	ShiftName string      `json:"shift_name"`
	StartTime pgtype.Time `json:"start_time"`
	EndTime   pgtype.Time `json:"end_time"`
}

func (q *Queries) UpdateShift(ctx context.Context, arg UpdateShiftParams) (LocationShift, error) {
	row := q.db.QueryRow(ctx, updateShift,
		arg.ID,
		arg.ShiftName,
		arg.StartTime,
		arg.EndTime,
	)
	var i LocationShift
	err := row.Scan(
		&i.ID,
		&i.LocationID,
		&i.ShiftName,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
