// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invoice_template.sql

package db

import (
	"context"
)

const getAllTemplateItems = `-- name: GetAllTemplateItems :many
SELECT id, item_tag, description, source_table, source_column
FROM template_items
ORDER BY source_table
`

func (q *Queries) GetAllTemplateItems(ctx context.Context) ([]TemplateItem, error) {
	rows, err := q.db.Query(ctx, getAllTemplateItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TemplateItem{}
	for rows.Next() {
		var i TemplateItem
		if err := rows.Scan(
			&i.ID,
			&i.ItemTag,
			&i.Description,
			&i.SourceTable,
			&i.SourceColumn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplateItemsByIds = `-- name: GetTemplateItemsByIds :many
SELECT id
FROM template_items
WHERE id = ANY($1::bigint[])
`

func (q *Queries) GetTemplateItemsByIds(ctx context.Context, dollar_1 []int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getTemplateItemsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemplateItemsBySourceTable = `-- name: GetTemplateItemsBySourceTable :many
SELECT id, item_tag, description, source_table, source_column
FROM template_items
WHERE id = ANY($1::bigint[])
ORDER BY source_table
`

func (q *Queries) GetTemplateItemsBySourceTable(ctx context.Context, dollar_1 []int64) ([]TemplateItem, error) {
	rows, err := q.db.Query(ctx, getTemplateItemsBySourceTable, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TemplateItem{}
	for rows.Next() {
		var i TemplateItem
		if err := rows.Scan(
			&i.ID,
			&i.ItemTag,
			&i.Description,
			&i.SourceTable,
			&i.SourceColumn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
