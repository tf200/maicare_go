// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contract.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createContract = `-- name: CreateContract :one
INSERT INTO contract (
    type_id,
    start_date,
    end_date,
    reminder_period,
    tax,
    price,
    price_frequency,
    hours,
    hours_type,
    care_name,
    care_type,
    client_id,
    sender_id,
    attachment_ids,
    financing_act,
    financing_option
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
)
RETURNING id, type_id, status, start_date, end_date, reminder_period, tax, price, price_frequency, hours, hours_type, care_name, care_type, client_id, sender_id, attachment_ids, financing_act, financing_option, departure_reason, departure_report, updated, created
`

type CreateContractParams struct {
	TypeID          *int64             `json:"type_id"`
	StartDate       pgtype.Timestamptz `json:"start_date"`
	EndDate         pgtype.Timestamptz `json:"end_date"`
	ReminderPeriod  int32              `json:"reminder_period"`
	Tax             *int32             `json:"tax"`
	Price           float64            `json:"price"`
	PriceFrequency  string             `json:"price_frequency"`
	Hours           *int32             `json:"hours"`
	HoursType       string             `json:"hours_type"`
	CareName        string             `json:"care_name"`
	CareType        string             `json:"care_type"`
	ClientID        int64              `json:"client_id"`
	SenderID        *int64             `json:"sender_id"`
	AttachmentIds   []uuid.UUID        `json:"attachment_ids"`
	FinancingAct    string             `json:"financing_act"`
	FinancingOption string             `json:"financing_option"`
}

func (q *Queries) CreateContract(ctx context.Context, arg CreateContractParams) (Contract, error) {
	row := q.db.QueryRow(ctx, createContract,
		arg.TypeID,
		arg.StartDate,
		arg.EndDate,
		arg.ReminderPeriod,
		arg.Tax,
		arg.Price,
		arg.PriceFrequency,
		arg.Hours,
		arg.HoursType,
		arg.CareName,
		arg.CareType,
		arg.ClientID,
		arg.SenderID,
		arg.AttachmentIds,
		arg.FinancingAct,
		arg.FinancingOption,
	)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.TypeID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.ReminderPeriod,
		&i.Tax,
		&i.Price,
		&i.PriceFrequency,
		&i.Hours,
		&i.HoursType,
		&i.CareName,
		&i.CareType,
		&i.ClientID,
		&i.SenderID,
		&i.AttachmentIds,
		&i.FinancingAct,
		&i.FinancingOption,
		&i.DepartureReason,
		&i.DepartureReport,
		&i.Updated,
		&i.Created,
	)
	return i, err
}

const createContractType = `-- name: CreateContractType :one
INSERT INTO contract_type (name)
VALUES
    ($1)
RETURNING id, name
`

func (q *Queries) CreateContractType(ctx context.Context, name string) (ContractType, error) {
	row := q.db.QueryRow(ctx, createContractType, name)
	var i ContractType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteContractType = `-- name: DeleteContractType :exec
DELETE FROM contract_type
WHERE id = $1
`

func (q *Queries) DeleteContractType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteContractType, id)
	return err
}

const getClientContract = `-- name: GetClientContract :one
SELECT id, type_id, status, start_date, end_date, reminder_period, tax, price, price_frequency, hours, hours_type, care_name, care_type, client_id, sender_id, attachment_ids, financing_act, financing_option, departure_reason, departure_report, updated, created FROM contract
WHERE client_id = $1
limit 1
`

func (q *Queries) GetClientContract(ctx context.Context, clientID int64) (Contract, error) {
	row := q.db.QueryRow(ctx, getClientContract, clientID)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.TypeID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.ReminderPeriod,
		&i.Tax,
		&i.Price,
		&i.PriceFrequency,
		&i.Hours,
		&i.HoursType,
		&i.CareName,
		&i.CareType,
		&i.ClientID,
		&i.SenderID,
		&i.AttachmentIds,
		&i.FinancingAct,
		&i.FinancingOption,
		&i.DepartureReason,
		&i.DepartureReport,
		&i.Updated,
		&i.Created,
	)
	return i, err
}

const getSenderContracts = `-- name: GetSenderContracts :many
SELECT id, type_id, status, start_date, end_date, reminder_period, tax, price, price_frequency, hours, hours_type, care_name, care_type, client_id, sender_id, attachment_ids, financing_act, financing_option, departure_reason, departure_report, updated, created FROM contract
WHERE sender_id = $1
`

func (q *Queries) GetSenderContracts(ctx context.Context, senderID *int64) ([]Contract, error) {
	rows, err := q.db.Query(ctx, getSenderContracts, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.TypeID,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.ReminderPeriod,
			&i.Tax,
			&i.Price,
			&i.PriceFrequency,
			&i.Hours,
			&i.HoursType,
			&i.CareName,
			&i.CareType,
			&i.ClientID,
			&i.SenderID,
			&i.AttachmentIds,
			&i.FinancingAct,
			&i.FinancingOption,
			&i.DepartureReason,
			&i.DepartureReport,
			&i.Updated,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContractTypes = `-- name: ListContractTypes :many
SELECT id, name FROM contract_type
`

func (q *Queries) ListContractTypes(ctx context.Context) ([]ContractType, error) {
	rows, err := q.db.Query(ctx, listContractTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContractType
	for rows.Next() {
		var i ContractType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContracts = `-- name: ListContracts :many
SELECT id, type_id, status, start_date, end_date, reminder_period, tax, price, price_frequency, hours, hours_type, care_name, care_type, client_id, sender_id, attachment_ids, financing_act, financing_option, departure_reason, departure_report, updated, created FROM contract
`

func (q *Queries) ListContracts(ctx context.Context) ([]Contract, error) {
	rows, err := q.db.Query(ctx, listContracts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.TypeID,
			&i.Status,
			&i.StartDate,
			&i.EndDate,
			&i.ReminderPeriod,
			&i.Tax,
			&i.Price,
			&i.PriceFrequency,
			&i.Hours,
			&i.HoursType,
			&i.CareName,
			&i.CareType,
			&i.ClientID,
			&i.SenderID,
			&i.AttachmentIds,
			&i.FinancingAct,
			&i.FinancingOption,
			&i.DepartureReason,
			&i.DepartureReport,
			&i.Updated,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
