// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: client_network.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmemrgencyContact = `-- name: CreateEmemrgencyContact :one
INSERT INTO client_emergency_contact (
    client_id,
    first_name,
    last_name,
    email,
    phone_number,
    address,
    relationship,
    relation_status,
    medical_reports,
    incidents_reports,
    goals_reports
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, client_id, first_name, last_name, email, phone_number, address, relationship, relation_status, created_at, is_verified, medical_reports, incidents_reports, goals_reports
`

type CreateEmemrgencyContactParams struct {
	ClientID         int64   `json:"client_id"`
	FirstName        *string `json:"first_name"`
	LastName         *string `json:"last_name"`
	Email            *string `json:"email"`
	PhoneNumber      *string `json:"phone_number"`
	Address          *string `json:"address"`
	Relationship     *string `json:"relationship"`
	RelationStatus   *string `json:"relation_status"`
	MedicalReports   bool    `json:"medical_reports"`
	IncidentsReports bool    `json:"incidents_reports"`
	GoalsReports     bool    `json:"goals_reports"`
}

func (q *Queries) CreateEmemrgencyContact(ctx context.Context, arg CreateEmemrgencyContactParams) (ClientEmergencyContact, error) {
	row := q.db.QueryRow(ctx, createEmemrgencyContact,
		arg.ClientID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.Relationship,
		arg.RelationStatus,
		arg.MedicalReports,
		arg.IncidentsReports,
		arg.GoalsReports,
	)
	var i ClientEmergencyContact
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Relationship,
		&i.RelationStatus,
		&i.CreatedAt,
		&i.IsVerified,
		&i.MedicalReports,
		&i.IncidentsReports,
		&i.GoalsReports,
	)
	return i, err
}

const deleteEmergencyContact = `-- name: DeleteEmergencyContact :one
DELETE FROM client_emergency_contact
WHERE id = $1
RETURNING id, client_id, first_name, last_name, email, phone_number, address, relationship, relation_status, created_at, is_verified, medical_reports, incidents_reports, goals_reports
`

func (q *Queries) DeleteEmergencyContact(ctx context.Context, id int64) (ClientEmergencyContact, error) {
	row := q.db.QueryRow(ctx, deleteEmergencyContact, id)
	var i ClientEmergencyContact
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Relationship,
		&i.RelationStatus,
		&i.CreatedAt,
		&i.IsVerified,
		&i.MedicalReports,
		&i.IncidentsReports,
		&i.GoalsReports,
	)
	return i, err
}

const getEmergencyContact = `-- name: GetEmergencyContact :one
SELECT id, client_id, first_name, last_name, email, phone_number, address, relationship, relation_status, created_at, is_verified, medical_reports, incidents_reports, goals_reports FROM client_emergency_contact
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmergencyContact(ctx context.Context, id int64) (ClientEmergencyContact, error) {
	row := q.db.QueryRow(ctx, getEmergencyContact, id)
	var i ClientEmergencyContact
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Relationship,
		&i.RelationStatus,
		&i.CreatedAt,
		&i.IsVerified,
		&i.MedicalReports,
		&i.IncidentsReports,
		&i.GoalsReports,
	)
	return i, err
}

const listEmergencyContacts = `-- name: ListEmergencyContacts :many
SELECT 
    ec.id, ec.client_id, ec.first_name, ec.last_name, ec.email, ec.phone_number, ec.address, ec.relationship, ec.relation_status, ec.created_at, ec.is_verified, ec.medical_reports, ec.incidents_reports, ec.goals_reports,
    COUNT(*) OVER() as total_count
FROM client_emergency_contact ec
WHERE client_id = $3
    AND (
        LOWER(first_name) LIKE LOWER(CONCAT('%', $4::text, '%')) OR
        LOWER(last_name) LIKE LOWER(CONCAT('%', $4::text, '%'))
    )
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListEmergencyContactsParams struct {
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
	ClientID int64  `json:"client_id"`
	Search   string `json:"search"`
}

type ListEmergencyContactsRow struct {
	ID               int64              `json:"id"`
	ClientID         int64              `json:"client_id"`
	FirstName        *string            `json:"first_name"`
	LastName         *string            `json:"last_name"`
	Email            *string            `json:"email"`
	PhoneNumber      *string            `json:"phone_number"`
	Address          *string            `json:"address"`
	Relationship     *string            `json:"relationship"`
	RelationStatus   *string            `json:"relation_status"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	IsVerified       bool               `json:"is_verified"`
	MedicalReports   bool               `json:"medical_reports"`
	IncidentsReports bool               `json:"incidents_reports"`
	GoalsReports     bool               `json:"goals_reports"`
	TotalCount       int64              `json:"total_count"`
}

func (q *Queries) ListEmergencyContacts(ctx context.Context, arg ListEmergencyContactsParams) ([]ListEmergencyContactsRow, error) {
	rows, err := q.db.Query(ctx, listEmergencyContacts,
		arg.Limit,
		arg.Offset,
		arg.ClientID,
		arg.Search,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEmergencyContactsRow
	for rows.Next() {
		var i ListEmergencyContactsRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.Address,
			&i.Relationship,
			&i.RelationStatus,
			&i.CreatedAt,
			&i.IsVerified,
			&i.MedicalReports,
			&i.IncidentsReports,
			&i.GoalsReports,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmergencyContact = `-- name: UpdateEmergencyContact :one
UPDATE client_emergency_contact
SET
    first_name = COALESCE($2, first_name),
    last_name = COALESCE($3, last_name),
    email = COALESCE($4, email),
    phone_number = COALESCE($5, phone_number),
    address = COALESCE($6, address),
    relationship = COALESCE($7, relationship),
    relation_status = COALESCE($8, relation_status),
    medical_reports = COALESCE($9, medical_reports),
    incidents_reports = COALESCE($10, incidents_reports),
    goals_reports = COALESCE($11, goals_reports)
WHERE id = $1
RETURNING id, client_id, first_name, last_name, email, phone_number, address, relationship, relation_status, created_at, is_verified, medical_reports, incidents_reports, goals_reports
`

type UpdateEmergencyContactParams struct {
	ID               int64   `json:"id"`
	FirstName        *string `json:"first_name"`
	LastName         *string `json:"last_name"`
	Email            *string `json:"email"`
	PhoneNumber      *string `json:"phone_number"`
	Address          *string `json:"address"`
	Relationship     *string `json:"relationship"`
	RelationStatus   *string `json:"relation_status"`
	MedicalReports   *bool   `json:"medical_reports"`
	IncidentsReports *bool   `json:"incidents_reports"`
	GoalsReports     *bool   `json:"goals_reports"`
}

func (q *Queries) UpdateEmergencyContact(ctx context.Context, arg UpdateEmergencyContactParams) (ClientEmergencyContact, error) {
	row := q.db.QueryRow(ctx, updateEmergencyContact,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.Address,
		arg.Relationship,
		arg.RelationStatus,
		arg.MedicalReports,
		arg.IncidentsReports,
		arg.GoalsReports,
	)
	var i ClientEmergencyContact
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Address,
		&i.Relationship,
		&i.RelationStatus,
		&i.CreatedAt,
		&i.IsVerified,
		&i.MedicalReports,
		&i.IncidentsReports,
		&i.GoalsReports,
	)
	return i, err
}
