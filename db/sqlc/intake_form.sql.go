// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: intake_form.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createIntakeForm = `-- name: CreateIntakeForm :one
INSERT INTO intake_forms (
    intake_form_token,
    first_name,
    last_name,
    date_of_birth,
    phone_number,
    gender,
    place_of_birth,
    representative_first_name,
    representative_last_name,
    representative_phone_number,
    representative_email,
    representative_relationship,
    representative_address,
    attachement_ids
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) RETURNING id, intake_form_token, first_name, last_name, date_of_birth, phone_number, gender, place_of_birth, representative_first_name, representative_last_name, representative_phone_number, representative_email, representative_relationship, representative_address, attachement_ids
`

type CreateIntakeFormParams struct {
	IntakeFormToken            string      `json:"intake_form_token"`
	FirstName                  string      `json:"first_name"`
	LastName                   string      `json:"last_name"`
	DateOfBirth                pgtype.Date `json:"date_of_birth"`
	PhoneNumber                string      `json:"phone_number"`
	Gender                     string      `json:"gender"`
	PlaceOfBirth               string      `json:"place_of_birth"`
	RepresentativeFirstName    string      `json:"representative_first_name"`
	RepresentativeLastName     string      `json:"representative_last_name"`
	RepresentativePhoneNumber  string      `json:"representative_phone_number"`
	RepresentativeEmail        string      `json:"representative_email"`
	RepresentativeRelationship string      `json:"representative_relationship"`
	RepresentativeAddress      string      `json:"representative_address"`
	AttachementIds             []uuid.UUID `json:"attachement_ids"`
}

func (q *Queries) CreateIntakeForm(ctx context.Context, arg CreateIntakeFormParams) (IntakeForm, error) {
	row := q.db.QueryRow(ctx, createIntakeForm,
		arg.IntakeFormToken,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.PhoneNumber,
		arg.Gender,
		arg.PlaceOfBirth,
		arg.RepresentativeFirstName,
		arg.RepresentativeLastName,
		arg.RepresentativePhoneNumber,
		arg.RepresentativeEmail,
		arg.RepresentativeRelationship,
		arg.RepresentativeAddress,
		arg.AttachementIds,
	)
	var i IntakeForm
	err := row.Scan(
		&i.ID,
		&i.IntakeFormToken,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.PhoneNumber,
		&i.Gender,
		&i.PlaceOfBirth,
		&i.RepresentativeFirstName,
		&i.RepresentativeLastName,
		&i.RepresentativePhoneNumber,
		&i.RepresentativeEmail,
		&i.RepresentativeRelationship,
		&i.RepresentativeAddress,
		&i.AttachementIds,
	)
	return i, err
}

const createIntakeFormToken = `-- name: CreateIntakeFormToken :one
INSERT INTO intake_form_tokens(
    token,
    expires_at
) VALUES (
    $1,
    $2
)
RETURNING token, expires_at, is_revoked, created_at
`

type CreateIntakeFormTokenParams struct {
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateIntakeFormToken(ctx context.Context, arg CreateIntakeFormTokenParams) (IntakeFormToken, error) {
	row := q.db.QueryRow(ctx, createIntakeFormToken, arg.Token, arg.ExpiresAt)
	var i IntakeFormToken
	err := row.Scan(
		&i.Token,
		&i.ExpiresAt,
		&i.IsRevoked,
		&i.CreatedAt,
	)
	return i, err
}

const getIntakeFormToken = `-- name: GetIntakeFormToken :one
SELECT token, expires_at, is_revoked, created_at FROM intake_form_tokens WHERE token = $1
`

func (q *Queries) GetIntakeFormToken(ctx context.Context, token string) (IntakeFormToken, error) {
	row := q.db.QueryRow(ctx, getIntakeFormToken, token)
	var i IntakeFormToken
	err := row.Scan(
		&i.Token,
		&i.ExpiresAt,
		&i.IsRevoked,
		&i.CreatedAt,
	)
	return i, err
}

const revokedIntakeFormToken = `-- name: RevokedIntakeFormToken :one
UPDATE intake_form_tokens
SET
    is_revoked = true
WHERE token = $1
RETURNING token, expires_at, is_revoked, created_at
`

func (q *Queries) RevokedIntakeFormToken(ctx context.Context, token string) (IntakeFormToken, error) {
	row := q.db.QueryRow(ctx, revokedIntakeFormToken, token)
	var i IntakeFormToken
	err := row.Scan(
		&i.Token,
		&i.ExpiresAt,
		&i.IsRevoked,
		&i.CreatedAt,
	)
	return i, err
}
