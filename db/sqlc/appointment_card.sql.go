// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: appointment_card.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAppointmentCard = `-- name: CreateAppointmentCard :one
INSERT INTO appointment_card (
    client_id,
    general_information,
    important_contacts,
    household_info,
    organization_agreements,
    youth_officer_agreements,
    treatment_agreements,
    smoking_rules,
    work,
    school_internship,
    travel,
    leave
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, client_id, general_information, important_contacts, household_info, organization_agreements, youth_officer_agreements, treatment_agreements, smoking_rules, work, school_internship, travel, leave, file_url, created_at, updated_at
`

type CreateAppointmentCardParams struct {
	ClientID               int64    `json:"client_id"`
	GeneralInformation     []string `json:"general_information"`
	ImportantContacts      []string `json:"important_contacts"`
	HouseholdInfo          []string `json:"household_info"`
	OrganizationAgreements []string `json:"organization_agreements"`
	YouthOfficerAgreements []string `json:"youth_officer_agreements"`
	TreatmentAgreements    []string `json:"treatment_agreements"`
	SmokingRules           []string `json:"smoking_rules"`
	Work                   []string `json:"work"`
	SchoolInternship       []string `json:"school_internship"`
	Travel                 []string `json:"travel"`
	Leave                  []string `json:"leave"`
}

func (q *Queries) CreateAppointmentCard(ctx context.Context, arg CreateAppointmentCardParams) (AppointmentCard, error) {
	row := q.db.QueryRow(ctx, createAppointmentCard,
		arg.ClientID,
		arg.GeneralInformation,
		arg.ImportantContacts,
		arg.HouseholdInfo,
		arg.OrganizationAgreements,
		arg.YouthOfficerAgreements,
		arg.TreatmentAgreements,
		arg.SmokingRules,
		arg.Work,
		arg.SchoolInternship,
		arg.Travel,
		arg.Leave,
	)
	var i AppointmentCard
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.GeneralInformation,
		&i.ImportantContacts,
		&i.HouseholdInfo,
		&i.OrganizationAgreements,
		&i.YouthOfficerAgreements,
		&i.TreatmentAgreements,
		&i.SmokingRules,
		&i.Work,
		&i.SchoolInternship,
		&i.Travel,
		&i.Leave,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppointmentCard = `-- name: GetAppointmentCard :one
SELECT 
    ac.id, ac.client_id, ac.general_information, ac.important_contacts, ac.household_info, ac.organization_agreements, ac.youth_officer_agreements, ac.treatment_agreements, ac.smoking_rules, ac.work, ac.school_internship, ac.travel, ac.leave, ac.file_url, ac.created_at, ac.updated_at,
    c.first_name,
    c.last_name
FROM appointment_card ac
JOIN client_details c ON ac.client_id = c.id
WHERE ac.client_id = $1
LIMIT 1
`

type GetAppointmentCardRow struct {
	ID                     int64              `json:"id"`
	ClientID               int64              `json:"client_id"`
	GeneralInformation     []string           `json:"general_information"`
	ImportantContacts      []string           `json:"important_contacts"`
	HouseholdInfo          []string           `json:"household_info"`
	OrganizationAgreements []string           `json:"organization_agreements"`
	YouthOfficerAgreements []string           `json:"youth_officer_agreements"`
	TreatmentAgreements    []string           `json:"treatment_agreements"`
	SmokingRules           []string           `json:"smoking_rules"`
	Work                   []string           `json:"work"`
	SchoolInternship       []string           `json:"school_internship"`
	Travel                 []string           `json:"travel"`
	Leave                  []string           `json:"leave"`
	FileUrl                *string            `json:"file_url"`
	CreatedAt              pgtype.Timestamptz `json:"created_at"`
	UpdatedAt              pgtype.Timestamptz `json:"updated_at"`
	FirstName              string             `json:"first_name"`
	LastName               string             `json:"last_name"`
}

func (q *Queries) GetAppointmentCard(ctx context.Context, clientID int64) (GetAppointmentCardRow, error) {
	row := q.db.QueryRow(ctx, getAppointmentCard, clientID)
	var i GetAppointmentCardRow
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.GeneralInformation,
		&i.ImportantContacts,
		&i.HouseholdInfo,
		&i.OrganizationAgreements,
		&i.YouthOfficerAgreements,
		&i.TreatmentAgreements,
		&i.SmokingRules,
		&i.Work,
		&i.SchoolInternship,
		&i.Travel,
		&i.Leave,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FirstName,
		&i.LastName,
	)
	return i, err
}

const updateAppointmentCard = `-- name: UpdateAppointmentCard :one
UPDATE appointment_card
SET
    general_information = COALESCE($2, general_information),
    important_contacts = COALESCE($3, important_contacts),
    household_info = COALESCE($4, household_info),
    organization_agreements = COALESCE($5, organization_agreements),
    youth_officer_agreements = COALESCE($6, youth_officer_agreements),
    treatment_agreements = COALESCE($7, treatment_agreements),
    smoking_rules = COALESCE($8, smoking_rules),
    work = COALESCE($9, work),
    school_internship = COALESCE($10, school_internship),
    travel = COALESCE($11, travel),
    leave = COALESCE($12, leave)
WHERE client_id = $1
RETURNING id, client_id, general_information, important_contacts, household_info, organization_agreements, youth_officer_agreements, treatment_agreements, smoking_rules, work, school_internship, travel, leave, file_url, created_at, updated_at
`

type UpdateAppointmentCardParams struct {
	ClientID               int64    `json:"client_id"`
	GeneralInformation     []string `json:"general_information"`
	ImportantContacts      []string `json:"important_contacts"`
	HouseholdInfo          []string `json:"household_info"`
	OrganizationAgreements []string `json:"organization_agreements"`
	YouthOfficerAgreements []string `json:"youth_officer_agreements"`
	TreatmentAgreements    []string `json:"treatment_agreements"`
	SmokingRules           []string `json:"smoking_rules"`
	Work                   []string `json:"work"`
	SchoolInternship       []string `json:"school_internship"`
	Travel                 []string `json:"travel"`
	Leave                  []string `json:"leave"`
}

func (q *Queries) UpdateAppointmentCard(ctx context.Context, arg UpdateAppointmentCardParams) (AppointmentCard, error) {
	row := q.db.QueryRow(ctx, updateAppointmentCard,
		arg.ClientID,
		arg.GeneralInformation,
		arg.ImportantContacts,
		arg.HouseholdInfo,
		arg.OrganizationAgreements,
		arg.YouthOfficerAgreements,
		arg.TreatmentAgreements,
		arg.SmokingRules,
		arg.Work,
		arg.SchoolInternship,
		arg.Travel,
		arg.Leave,
	)
	var i AppointmentCard
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.GeneralInformation,
		&i.ImportantContacts,
		&i.HouseholdInfo,
		&i.OrganizationAgreements,
		&i.YouthOfficerAgreements,
		&i.TreatmentAgreements,
		&i.SmokingRules,
		&i.Work,
		&i.SchoolInternship,
		&i.Travel,
		&i.Leave,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppointmentCardUrl = `-- name: UpdateAppointmentCardUrl :one
UPDATE appointment_card
SET
    file_url = COALESCE($2, file_url)
WHERE client_id = $1
RETURNING file_url
`

type UpdateAppointmentCardUrlParams struct {
	ClientID int64   `json:"client_id"`
	FileUrl  *string `json:"file_url"`
}

func (q *Queries) UpdateAppointmentCardUrl(ctx context.Context, arg UpdateAppointmentCardUrlParams) (*string, error) {
	row := q.db.QueryRow(ctx, updateAppointmentCardUrl, arg.ClientID, arg.FileUrl)
	var file_url *string
	err := row.Scan(&file_url)
	return file_url, err
}
