// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appointment_card.sql

package db

import (
	"context"
)

const createAppointmentCard = `-- name: CreateAppointmentCard :one
INSERT INTO appointment_card (
    client_id,
    general_information,
    important_contacts,
    household_info,
    organization_agreements,
    youth_officer_agreements,
    treatment_agreements,
    smoking_rules,
    work,
    school_internship,
    travel,
    leave
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, client_id, general_information, important_contacts, household_info, organization_agreements, youth_officer_agreements, treatment_agreements, smoking_rules, work, school_internship, travel, leave, created_at, updated_at
`

type CreateAppointmentCardParams struct {
	ClientID               int64    `json:"client_id"`
	GeneralInformation     []string `json:"general_information"`
	ImportantContacts      []string `json:"important_contacts"`
	HouseholdInfo          []string `json:"household_info"`
	OrganizationAgreements []string `json:"organization_agreements"`
	YouthOfficerAgreements []string `json:"youth_officer_agreements"`
	TreatmentAgreements    []string `json:"treatment_agreements"`
	SmokingRules           []string `json:"smoking_rules"`
	Work                   []string `json:"work"`
	SchoolInternship       []string `json:"school_internship"`
	Travel                 []string `json:"travel"`
	Leave                  []string `json:"leave"`
}

func (q *Queries) CreateAppointmentCard(ctx context.Context, arg CreateAppointmentCardParams) (AppointmentCard, error) {
	row := q.db.QueryRow(ctx, createAppointmentCard,
		arg.ClientID,
		arg.GeneralInformation,
		arg.ImportantContacts,
		arg.HouseholdInfo,
		arg.OrganizationAgreements,
		arg.YouthOfficerAgreements,
		arg.TreatmentAgreements,
		arg.SmokingRules,
		arg.Work,
		arg.SchoolInternship,
		arg.Travel,
		arg.Leave,
	)
	var i AppointmentCard
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.GeneralInformation,
		&i.ImportantContacts,
		&i.HouseholdInfo,
		&i.OrganizationAgreements,
		&i.YouthOfficerAgreements,
		&i.TreatmentAgreements,
		&i.SmokingRules,
		&i.Work,
		&i.SchoolInternship,
		&i.Travel,
		&i.Leave,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAppointmentCard = `-- name: GetAppointmentCard :one
SELECT id, client_id, general_information, important_contacts, household_info, organization_agreements, youth_officer_agreements, treatment_agreements, smoking_rules, work, school_internship, travel, leave, created_at, updated_at FROM appointment_card
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAppointmentCard(ctx context.Context, id int64) (AppointmentCard, error) {
	row := q.db.QueryRow(ctx, getAppointmentCard, id)
	var i AppointmentCard
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.GeneralInformation,
		&i.ImportantContacts,
		&i.HouseholdInfo,
		&i.OrganizationAgreements,
		&i.YouthOfficerAgreements,
		&i.TreatmentAgreements,
		&i.SmokingRules,
		&i.Work,
		&i.SchoolInternship,
		&i.Travel,
		&i.Leave,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAppointmentCard = `-- name: UpdateAppointmentCard :one
UPDATE appointment_card
SET
    general_information = COALESCE($2, general_information),
    important_contacts = COALESCE($3, important_contacts),
    household_info = COALESCE($4, household_info),
    organization_agreements = COALESCE($5, organization_agreements),
    youth_officer_agreements = COALESCE($6, youth_officer_agreements),
    treatment_agreements = COALESCE($7, treatment_agreements),
    smoking_rules = COALESCE($8, smoking_rules),
    work = COALESCE($9, work),
    school_internship = COALESCE($10, school_internship),
    travel = COALESCE($11, travel),
    leave = COALESCE($12, leave)
WHERE id = $1
RETURNING id, client_id, general_information, important_contacts, household_info, organization_agreements, youth_officer_agreements, treatment_agreements, smoking_rules, work, school_internship, travel, leave, created_at, updated_at
`

type UpdateAppointmentCardParams struct {
	ID                     int64    `json:"id"`
	GeneralInformation     []string `json:"general_information"`
	ImportantContacts      []string `json:"important_contacts"`
	HouseholdInfo          []string `json:"household_info"`
	OrganizationAgreements []string `json:"organization_agreements"`
	YouthOfficerAgreements []string `json:"youth_officer_agreements"`
	TreatmentAgreements    []string `json:"treatment_agreements"`
	SmokingRules           []string `json:"smoking_rules"`
	Work                   []string `json:"work"`
	SchoolInternship       []string `json:"school_internship"`
	Travel                 []string `json:"travel"`
	Leave                  []string `json:"leave"`
}

func (q *Queries) UpdateAppointmentCard(ctx context.Context, arg UpdateAppointmentCardParams) (AppointmentCard, error) {
	row := q.db.QueryRow(ctx, updateAppointmentCard,
		arg.ID,
		arg.GeneralInformation,
		arg.ImportantContacts,
		arg.HouseholdInfo,
		arg.OrganizationAgreements,
		arg.YouthOfficerAgreements,
		arg.TreatmentAgreements,
		arg.SmokingRules,
		arg.Work,
		arg.SchoolInternship,
		arg.Travel,
		arg.Leave,
	)
	var i AppointmentCard
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.GeneralInformation,
		&i.ImportantContacts,
		&i.HouseholdInfo,
		&i.OrganizationAgreements,
		&i.YouthOfficerAgreements,
		&i.TreatmentAgreements,
		&i.SmokingRules,
		&i.Work,
		&i.SchoolInternship,
		&i.Travel,
		&i.Leave,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
