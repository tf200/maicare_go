// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: custom_user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO custom_user (
    password,
    email,
    is_active,
    role_id,
    profile_picture
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, password, last_login, email, role_id, is_active, date_joined, profile_picture
`

type CreateUserParams struct {
	Password       string  `json:"password"`
	Email          string  `json:"email"`
	IsActive       bool    `json:"is_active"`
	RoleID         int32   `json:"role_id"`
	ProfilePicture *string `json:"profile_picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CustomUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Password,
		arg.Email,
		arg.IsActive,
		arg.RoleID,
		arg.ProfilePicture,
	)
	var i CustomUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.Email,
		&i.RoleID,
		&i.IsActive,
		&i.DateJoined,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, password, last_login, email, role_id, is_active, date_joined, profile_picture FROM custom_user
WHERE email= $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (CustomUser, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i CustomUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.Email,
		&i.RoleID,
		&i.IsActive,
		&i.DateJoined,
		&i.ProfilePicture,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, password, last_login, email, role_id, is_active, date_joined, profile_picture FROM custom_user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (CustomUser, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i CustomUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.Email,
		&i.RoleID,
		&i.IsActive,
		&i.DateJoined,
		&i.ProfilePicture,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE custom_user
SET password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password)
	return err
}
