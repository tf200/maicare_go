// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: custom_user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTemp2FaSecret = `-- name: CreateTemp2FaSecret :exec
UPDATE custom_user
SET two_factor_secret_temp = $2
WHERE id = $1
`

type CreateTemp2FaSecretParams struct {
	ID                  int64   `json:"id"`
	TwoFactorSecretTemp *string `json:"two_factor_secret_temp"`
}

func (q *Queries) CreateTemp2FaSecret(ctx context.Context, arg CreateTemp2FaSecretParams) error {
	_, err := q.db.Exec(ctx, createTemp2FaSecret, arg.ID, arg.TwoFactorSecretTemp)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO custom_user (
    password,
    email,
    is_active,
    profile_picture
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, password, last_login, email, is_active, date_joined, profile_picture, two_factor_enabled, two_factor_secret, two_factor_secret_temp, recovery_codes
`

type CreateUserParams struct {
	Password       string  `json:"password"`
	Email          string  `json:"email"`
	IsActive       bool    `json:"is_active"`
	ProfilePicture *string `json:"profile_picture"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CustomUser, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Password,
		arg.Email,
		arg.IsActive,
		arg.ProfilePicture,
	)
	var i CustomUser
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.Email,
		&i.IsActive,
		&i.DateJoined,
		&i.ProfilePicture,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.TwoFactorSecretTemp,
		&i.RecoveryCodes,
	)
	return i, err
}

const enable2Fa = `-- name: Enable2Fa :exec
UPDATE custom_user
SET two_factor_secret = $2,
    two_factor_secret_temp = NULL,
    two_factor_enabled = true,
    recovery_codes = $3
WHERE id = $1
`

type Enable2FaParams struct {
	ID              int64    `json:"id"`
	TwoFactorSecret *string  `json:"two_factor_secret"`
	RecoveryCodes   []string `json:"recovery_codes"`
}

func (q *Queries) Enable2Fa(ctx context.Context, arg Enable2FaParams) error {
	_, err := q.db.Exec(ctx, enable2Fa, arg.ID, arg.TwoFactorSecret, arg.RecoveryCodes)
	return err
}

const getAllAdminUsers = `-- name: GetAllAdminUsers :many
SELECT id, password, last_login, email, is_active, date_joined, profile_picture, two_factor_enabled, two_factor_secret, two_factor_secret_temp, recovery_codes FROM custom_user
WHERE role_id = (SELECT id FROM roles WHERE name = 'admin')
`

func (q *Queries) GetAllAdminUsers(ctx context.Context) ([]CustomUser, error) {
	rows, err := q.db.Query(ctx, getAllAdminUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomUser
	for rows.Next() {
		var i CustomUser
		if err := rows.Scan(
			&i.ID,
			&i.Password,
			&i.LastLogin,
			&i.Email,
			&i.IsActive,
			&i.DateJoined,
			&i.ProfilePicture,
			&i.TwoFactorEnabled,
			&i.TwoFactorSecret,
			&i.TwoFactorSecretTemp,
			&i.RecoveryCodes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTemp2FaSecret = `-- name: GetTemp2FaSecret :one
SELECT two_factor_secret_temp FROM custom_user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTemp2FaSecret(ctx context.Context, id int64) (*string, error) {
	row := q.db.QueryRow(ctx, getTemp2FaSecret, id)
	var two_factor_secret_temp *string
	err := row.Scan(&two_factor_secret_temp)
	return two_factor_secret_temp, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT cu.id, cu.password, cu.last_login, cu.email, cu.is_active, cu.date_joined, cu.profile_picture, cu.two_factor_enabled, cu.two_factor_secret, cu.two_factor_secret_temp, cu.recovery_codes, e.id as employee_id FROM custom_user cu
JOIN employee_profile e ON e.user_id = cu.id
WHERE cu.email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID                  int64              `json:"id"`
	Password            string             `json:"password"`
	LastLogin           pgtype.Timestamptz `json:"last_login"`
	Email               string             `json:"email"`
	IsActive            bool               `json:"is_active"`
	DateJoined          pgtype.Timestamptz `json:"date_joined"`
	ProfilePicture      *string            `json:"profile_picture"`
	TwoFactorEnabled    bool               `json:"two_factor_enabled"`
	TwoFactorSecret     *string            `json:"two_factor_secret"`
	TwoFactorSecretTemp *string            `json:"two_factor_secret_temp"`
	RecoveryCodes       []string           `json:"recovery_codes"`
	EmployeeID          int64              `json:"employee_id"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.Email,
		&i.IsActive,
		&i.DateJoined,
		&i.ProfilePicture,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.TwoFactorSecretTemp,
		&i.RecoveryCodes,
		&i.EmployeeID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT cu.id, cu.password, cu.last_login, cu.email, cu.is_active, cu.date_joined, cu.profile_picture, cu.two_factor_enabled, cu.two_factor_secret, cu.two_factor_secret_temp, cu.recovery_codes, e.id as employee_id FROM custom_user cu
JOIN employee_profile e ON e.user_id = cu.id
WHERE cu.id = $1 LIMIT 1
`

type GetUserByIDRow struct {
	ID                  int64              `json:"id"`
	Password            string             `json:"password"`
	LastLogin           pgtype.Timestamptz `json:"last_login"`
	Email               string             `json:"email"`
	IsActive            bool               `json:"is_active"`
	DateJoined          pgtype.Timestamptz `json:"date_joined"`
	ProfilePicture      *string            `json:"profile_picture"`
	TwoFactorEnabled    bool               `json:"two_factor_enabled"`
	TwoFactorSecret     *string            `json:"two_factor_secret"`
	TwoFactorSecretTemp *string            `json:"two_factor_secret_temp"`
	RecoveryCodes       []string           `json:"recovery_codes"`
	EmployeeID          int64              `json:"employee_id"`
}

func (q *Queries) GetUserByID(ctx context.Context, id int64) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.LastLogin,
		&i.Email,
		&i.IsActive,
		&i.DateJoined,
		&i.ProfilePicture,
		&i.TwoFactorEnabled,
		&i.TwoFactorSecret,
		&i.TwoFactorSecretTemp,
		&i.RecoveryCodes,
		&i.EmployeeID,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE custom_user
SET password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.ID, arg.Password)
	return err
}
