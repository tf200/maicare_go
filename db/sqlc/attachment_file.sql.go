// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attachment_file.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAttachment = `-- name: CreateAttachment :one
INSERT INTO attachment_file (
    "name",
    "file",
    "size",
    tag
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING uuid, name, file, size, is_used, tag, updated, created
`

type CreateAttachmentParams struct {
	Name string  `json:"name"`
	File string  `json:"file"`
	Size int32   `json:"size"`
	Tag  *string `json:"tag"`
}

func (q *Queries) CreateAttachment(ctx context.Context, arg CreateAttachmentParams) (AttachmentFile, error) {
	row := q.db.QueryRow(ctx, createAttachment,
		arg.Name,
		arg.File,
		arg.Size,
		arg.Tag,
	)
	var i AttachmentFile
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.File,
		&i.Size,
		&i.IsUsed,
		&i.Tag,
		&i.Updated,
		&i.Created,
	)
	return i, err
}

const deleteAttachment = `-- name: DeleteAttachment :one
DELETE FROM attachment_file
WHERE uuid = $1
RETURNING uuid, name, file, size, is_used, tag, updated, created
`

func (q *Queries) DeleteAttachment(ctx context.Context, argUuid uuid.UUID) (AttachmentFile, error) {
	row := q.db.QueryRow(ctx, deleteAttachment, argUuid)
	var i AttachmentFile
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.File,
		&i.Size,
		&i.IsUsed,
		&i.Tag,
		&i.Updated,
		&i.Created,
	)
	return i, err
}

const getAttachmentById = `-- name: GetAttachmentById :one
SELECT uuid, name, file, size, is_used, tag, updated, created FROM attachment_file
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetAttachmentById(ctx context.Context, argUuid uuid.UUID) (AttachmentFile, error) {
	row := q.db.QueryRow(ctx, getAttachmentById, argUuid)
	var i AttachmentFile
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.File,
		&i.Size,
		&i.IsUsed,
		&i.Tag,
		&i.Updated,
		&i.Created,
	)
	return i, err
}

const setAttachmentAsUsedorUnused = `-- name: SetAttachmentAsUsedorUnused :one
UPDATE attachment_file
SET
    is_used = $2
WHERE
    uuid = $1
RETURNING uuid, name, file, size, is_used, tag, updated, created
`

type SetAttachmentAsUsedorUnusedParams struct {
	Uuid   uuid.UUID `json:"uuid"`
	IsUsed bool      `json:"is_used"`
}

func (q *Queries) SetAttachmentAsUsedorUnused(ctx context.Context, arg SetAttachmentAsUsedorUnusedParams) (AttachmentFile, error) {
	row := q.db.QueryRow(ctx, setAttachmentAsUsedorUnused, arg.Uuid, arg.IsUsed)
	var i AttachmentFile
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.File,
		&i.Size,
		&i.IsUsed,
		&i.Tag,
		&i.Updated,
		&i.Created,
	)
	return i, err
}
