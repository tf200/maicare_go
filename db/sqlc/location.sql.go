// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: location.sql

package db

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO location (
    name,
    address,
    capacity
) VALUES (
    $1, $2, $3
) RETURNING id, name, address, capacity
`

type CreateLocationParams struct {
	Name     string `json:"name"`
	Address  string `json:"address"`
	Capacity *int32 `json:"capacity"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, arg.Name, arg.Address, arg.Capacity)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Capacity,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :one
DELETE FROM location
WHERE id = $1
RETURNING id, name, address, capacity
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRow(ctx, deleteLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Capacity,
	)
	return i, err
}

const getLocation = `-- name: GetLocation :one
SELECT id, name, address, capacity FROM location
WHERE id = $1
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (Location, error) {
	row := q.db.QueryRow(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Capacity,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, address, capacity FROM location
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.Query(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Capacity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE location
SET
    name = COALESCE($2, name),
    address = COALESCE($3, address),
    capacity = COALESCE($4, capacity)
WHERE id = $1
RETURNING id, name, address, capacity
`

type UpdateLocationParams struct {
	ID       int64   `json:"id"`
	Name     *string `json:"name"`
	Address  *string `json:"address"`
	Capacity *int32  `json:"capacity"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, updateLocation,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.Capacity,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Capacity,
	)
	return i, err
}
