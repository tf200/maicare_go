// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: location.sql

package db

import (
	"context"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO location (
    name,
    address,
    capacity
) VALUES (
    $1, $2, $3
) RETURNING id, name, address, capacity
`

type CreateLocationParams struct {
	Name     string `json:"name"`
	Address  string `json:"address"`
	Capacity *int32 `json:"capacity"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, arg.Name, arg.Address, arg.Capacity)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Capacity,
	)
	return i, err
}

const listLocations = `-- name: ListLocations :many
SELECT id, name, address, capacity FROM location
`

func (q *Queries) ListLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.Query(ctx, listLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Capacity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
