name: Deploy Backend to VPS

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/maicare
  VPS_APP_DIR: /opt/maicare

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: maicare-prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:back
            ${{ env.DOCKER_IMAGE }}:back-${{ github.sha }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e
            
            echo "=== Starting Deployment ==="
            
            # Create app directory if it doesn't exist
            sudo mkdir -p /opt/maicare
            sudo chown -R ${{ secrets.VPS_USERNAME }}:${{ secrets.VPS_USERNAME }} /opt/maicare
            
            # Login to Docker Hub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Pull the new image
            echo "Pulling new image..."
            docker pull ${{ env.DOCKER_IMAGE }}:back
            
            # Create environment file
            echo "Creating environment file..."
            cat <<EOF > /opt/maicare/app.env
            DB_SOURCE=${{ secrets.DB_SOURCE }}
            SERVER_ADDRESS=${{ secrets.SERVER_ADDRESS }}
            ACCESS_TOKEN_SECRET_KEY=${{ secrets.ACCESS_TOKEN_SECRET_KEY }}
            ACCESS_TOKEN_DURATION=${{ secrets.ACCESS_TOKEN_DURATION }}
            REFRESH_TOKEN_SECRET_KEY=${{ secrets.REFRESH_TOKEN_SECRET_KEY }}
            REFRESH_TOKEN_DURATION=${{ secrets.REFRESH_TOKEN_DURATION }}
            TWO_FA_TOKEN_SECRET_KEY=${{ secrets.TWO_FA_TOKEN_SECRET_KEY }}
            TWO_FA_TOKEN_DURATION=${{ secrets.TWO_FA_TOKEN_DURATION }}
            B2_ENDPOINT=${{ secrets.B2_ENDPOINT }}
            B2_KEY=${{ secrets.B2_KEY }}
            B2_KEY_ID=${{ secrets.B2_KEY_ID }}
            B2_BUCKET=${{ secrets.B2_BUCKET }}
            HOST=${{ secrets.HOST }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            REMOTE=${{ secrets.REMOTE }}
            OPEN_ROUTER_API_KEY=${{ secrets.OPEN_ROUTER_API_KEY }}
            SMTP_NAME=${{ secrets.SMTP_NAME }}
            SMTP_ADDRESS=${{ secrets.SMTP_ADDRESS }}
            SMTP_AUTH=${{ secrets.SMTP_AUTH }}
            SMTP_HOST=${{ secrets.SMTP_HOST }}
            SMTP_PORT=${{ secrets.SMTP_PORT }}
            BREVO_SENDER_NAME=${{ secrets.BREVO_SENDER_NAME }}
            BREVO_SENDER_EMAIL=${{ secrets.BREVO_SENDER_EMAIL }}
            BREVO_API_KEY=${{ secrets.BREVO_API_KEY }}
            ENVIRONMENT=production
            GRPC_URL=${{ secrets.GRPC_URL }}
            EOF
            
            chmod 644 /opt/maicare/app.env
            
            echo "=== Database Backup ==="
            # Create backup directory
            mkdir -p /opt/maicare/backups
            
            # Backup database before migration
            BACKUP_FILE="/opt/maicare/backups/backup_$(date +%Y%m%d_%H%M%S).sql"
            echo "Creating database backup: $BACKUP_FILE"
            
            docker run --rm \
              --network maicare-network \
              postgres:15-alpine \
              pg_dump "${{ secrets.DB_SOURCE }}" \
              -F c -b -v > "$BACKUP_FILE" 2>&1 || {
                echo "Warning: Database backup failed. Continuing with deployment..."
              }
            
            # Keep only last 7 backups
            cd /opt/maicare/backups && ls -t | tail -n +8 | xargs -r rm
            
            
            # Stop and remove existing container if running
            if [ "$(docker ps -aq -f name=maicare-backend)" ]; then
              echo "Stopping existing container..."
              docker stop maicare-backend || true
              docker rm maicare-backend || true
            fi
            
            # Run the new container
            echo "Starting new container..."
            docker run -d \
              --name maicare-backend \
              --network maicare-network \
              -p 8080:8080 \
              --restart unless-stopped \
              --env-file /opt/maicare/app.env \
              ${{ env.DOCKER_IMAGE }}:back
            
            echo "=== Deployment Complete ==="
            
            # Wait and verify container is running
            echo "Waiting for container to start..."
            sleep 10
            
            if [ "$(docker ps -q -f name=maicare-backend)" ]; then
              echo "✓ Container is running successfully"
            else
              echo "✗ Container failed to start"
              echo "Checking logs..."
              docker logs maicare-backend --tail 50
              exit 1
            fi

            # Health check with retries
            echo "Performing health check..."
            for i in {1..6}; do
              if curl -sf http://localhost:8080/test/health | grep -q "healthy"; then
                echo "✓ Health check passed"
                break
              else
                echo "Attempt $i/6: Health check failed, retrying in 5s..."
                sleep 5
              fi
              
              if [ $i -eq 6 ]; then
                echo "✗ Health check failed after 6 attempts"
                echo "Application logs:"
                docker logs maicare-backend --tail 100
                exit 1
              fi
            done
            
            # Clean up old images
            echo "Cleaning up old images..."
            docker image prune -af --filter "until=24h"
            
            echo "=== Deployment Successful ==="